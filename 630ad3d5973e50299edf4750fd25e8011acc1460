{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "48b2742a_5c048ae2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000610
      },
      "writtenOn": "2023-12-31T18:02:49Z",
      "side": 1,
      "message": "Merged into a single commit. Rest all abandoned .",
      "revId": "630ad3d5973e50299edf4750fd25e8011acc1460",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45a8e265_da58ddfd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-01-02T13:53:56Z",
      "side": 1,
      "message": "Echoing Axel, this doesn\u0027t seem the correct direction.  We really shouldn\u0027t be bleeding protocol stuff into the BNetworkInterface.\n\nSee https://review.haiku-os.org/c/haiku/+/7286 for an example on a better direction.  (Setting the \"Autoconfiguring\" state on the overall card startup vs ConfigureIPv4)",
      "revId": "630ad3d5973e50299edf4750fd25e8011acc1460",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4cae4f12_cdbdff08",
        "filename": "src/kits/network/libnetapi/NetworkInterface.cpp",
        "patchSetId": 4
      },
      "lineNbr": 567,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2024-01-02T08:38:28Z",
      "side": 1,
      "message": "BNetworkInterface should not care about the family here. That\u0027s the job of the one carrying out the work.\n\nThe main issue is that IFF_CONFIGURING and friends are set on the interface, while they are not really affecting the whole interface. This should be fixed instead.",
      "revId": "630ad3d5973e50299edf4750fd25e8011acc1460",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0004dbb_7eadb7e9",
        "filename": "src/kits/network/libnetapi/NetworkInterface.cpp",
        "patchSetId": 4
      },
      "lineNbr": 567,
      "author": {
        "id": 1000610
      },
      "writtenOn": "2024-01-02T15:32:51Z",
      "side": 1,
      "message": "Currently, we are not supporting the auto-config for ipv6 . So to block an user from auto-configuring the ipv6 through ifconfig, I have placed this check.\nDo you want this check to be done on the application side ?",
      "parentUuid": "4cae4f12_cdbdff08",
      "revId": "630ad3d5973e50299edf4750fd25e8011acc1460",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec4f5cfd_77b9ad0d",
        "filename": "src/preferences/network/InterfaceAddressView.cpp",
        "patchSetId": 4
      },
      "lineNbr": 217,
      "author": {
        "id": 1000448
      },
      "writtenOn": "2024-01-01T09:47:56Z",
      "side": 1,
      "message": "I think this is still a bit confusing that for IPv6 we first potentially set `autoConfigure` to true and then only later check for `autoConfigure \u0026\u0026 fFamily \u003d\u003d AF_INET6`.\n\nI think it would be cleaner to check here for `\u0026\u0026 fFamily \u003d\u003d AF_INET` (i.e. only default to auto-configure for IPv4)",
      "revId": "630ad3d5973e50299edf4750fd25e8011acc1460",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3aca248_39184331",
        "filename": "src/preferences/network/InterfaceAddressView.cpp",
        "patchSetId": 4
      },
      "lineNbr": 229,
      "author": {
        "id": 1000448
      },
      "writtenOn": "2024-01-01T09:47:56Z",
      "side": 1,
      "message": "I\u0027d like to also get rid of the duplication of `index \u003c 0 || status !\u003d B_OK || address.Address().IsEmpty()`\n\nMaybe we could do something like:\n\n```\nbool addressSet \u003d false;\nBNetworkInterfaceAddress address;\nint32 index \u003d fInterface.FindFirstAddress(fFamily);\nif (index \u003e\u003d 0) {\n    if (fInterface.GetAddressAt(index, address) \u003d\u003d B_OK)\n        addressSet \u003d !address.Address().IsEmpty();\n}\nif (!autoConfigure \u0026\u0026 !addressSet) {\n```\n\nand then also just use `autoConfigure \u0026\u0026 !addressSet` (in line 240)",
      "revId": "630ad3d5973e50299edf4750fd25e8011acc1460",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}