{
  "comments": [
    {
      "key": {
        "uuid": "cb1f6c5d_0530f9fe",
        "filename": "src/add-ons/kernel/file_systems/ufs2/Inode.cpp",
        "patchSetId": 3
      },
      "lineNbr": 15,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2020-06-17T06:29:26Z",
      "side": 1,
      "message": "two blank lines here",
      "revId": "0e634251a2a4b0f258670b900ae6061c0dab25d5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5e0cd39_627db979",
        "filename": "src/add-ons/kernel/file_systems/ufs2/Inode.cpp",
        "patchSetId": 3
      },
      "lineNbr": 15,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2020-06-19T06:37:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cb1f6c5d_0530f9fe",
      "revId": "0e634251a2a4b0f258670b900ae6061c0dab25d5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "867581e5_e6d6cf77",
        "filename": "src/add-ons/kernel/file_systems/ufs2/Inode.cpp",
        "patchSetId": 3
      },
      "lineNbr": 24,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2020-06-17T06:29:26Z",
      "side": 1,
      "message": "no blank line here",
      "revId": "0e634251a2a4b0f258670b900ae6061c0dab25d5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "906fb11c_322f846a",
        "filename": "src/add-ons/kernel/file_systems/ufs2/Inode.cpp",
        "patchSetId": 3
      },
      "lineNbr": 24,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2020-06-19T06:37:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "867581e5_e6d6cf77",
      "revId": "0e634251a2a4b0f258670b900ae6061c0dab25d5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "46f66517_a122b1dd",
        "filename": "src/add-ons/kernel/file_systems/ufs2/Inode.cpp",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2020-06-17T06:29:26Z",
      "side": 1,
      "message": "I don\u0027t understand why you need this variable",
      "revId": "0e634251a2a4b0f258670b900ae6061c0dab25d5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fee33701_6d7754a9",
        "filename": "src/add-ons/kernel/file_systems/ufs2/Inode.cpp",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1000197
      },
      "writtenOn": "2020-06-18T07:41:42Z",
      "side": 1,
      "message": "memcpy takes it\u0027s parameter as a pointer so I created a pointer for it but then you told a better way so it can be removed.",
      "parentUuid": "46f66517_a122b1dd",
      "revId": "0e634251a2a4b0f258670b900ae6061c0dab25d5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03ef1dc4_e09cfb30",
        "filename": "src/add-ons/kernel/file_systems/ufs2/Inode.cpp",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2020-06-18T08:07:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fee33701_6d7754a9",
      "revId": "0e634251a2a4b0f258670b900ae6061c0dab25d5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "923cb4e2_a4cb264d",
        "filename": "src/add-ons/kernel/file_systems/ufs2/Inode.cpp",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2020-06-17T06:29:26Z",
      "side": 1,
      "message": "This is only stored in a local variable, so this memory is leaked.\n\nWhy not read directly into fNode?\n\nread_pos(fd, 164352, (void*)\u0026fNode, sizeof(fNode)) \u003d\u003d sizeof(fNode)",
      "revId": "0e634251a2a4b0f258670b900ae6061c0dab25d5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1918492c_56c2ef33",
        "filename": "src/add-ons/kernel/file_systems/ufs2/Inode.cpp",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1000197
      },
      "writtenOn": "2020-06-18T07:41:42Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "923cb4e2_a4cb264d",
      "revId": "0e634251a2a4b0f258670b900ae6061c0dab25d5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6771794f_e5020650",
        "filename": "src/add-ons/kernel/file_systems/ufs2/Inode.cpp",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2020-06-18T08:07:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1918492c_56c2ef33",
      "revId": "0e634251a2a4b0f258670b900ae6061c0dab25d5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d520d6c_ddf08957",
        "filename": "src/add-ons/kernel/file_systems/ufs2/Inode.cpp",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2020-06-17T06:29:26Z",
      "side": 1,
      "message": "Now all your Inodes will be read from offset 164352 from the disk. This means all files and all directories will always be the root directory and never anything else. This does not make a very useful filesystem. As we discussed earlier, the offset needs to be computed from the inode id passed as a parameter to this function, so that it can be used for other files and directories as well.",
      "revId": "0e634251a2a4b0f258670b900ae6061c0dab25d5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7da0759e_ca10a688",
        "filename": "src/add-ons/kernel/file_systems/ufs2/Inode.cpp",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 1000197
      },
      "writtenOn": "2020-06-18T07:41:42Z",
      "side": 1,
      "message": "Actually I was understanding how to calculate the offset from inode number and for that I found a way in https://github.com/sleuthkit/sleuthkit/blob/develop/tsk/fs/ffs.c here is a function named itod_lcl that calculates offset of a inode and it is defined at https://github.com/sleuthkit/sleuthkit/blob/develop/tsk/fs/tsk_ffs.h\nWill it be useful? What are your views about it?",
      "parentUuid": "7d520d6c_ddf08957",
      "revId": "0e634251a2a4b0f258670b900ae6061c0dab25d5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f8466e7_ade055ff",
        "filename": "src/add-ons/kernel/file_systems/ufs2/Inode.cpp",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2020-06-18T08:07:22Z",
      "side": 1,
      "message": "Yes, that\u0027s the code needed. You can get it from the FreeBSD version however. it seems better to reference the original implementation and it has more comments:\nhttps://github.com/freebsd/freebsd/blob/master/sys/ufs/ffs/fs.h#L611\n\nIf I understand this correctly, the filesystem is divided into cylinder groups, and each cylinder group has an inode table. In FreeBSD there is ino_to_fsba which converts the inode number into the filesystem block address (this has to be multiplied by the block size, I think).\n\nIt would be nice to rewrite this code in a more readable way however, the FreeBSD macro is very compact but hard to follow.",
      "parentUuid": "7da0759e_ca10a688",
      "revId": "0e634251a2a4b0f258670b900ae6061c0dab25d5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4995883f_02527411",
        "filename": "src/add-ons/kernel/file_systems/ufs2/Inode.cpp",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2020-06-19T06:37:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0f8466e7_ade055ff",
      "revId": "0e634251a2a4b0f258670b900ae6061c0dab25d5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e6de2154_03dfc996",
        "filename": "src/add-ons/kernel/file_systems/ufs2/Inode.cpp",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2020-06-17T06:29:26Z",
      "side": 1,
      "message": "Why 512 and not sizeof(fNode)?",
      "revId": "0e634251a2a4b0f258670b900ae6061c0dab25d5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b413f17f_0f0e6408",
        "filename": "src/add-ons/kernel/file_systems/ufs2/Inode.cpp",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2020-06-19T06:37:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e6de2154_03dfc996",
      "revId": "0e634251a2a4b0f258670b900ae6061c0dab25d5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": false
    }
  ]
}