{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3bb946dc_dfa815ca",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-06-24T21:55:05Z",
      "side": 1,
      "message": "Probably better to just use our own homegrown ArrayDeleter.",
      "revId": "49391e4439a4fe2cc5318941f564a37cb0890057",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3182985_be535f27",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2023-06-25T20:19:03Z",
      "side": 1,
      "message": "Why do you think that that is better? std::vector provides a nice contiguous array of elements, and the memory gets freed when it goes out of scope.",
      "parentUuid": "3bb946dc_dfa815ca",
      "revId": "49391e4439a4fe2cc5318941f564a37cb0890057",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "83ea6b92_94c28fa5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2023-06-25T20:19:03Z",
      "side": 1,
      "message": "Thanks for checking the patches. Could you clarify why ArrayDeleter would work better here?",
      "revId": "49391e4439a4fe2cc5318941f564a37cb0890057",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b385297_56eca4f1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-06-25T21:31:33Z",
      "side": 1,
      "message": "I think it is just Waddleplash\u0027s personal war against usage of the C++ standard library in Haiku sourcecode. std::vector seems just fine here.",
      "parentUuid": "d3182985_be535f27",
      "revId": "49391e4439a4fe2cc5318941f564a37cb0890057",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d21a9ed_90c8772f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-06-25T22:48:27Z",
      "side": 1,
      "message": "Indeed I think we should avoid the C++ STL unless it provides some real benefit. Here we are making use of a C++11 spec requirement (that vector storage is contiguous) which is observed by GCC et al., but std::vector itself could go against in the future (e.g. it could be \"chunked\", and the only reason it can\u0027t at the moment is because the spec doesn\u0027t allow it, and that could be liberalized.)\n\nSince the code wants a contiguous buffer, why not just use ArrayDeleter then? The semantics are then really explicit and not dependent on something in the spec (which, by the way, was not actually required by the C++98 spec.)",
      "parentUuid": "6b385297_56eca4f1",
      "revId": "49391e4439a4fe2cc5318941f564a37cb0890057",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2e2eac4_61775179",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-06-26T05:37:23Z",
      "side": 1,
      "message": "I don\u0027t see how this is an argument against using std::vector\n\n- the code wants a contiguous buffer\n- std::vector provides a contiguous buffer\n- this patch uses std::vector to provides a contiguous buffer, which is exactly what it is designed to do\n\nIf we don\u0027t trust gcc to follow the language specs, we should not use gcc. Or if we don\u0027t trust the C++ spec to remain reasonably stable, we should not use C++ at all. But we use both, and happily so for the last 20+ years, and, as far as I know, with no plans to change that.",
      "parentUuid": "5d21a9ed_90c8772f",
      "revId": "49391e4439a4fe2cc5318941f564a37cb0890057",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "438c9d34_1963f8a2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2023-06-26T10:55:31Z",
      "side": 1,
      "message": "`std::vector` do not properly handle out of memory. It depends on exceptions that are currently not available in kernel. `std::unique_ptr` or `ArrayDeleter` can be used.",
      "parentUuid": "c2e2eac4_61775179",
      "revId": "49391e4439a4fe2cc5318941f564a37cb0890057",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8a79e4e_edbb4703",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2023-06-26T19:39:00Z",
      "side": 1,
      "message": "Re X512:\nThis change is IMO not the place to discuss/debate what the proper way of handling OOM situations is.\n\nFor this particular change your points are moot: \n - it is not the kernel but the print_server, so we are in user space.\n - the original code also did not handle OOM situations, so this is not a deterioration of the prior situation.\n\nRe: waddlesplash\nLike the OOM issue, I do not think this is the right place to discuss what parts of the C++ standard library to use and which not. Currently std::vector is used in a few places in the Haiku source code. My argument thus is that it is done before, and it is not explicitly forbidden by any of our rules, therefore it should be acceptable.",
      "parentUuid": "438c9d34_1963f8a2",
      "revId": "49391e4439a4fe2cc5318941f564a37cb0890057",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "df2e5c6b_be9d0d7a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2023-06-28T06:28:19Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e8a79e4e_edbb4703",
      "revId": "49391e4439a4fe2cc5318941f564a37cb0890057",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}