{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "19363920_db63dbad",
        "filename": "docs/user/app/Roster.dox",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-07-15T09:39:40Z",
      "side": 1,
      "message": "maybe this deserve some more details:\n\nAttempts to launch the same application again will result in a B_ARGV_RECEIVED or B_REFS_RECEIVED message delivered to the existing instance. The application should take care of handling these messages correctly. Applications which can\u0027t or don\u0027t want to handle this should use B_MULTIPLE_LAUNCH instead.",
      "revId": "b327be0f315595283fcf44454e39be5deb82c708",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0690faeb_45e5a868",
        "filename": "docs/user/app/Roster.dox",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-07-15T09:39:40Z",
      "side": 1,
      "message": "we can also mention that this should not be used together with B_SINGLE_LAUNCH or B_EXCLUSIVE_LAUNCH, as that would make it impossible to call the application again?",
      "revId": "b327be0f315595283fcf44454e39be5deb82c708",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4fe326a_a00066e7",
        "filename": "docs/user/app/Roster.dox",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2023-07-15T10:03:15Z",
      "side": 1,
      "message": "Why would this make it impossible?\nI agree that the combination makes little sense, but something like a unix server could perhaps expect to be launched with argv, and require a databse that it should lock but doesn\u0027t, for that the combination of single launch and argv could make sense? although this is a bit contrived as an example.",
      "parentUuid": "0690faeb_45e5a868",
      "revId": "b327be0f315595283fcf44454e39be5deb82c708",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ef4f5d7_ab36878d",
        "filename": "docs/user/app/Roster.dox",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-07-15T10:41:17Z",
      "side": 1,
      "message": "B_SINGLE_LAUNCH does not mean \"do not launch this app ever again\", but \"if you try to launch this app again, instead of spawning a new process, send a message to the existing process\".\n\nSo, if the process can\u0027t accept any messages, this just doesn\u0027t work.\n\nIf something can\u0027t accept BMessage, it will have to handle this on its own (using a PID file or some other mechanism to ensure there is no other running instance).",
      "parentUuid": "a4fe326a_a00066e7",
      "revId": "b327be0f315595283fcf44454e39be5deb82c708",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94e15953_07e4e69b",
        "filename": "docs/user/app/Roster.dox",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2023-07-15T10:59:49Z",
      "side": 1,
      "message": "PID files are unreliable and dangerous.\n\nIn any case, if the app does not handle BMessages and does not want a second launch it would simply not get the message that a second instance is requested, which would be equivalent to an application choosing to ignore it. This case seems fine to me?\n\nI can document that using it together prevents stuff like \"Open a second window\", but that is already implied with the never use it for GUI i think, and console apps can\u0027t receive a second set of arguments without some kind of diy messagin either, but in that case it would not need to set single launch either.",
      "parentUuid": "9ef4f5d7_ab36878d",
      "revId": "b327be0f315595283fcf44454e39be5deb82c708",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69f8b45e_f3654ced",
        "filename": "docs/user/storage/FindDirectory.dox",
        "patchSetId": 1
      },
      "lineNbr": 186,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-07-15T09:39:40Z",
      "side": 1,
      "message": "Suggested rewording to not have the description of this constant inside the warning:\n\nContains applications used to configure Haiku, and usually available in the \"Preferences\" Deskbar menu.\n\n\\warning Not to be confused with B_SYSTEM_SETTINGS_DIRECTORY, where system settings files can be saved.\n\n\nThe other constants documentation can be updated similarly.",
      "revId": "b327be0f315595283fcf44454e39be5deb82c708",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b90633dc_b0ffd894",
        "filename": "docs/user/storage/FindDirectory.dox",
        "patchSetId": 1
      },
      "lineNbr": 416,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-07-15T09:39:40Z",
      "side": 1,
      "message": "Suggested wording:\n\n\\brief The top-level directory of the user packages installation.\n\nThis directory has a similar layout to the main system directory, and can be used to install user-specific packages.\n\n\\warning Do not store configuration and settings files directly here, instead use B_USER_SETTINGS_DIRECTORY",
      "revId": "b327be0f315595283fcf44454e39be5deb82c708",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2764dcd8_26c114e2",
        "filename": "docs/user/storage/FindDirectory.dox",
        "patchSetId": 1
      },
      "lineNbr": 745,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-07-15T09:39:40Z",
      "side": 1,
      "message": "here it should be B_SETTINGS_DIRECTORY instead of B_SYSTEM_SETTINGS_DIRECTORY. The way FindPaths work makes it decide on USER vs SYSTEM depending on where the package is installed, which explains the different set of constants.",
      "revId": "b327be0f315595283fcf44454e39be5deb82c708",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb5be457_b8270a13",
        "filename": "docs/user/storage/FindDirectory.dox",
        "patchSetId": 1
      },
      "lineNbr": 745,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2023-07-15T10:03:15Z",
      "side": 1,
      "message": "I was a bit unsure here indeed, but B_SETTINGS_DIRECTORY does not exist in this document and does not appear in the Haiku source tree, finddir and findpaths consequently don\u0027t know about it either.\nMaybe this is an oversight?\n\n~/proj/haiku\u003e finddir B_SETTINGS_DIRECTORY\nfinddir: unrecognized directory_which constant \u0027B_SETTINGS_DIRECTORY\u0027\n~/proj/haiku\u003e findpaths B_SETTINGS_DIRECTORY\nError: Unsupported directory constant \"B_SETTINGS_DIRECTORY\".",
      "parentUuid": "2764dcd8_26c114e2",
      "revId": "b327be0f315595283fcf44454e39be5deb82c708",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "50065078_66bebadc",
        "filename": "docs/user/storage/FindDirectory.dox",
        "patchSetId": 1
      },
      "lineNbr": 745,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-07-15T10:41:17Z",
      "side": 1,
      "message": "I thought I had deleted this comment before submitting, it is wrong, please ignore it. Sorry for the confusion. You have already correctly documented the constant for find_path.",
      "parentUuid": "bb5be457_b8270a13",
      "revId": "b327be0f315595283fcf44454e39be5deb82c708",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}