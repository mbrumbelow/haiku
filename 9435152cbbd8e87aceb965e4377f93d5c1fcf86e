{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "daf3ab19_16234013",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-10-24T17:30:38Z",
      "side": 1,
      "message": "Sorry I\u0027m late to reviewing this, but a question: Are you certain interpretation of these should be based on host endianness? Typically in DWARF, if left unspecified, the encoding is going to match the target architecture, which isn\u0027t guaranteed to match the host doing the debugging, so one would need to use the accessors on Architecture to determine which way to interpret it rather than ifdef\u0027ing based on the build-time arch of the Debugger itself. Looking at the DWARF spec for the x* forms is a bit vague right now, so it might need some looking at with objdump.",
      "revId": "9435152cbbd8e87aceb965e4377f93d5c1fcf86e",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4c38870f_9064290e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000341
      },
      "writtenOn": "2023-10-25T07:06:57Z",
      "side": 1,
      "message": "Looking at the implementations in BFD and LLVM\n\nLLVM seems to use isLittleEndianHost:\n\nhttps://github.com/llvm/llvm-project/blob/main/llvm/lib/Support/DataExtractor.cpp#L105\n\nhttps://github.com/llvm/llvm-project/blob/main/llvm/include/llvm/Support/DataExtractor.h#L27\n\n\nBFD: not sure, depends on what bfd_little_endian means which is not very clear to me\n\nhttps://github.com/bminor/binutils-gdb/blob/master/bfd/dwarf2.c#L809",
      "parentUuid": "daf3ab19_16234013",
      "revId": "9435152cbbd8e87aceb965e4377f93d5c1fcf86e",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e2c4a7d_e948d778",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-10-25T12:25:09Z",
      "side": 1,
      "message": "From a quick look, the LLVM variant seems to be for local debugging, in which case they will match (I\u0027m not finding an obvious place in the above tree for remote debug support, assuming there is any).\n\nThe BFD side of things traces to looking at:\nhttps://github.com/bminor/binutils-gdb/blob/cda750802aef3beea582f0f3cad824be491abb4d/bfd/bfd-in2.h#L7545\n\nWhich appears to be based on the endianness of the target ELF file, which is based on the target CPU of the binary. This seems like the safer way to go since we do have WIP remote support, in which case one can\u0027t assume a match between host and target (remote debugging something like PPC on x86 for example).",
      "parentUuid": "4c38870f_9064290e",
      "revId": "9435152cbbd8e87aceb965e4377f93d5c1fcf86e",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "71bae97d_10821b6c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000341
      },
      "writtenOn": "2023-10-26T11:08:30Z",
      "side": 1,
      "message": "Fair enough, that\u0027s a valid scenario. I guess we should update the DataReader class, to include endianness, and also update the Read\u003cType\u003e method as currently it seems to work under the implicit assumption that host and target has the same endianness.",
      "parentUuid": "2e2c4a7d_e948d778",
      "revId": "9435152cbbd8e87aceb965e4377f93d5c1fcf86e",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3047c306_a9eedf64",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-10-26T12:42:20Z",
      "side": 1,
      "message": "Sounds good ; that can be dealt with together with remote debug support though, which I believe there\u0027s an open ticket for from when I had started on it, so a note there should suffice. (This obviously doesn\u0027t apply to e.g. LEB128 though).",
      "parentUuid": "71bae97d_10821b6c",
      "revId": "9435152cbbd8e87aceb965e4377f93d5c1fcf86e",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}