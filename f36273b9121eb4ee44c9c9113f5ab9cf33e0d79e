{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0398af1c_88f8575d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 10,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2022-01-30T18:45:30Z",
      "side": 1,
      "message": "seems to be with implementation defined, so with gcc on x86.",
      "revId": "f36273b9121eb4ee44c9c9113f5ab9cf33e0d79e",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4f2e9cb2_3e23a83f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 10,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-01-31T14:14:06Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "0398af1c_88f8575d",
      "revId": "f36273b9121eb4ee44c9c9113f5ab9cf33e0d79e",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e902a044_0f17318c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-01-23T14:06:17Z",
      "side": 1,
      "message": "Does anyone know why it is doing sign extension? Seems to me it shouldn\u0027t if pointers are unsigned?",
      "revId": "f36273b9121eb4ee44c9c9113f5ab9cf33e0d79e",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bacba1ee_1618f29f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000341
      },
      "writtenOn": "2022-01-23T14:15:15Z",
      "side": 1,
      "message": "this one seems to give us an answer (but not a rationale on why it is done like this):\nhttps://gcc.gnu.org/onlinedocs/gcc/Arrays-and-pointers-implementation.html\n\nA cast from pointer to integer discards most-significant bits if the pointer representation is larger than the integer type, sign-extends5 if the pointer representation is smaller than the integer type, otherwise the bits are unchanged.\n\n\nit gets even better in the footnotes:\n\n\nFootnotes\n(5)\n\nFuture versions of GCC may zero-extend, or use a target-defined ptr_extend pattern. Do not rely on sign extension.",
      "parentUuid": "e902a044_0f17318c",
      "revId": "f36273b9121eb4ee44c9c9113f5ab9cf33e0d79e",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "16f4a6d5_f5828b09",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-01-23T19:15:09Z",
      "side": 1,
      "message": "There isn\u0027t really a rationale for this, but if you really want one, you can consider that \"positive\" pointers are in userspace, and \"negative\" pointers are in kernel space.\n\nAlso on 64-bit systems, usually the pointer does not use the full 64bit (physical addresses have only 40 to 48 usable bits, depending on the architecture and CPU generation). In this case, it is usually required that the extra bits match the last significant one, which is a kind of sign extension in some way. Basically this allows to put things at \"start\" or \"end\" of the physical address space, and have them remain there even if the number of significant bits in a physical pointer is changed.",
      "parentUuid": "bacba1ee_1618f29f",
      "revId": "f36273b9121eb4ee44c9c9113f5ab9cf33e0d79e",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e3e0dbe6_55ad1dac",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-01-23T19:34:12Z",
      "side": 1,
      "message": "Working as intended then ðŸ˜Š",
      "parentUuid": "16f4a6d5_f5828b09",
      "revId": "f36273b9121eb4ee44c9c9113f5ab9cf33e0d79e",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}