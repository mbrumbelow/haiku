{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "5382202b_a5d372fb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000214
      },
      "writtenOn": "2022-01-02T00:08:08Z",
      "side": 1,
      "message": "I\u0027ve created a device_info structure so in a single ioctl user gets device bus type (usb, i2c,...) unused right now, a vendor id and product id. While writing this I realize that would be useful to add device type (keyboard, mice, ...).\n",
      "revId": "7a5ea584f98d812dfa91ec5579a052c97f9c6dc8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "803a20c6_f79ac800",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-01-02T09:29:35Z",
      "side": 1,
      "message": "Isn\u0027t that known already from the device path in /dev? In that case it seems not very helpful to have an ioctl giving the same info?",
      "parentUuid": "5382202b_a5d372fb",
      "revId": "7a5ea584f98d812dfa91ec5579a052c97f9c6dc8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7f082d01_e014473e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000214
      },
      "writtenOn": "2022-01-02T20:54:13Z",
      "side": 1,
      "message": "I was inspired from code and comments on MouseDevice::_BuildShortName from input server mouse device add-on.\n\nThat method builds a human friendly device description using only /dev path, ie: Extended PS/2 Mouse 1. It is commented there that would be better asking device for name or special characteristics, like is_touchpad.\n\nI also prefer querying device instead of building the name using a device path heuristic. But it is only my point of view, of course.\n\nWhat about getting vid/pid in a single structure/ioctl? is that ok? Shall I submit another patch with only those two values on ioctl?",
      "parentUuid": "803a20c6_f79ac800",
      "revId": "7a5ea584f98d812dfa91ec5579a052c97f9c6dc8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a11243f8_600d4af4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-01-02T21:46:25Z",
      "side": 1,
      "message": "\u003e What about getting vid/pid in a single structure/ioctl? \n\nI don\u0027t know. I think in this case, smaller patches will not help review. I find it hard to see where this is going, and probably a larger patch (or multiple patches) including usage of the ioctls by userspace tools would help more. Then we can more easily think about how to design the ioctls around what we need, and see that all parts fit well together.\n\nWhereas here, we can discuss a thousand ways we could implement these ioctls, with no actual example of their usage by userspace, it is very hard to agree on something. The real question is \"what does userspace need to know about a device, exactly?\" and we can answer that only by doing the userspace side?",
      "parentUuid": "7f082d01_e014473e",
      "revId": "7a5ea584f98d812dfa91ec5579a052c97f9c6dc8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4524f15a_4e2e6740",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000214
      },
      "writtenOn": "2022-01-02T23:34:01Z",
      "side": 1,
      "message": "I find VID/PID exposed on user space quite interesting. Some use cases (some of them we discussed a couple of days):\n\n- Display better device names, instead of \"Mouse 1\" something like \"Logitech Mouse 1\"\n- Detect joystick model\n- Detect keyboard layout based on model\n- Store input preferences using a less generic name\n- Cli input device tools (listinput?) \n\nIf you want, I can try to provide one of those use cases. I have left ioctl as HID_GET_DEVICE_INFO so perhaps we can left only vid/pid and grow it with extra fields we find interesting.",
      "parentUuid": "a11243f8_600d4af4",
      "revId": "7a5ea584f98d812dfa91ec5579a052c97f9c6dc8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9f3dea44_624523cd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-01-03T00:35:26Z",
      "side": 1,
      "message": "Yes, we already discussed that, but the devil is in the details.\n\nFor example, usb vendor/product ids are a different namespace than bluetooth vendor/product ids and i2c vendor/product ids. So if the ioctl only returns a vid/pid pair, userspace will have to guess which namespace to search in.\n\nAnd we discussed about ps/2 where there is no notion of vid/pid at all.\n\nSo I don\u0027t think this ioctl as suggested here is satisfying. I can imagine various ways to handle it:\n\n- Add an info about the bus type (an enum with usb, bluetooth, i2c) so we know which namespace to use. I have linked to the SDL gamepad database, it would need something like this and can\u0027t do much from the vid/pid if it doesn\u0027t know the bus used (bluetooth or usb)\n- For ps2, make the ioctl unsupported, or come up with our own internal vid/pid to make it behave similarly to other devices?\n- vid/pid may not be enough to uniquely identify a device, for example look at the shared \"VOTI USB IDs\" for many devices using the V-USB usb stack, or the similar scheme used for the LUFA usb stack. In these case, many device manufacturers agree to share a single id, and USB string descriptors are needed to uniquely identify a device\n- If the goal is just to have a nice user-readable name, wouldn\u0027t it be better to improve the value from B_GET_DEVICE_NAME? This would let each driver have control on the name. Ps/2 can generate it. USB could read it from the device if a name is included in usb string descriptors, or could generate it from the vid/pid database. Bluetooth would get the device name that\u0027s always present in bluetooth devices and used to identify a device when pairing. And so on.\n\nThere are many points to balance here:\n- Have something generic that works for all/most bus types (including specific/obsolete ones like ps2, and future ones like bluetooth),\n- Have something useful and easy to parse for applications (SDL really wants the vid/pid, not just a name),\n- Do not put huge amounts of code in the kernel (some of the work can be done in input_server and/or BJoystick instead)\n\nI think all of these things really need an implementation of the whole thing to be sure we get it right: the ioctl, the input_server and Pjoystick changes, the input preferences, maybe patches to SDL as well. So I think this patch will be reworked as we find issues while working on the next steps. But it\u0027s better to start work on the next step than spend a lot of time talking about them.",
      "parentUuid": "4524f15a_4e2e6740",
      "revId": "7a5ea584f98d812dfa91ec5579a052c97f9c6dc8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}