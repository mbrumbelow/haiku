{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "5382202b_a5d372fb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000214
      },
      "writtenOn": "2022-01-02T00:08:08Z",
      "side": 1,
      "message": "I\u0027ve created a device_info structure so in a single ioctl user gets device bus type (usb, i2c,...) unused right now, a vendor id and product id. While writing this I realize that would be useful to add device type (keyboard, mice, ...).\n",
      "revId": "7a5ea584f98d812dfa91ec5579a052c97f9c6dc8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "803a20c6_f79ac800",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-01-02T09:29:35Z",
      "side": 1,
      "message": "Isn\u0027t that known already from the device path in /dev? In that case it seems not very helpful to have an ioctl giving the same info?",
      "parentUuid": "5382202b_a5d372fb",
      "revId": "7a5ea584f98d812dfa91ec5579a052c97f9c6dc8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7f082d01_e014473e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000214
      },
      "writtenOn": "2022-01-02T20:54:13Z",
      "side": 1,
      "message": "I was inspired from code and comments on MouseDevice::_BuildShortName from input server mouse device add-on.\n\nThat method builds a human friendly device description using only /dev path, ie: Extended PS/2 Mouse 1. It is commented there that would be better asking device for name or special characteristics, like is_touchpad.\n\nI also prefer querying device instead of building the name using a device path heuristic. But it is only my point of view, of course.\n\nWhat about getting vid/pid in a single structure/ioctl? is that ok? Shall I submit another patch with only those two values on ioctl?",
      "parentUuid": "803a20c6_f79ac800",
      "revId": "7a5ea584f98d812dfa91ec5579a052c97f9c6dc8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a11243f8_600d4af4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-01-02T21:46:25Z",
      "side": 1,
      "message": "\u003e What about getting vid/pid in a single structure/ioctl? \n\nI don\u0027t know. I think in this case, smaller patches will not help review. I find it hard to see where this is going, and probably a larger patch (or multiple patches) including usage of the ioctls by userspace tools would help more. Then we can more easily think about how to design the ioctls around what we need, and see that all parts fit well together.\n\nWhereas here, we can discuss a thousand ways we could implement these ioctls, with no actual example of their usage by userspace, it is very hard to agree on something. The real question is \"what does userspace need to know about a device, exactly?\" and we can answer that only by doing the userspace side?",
      "parentUuid": "7f082d01_e014473e",
      "revId": "7a5ea584f98d812dfa91ec5579a052c97f9c6dc8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4524f15a_4e2e6740",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000214
      },
      "writtenOn": "2022-01-02T23:34:01Z",
      "side": 1,
      "message": "I find VID/PID exposed on user space quite interesting. Some use cases (some of them we discussed a couple of days):\n\n- Display better device names, instead of \"Mouse 1\" something like \"Logitech Mouse 1\"\n- Detect joystick model\n- Detect keyboard layout based on model\n- Store input preferences using a less generic name\n- Cli input device tools (listinput?) \n\nIf you want, I can try to provide one of those use cases. I have left ioctl as HID_GET_DEVICE_INFO so perhaps we can left only vid/pid and grow it with extra fields we find interesting.",
      "parentUuid": "a11243f8_600d4af4",
      "revId": "7a5ea584f98d812dfa91ec5579a052c97f9c6dc8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9f3dea44_624523cd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-01-03T00:35:26Z",
      "side": 1,
      "message": "Yes, we already discussed that, but the devil is in the details.\n\nFor example, usb vendor/product ids are a different namespace than bluetooth vendor/product ids and i2c vendor/product ids. So if the ioctl only returns a vid/pid pair, userspace will have to guess which namespace to search in.\n\nAnd we discussed about ps/2 where there is no notion of vid/pid at all.\n\nSo I don\u0027t think this ioctl as suggested here is satisfying. I can imagine various ways to handle it:\n\n- Add an info about the bus type (an enum with usb, bluetooth, i2c) so we know which namespace to use. I have linked to the SDL gamepad database, it would need something like this and can\u0027t do much from the vid/pid if it doesn\u0027t know the bus used (bluetooth or usb)\n- For ps2, make the ioctl unsupported, or come up with our own internal vid/pid to make it behave similarly to other devices?\n- vid/pid may not be enough to uniquely identify a device, for example look at the shared \"VOTI USB IDs\" for many devices using the V-USB usb stack, or the similar scheme used for the LUFA usb stack. In these case, many device manufacturers agree to share a single id, and USB string descriptors are needed to uniquely identify a device\n- If the goal is just to have a nice user-readable name, wouldn\u0027t it be better to improve the value from B_GET_DEVICE_NAME? This would let each driver have control on the name. Ps/2 can generate it. USB could read it from the device if a name is included in usb string descriptors, or could generate it from the vid/pid database. Bluetooth would get the device name that\u0027s always present in bluetooth devices and used to identify a device when pairing. And so on.\n\nThere are many points to balance here:\n- Have something generic that works for all/most bus types (including specific/obsolete ones like ps2, and future ones like bluetooth),\n- Have something useful and easy to parse for applications (SDL really wants the vid/pid, not just a name),\n- Do not put huge amounts of code in the kernel (some of the work can be done in input_server and/or BJoystick instead)\n\nI think all of these things really need an implementation of the whole thing to be sure we get it right: the ioctl, the input_server and Pjoystick changes, the input preferences, maybe patches to SDL as well. So I think this patch will be reworked as we find issues while working on the next steps. But it\u0027s better to start work on the next step than spend a lot of time talking about them.",
      "parentUuid": "4524f15a_4e2e6740",
      "revId": "7a5ea584f98d812dfa91ec5579a052c97f9c6dc8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9371103a_a8e2f5d7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000214
      },
      "writtenOn": "2022-01-03T10:08:44Z",
      "side": 1,
      "message": "\u003e For example, usb vendor/product ids are a different namespace than bluetooth\n\u003e vendor/product ids and i2c vendor/product ids. So if the ioctl only returns a\n\u003e vid/pid pair, userspace will have to guess which namespace to search in.\n\n\u003e And we discussed about ps/2 where there is no notion of vid/pid at all.\n\nI am aware that PS/2 have not reliable identifier, but even USB haven\u0027t. As you said, there are all sort of vid/pid messes out there. The point here is to provide user space with a tool to make a guess of what device is connected, but always assuming this guess can return nothing or even worse, mislead. On the other hand, it is not common to have multiple ps/2 devices, not even in the good ps/2 times.\n\n\u003e Add an info about the bus type (an enum with usb, bluetooth, i2c) so we know \n\u003e which namespace to use\n\nI\u0027ve left room for the bus type on the structure on uint8 type. I also think would be handy a device_type (mice/keyb/tablet...). As you point, bus and device types can be extracted from /dev path. I am uncomfortable parsing strings to get info. This is of course very personal, perhaps biased by my Linux background.\n\nHowever, I find /dev/input/mouse/usb/0 acceptable, it is quite solid for the programmer and enough descriptive for the user, things like /dev/input/mouse/ps2/ibm_trackpoint_0 is going too far, imho.\n\n\n\u003e USB string descriptors are needed to uniquely identify a device\n\nI don\u0027t know about Win/Osx, but Linux desktops do not go so far, just trust the guessed name and apply its settings. I like the idea of having unique device identification, but wasn\u0027t my point (in fact, it is out of my skills right now).\n\n\u003e If the goal is just to have a nice user-readable name, wouldn\u0027t it be better to improve the value from B_GET_DEVICE_NAME\n\nI have been thinking a lot about this and I am not sure. It would improve actual status by having better device names and simplify input server device code. Perhaps, It would be harder to translate on input preferences...\n\n\u003e Have something useful and easy to parse for applications (SDL really wants the vid/pid, not just a name),\n\nI have no idea! \n\n\u003e Do not put huge amounts of code in the kernel \n\nThe patch is very small and factorized on ProtocolHandler right now. Those extra fields we may add on ioctl struct like bus type is almost for free. I do not expect to grow more.\n\n\u003e I think all of these things really need an implementation of the whole thing to be sure we get it right: the ioctl, the input_server and Pjoystick changes, the input preferences, maybe patches to SDL as well.\n\nI can try patch one of them in order to have a better picture.",
      "parentUuid": "9f3dea44_624523cd",
      "revId": "7a5ea584f98d812dfa91ec5579a052c97f9c6dc8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0487030c_bb1adbbd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000214
      },
      "writtenOn": "2022-01-05T00:17:58Z",
      "side": 1,
      "message": "After a pair of days thinking and analyzing user space side I see you are right. Let\u0027s see.\n\n- I think we all agree that we need better device names. \"USB Mouse 1\" sucks, we want to see \"Logitech G71\". Or perhaps, some mix, \"USB Mouse: Logitech G71\".\n- Retrieve bus/vid/pid from a device have some handy use cases, like default device settings (keymaps, gamepads layouts...)\n\n\nThe second point is clear to me, whoever need to probe a device, just ioctl it. Just what this patch already does, without adding more complexity in any place.\n\nThe human friendly name is what now I don\u0027t have clear. The patch I submitted the other day generates a basic name on kernel side: \"USB Tablet\", \"I2C Keyboard\". I though that the input server device was the place to generate a friendly name, using vid/pid ioctl and a usb.id database. But there is a Mouse, Keyboard, Tablet and Wacom Add-on, joysticks are handled at device kit. So we would have duplicated code and that name wouldn\u0027t be available for those who read directly from device. I don\u0027t have a use case for them... cli tools? logging?\n\nOne solution is trying to build friendly names on kernel side and retrieve them with B_GET_DEVICE_NAME. ( Linux does it :D )\n\nI am not comfortable with this idea, but I can\u0027t argue why. Perhaps I am making a drama and it is straightforward.\n\nSo, what about this?:\n\n- Have a vid/pid ioctl (+bus_type?)\n- Make B_GET_DEVICE_NAME return friendly names (Logitech G71, Saitek gamepad)\n",
      "revId": "7a5ea584f98d812dfa91ec5579a052c97f9c6dc8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "138789c8_29fd82b4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-01-05T07:50:48Z",
      "side": 1,
      "message": "Possible problems with doing it in the kernel:\n- Adds more logic in kernel side\n- Possibly needs a second copy of the usb.ids database? Currently we have that only in userspace (for listusb and the Devices app)\n- It will not be possible to use the locale kit to translate the names\n\nThe bus-type/vid/pid ioctl seems fine, knowing that it will be optional (PS/2 will likely not implement it).\n\nFor input devices, indeed I don\u0027t expect people to use the devices directly (the interface is not really documented anyway). So it seems fine to do things in input_server and BJoystick. The code can be shared between the two as a private API initally and later made public?\n\nSo really it depends on the naming:\n- If the naming is something like \"Logitech G71\" (generated solely from vid/pid or USB string descriptors), this can be done in the kernel. Each driver knows best how to identify and name devices.\n- If we don\u0027t want to put the VID/PID database handling in kernel, we can have B_GET_DEVICE_NAME return a name for devices that have string descriptors, and return B_NOT_SUPPORTED for other devices. Then userspace can generate a name from the VID/PID\n- However, if the naming is something like \"Logitech G71 USB Mouse\", then we need localization, in French it should be \"Souris USB Logitech G71\". I think that part should be done in userspace\n\nSo that would give an architecture where B_GET_DEVICE_NAME returns just the device name from string descriptors or something generated by the driver (for example for PS/2 devices). Or it may return nothing if the name can be generated in userspace from VID/PID. And userspace takes this name, and adds extra info about the device type if needed. It may not be needed, for example in Input preferences there is an icon next to each device that already identifies if it\u0027s a mouse or keyboard. So if you see \"(mouse icon) Logitech G71\", this seems good enough.\n\n\nIs this too complicated just to avoid moving the VID/PID database handling inside the kernel? Maybe.",
      "parentUuid": "0487030c_bb1adbbd",
      "revId": "7a5ea584f98d812dfa91ec5579a052c97f9c6dc8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}