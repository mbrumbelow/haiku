{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b1d33339_22bbd818",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-01-09T18:25:18Z",
      "side": 1,
      "message": "ok.  I moved the assumed reg-shift 2 back to the source (dtb within efi).  It spreads the logic out less and everything is working from a central source of truth.\n\n```\ndiff --git a/src/system/boot/platform/efi/dtb.cpp b/src/system/boot/platform/efi/dtb.cpp\nindex 231a838559..07e7730a5a 100644\n--- a/src/system/boot/platform/efi/dtb.cpp\n+++ b/src/system/boot/platform/efi/dtb.cpp\n@@ -449,7 +449,14 @@ dtb_get_reg(const void* fdt, int node, size_t idx, addr_range\u0026 range, int8* regS\n                // Grab any register shifts if requested\n                prop \u003d (const uint8*)fdt_getprop(fdt, node, \"reg-shift\", \u0026propSize);\n                if (prop \u003d\u003d NULL)\n+                       #if defined(__ARM__) || defined(__aarch64__)\n+                       // arm and arm64 before dts\u0027s were used outside of these architectures historically\n+                       // assumed reg-shift 2 which means dts\u0027s from these architectures omit it and assume\n+                       // you\u0027re shifting.\n+                       *regShift \u003d 2;\n+                       #else\n                        *regShift \u003d 0;\n+                       #endif\n                else\n                        *regShift \u003d fdt32_to_cpu(*(uint32*)prop);\n        }\ndiff --git a/src/system/kernel/arch/arm/arch_debug_console.cpp b/src/system/kernel/arch/arm/arch_debug_console.cpp\nindex 66c6ab44f6..0988009b0e 100644\n--- a/src/system/kernel/arch/arm/arch_debug_console.cpp\n+++ b/src/system/kernel/arch/arm/arch_debug_console.cpp\n@@ -105,21 +105,18 @@ arch_debug_serial_early_boot_message(const char *string)\n status_t\n arch_debug_console_init(kernel_args *args)\n {\n-       // ARM has a minimum 32-bit alignment which isn\u0027t always specified in dtbs\n-       uint8 regShift \u003d args-\u003earch_args.uart.regShift ? args-\u003earch_args.uart.regShift : 2;\n-\n        if (strncmp(args-\u003earch_args.uart.kind, UART_KIND_PL011,\n                sizeof(args-\u003earch_args.uart.kind)) \u003d\u003d 0) {\n-               sArchDebugUART \u003d arch_get_uart_pl011(args-\u003earch_args.uart.regs.start, regShift,\n-                       args-\u003earch_args.uart.clock);\n+               sArchDebugUART \u003d arch_get_uart_pl011(args-\u003earch_args.uart.regs.start,\n+                       args-\u003earch_args.uart.regShift, args-\u003earch_args.uart.clock);\n        } else if (strncmp(args-\u003earch_args.uart.kind, UART_KIND_8250_OMAP,\n                sizeof(args-\u003earch_args.uart.kind)) \u003d\u003d 0) {\n-               sArchDebugUART \u003d arch_get_uart_8250_omap(args-\u003earch_args.uart.regs.start, regShift,\n-                       args-\u003earch_args.uart.clock);\n+               sArchDebugUART \u003d arch_get_uart_8250_omap(args-\u003earch_args.uart.regs.start,\n+                       args-\u003earch_args.uart.regShift, args-\u003earch_args.uart.clock);\n        } else if (strncmp(args-\u003earch_args.uart.kind, UART_KIND_8250,\n                sizeof(args-\u003earch_args.uart.kind)) \u003d\u003d 0) {\n-               sArchDebugUART \u003d arch_get_uart_8250(args-\u003earch_args.uart.regs.start, regShift,\n-                       args-\u003earch_args.uart.clock);\n+               sArchDebugUART \u003d arch_get_uart_8250(args-\u003earch_args.uart.regs.start,\n+                       args-\u003earch_args.uart.regShift, args-\u003earch_args.uart.clock);\n        }\n \n        // As a last try, lets assume qemu\u0027s pl011 at a sane address\ndiff --git a/src/system/kernel/arch/arm64/arch_debug_console.cpp b/src/system/kernel/arch/arm64/arch_debug_console.cpp\nindex 14fa96162b..6bfb9b6513 100644\n--- a/src/system/kernel/arch/arm64/arch_debug_console.cpp\n+++ b/src/system/kernel/arch/arm64/arch_debug_console.cpp\n@@ -98,25 +98,22 @@ arch_debug_serial_early_boot_message(const char *string)\n status_t\n arch_debug_console_init(kernel_args *args)\n {\n-       // ARM has a minimum 32-bit alignment which isn\u0027t specified in dtbs\n-       uint8 regShift \u003d args-\u003earch_args.uart.regShift ? args-\u003earch_args.uart.regShift : 2;\n-\n        if (strncmp(args-\u003earch_args.uart.kind, UART_KIND_PL011,\n                sizeof(args-\u003earch_args.uart.kind)) \u003d\u003d 0) {\n-               sArchDebugUART \u003d arch_get_uart_pl011(args-\u003earch_args.uart.regs.start, regShift,\n-                       args-\u003earch_args.uart.clock);\n+               sArchDebugUART \u003d arch_get_uart_pl011(args-\u003earch_args.uart.regs.start,\n+                       args-\u003earch_args.uart.regShift, args-\u003earch_args.uart.clock);\n        } else if (strncmp(args-\u003earch_args.uart.kind, UART_KIND_LINFLEX,\n                sizeof(args-\u003earch_args.uart.kind)) \u003d\u003d 0) {\n-               sArchDebugUART \u003d arch_get_uart_linflex(args-\u003earch_args.uart.regs.start, regShift,\n-                       args-\u003earch_args.uart.clock);\n+               sArchDebugUART \u003d arch_get_uart_linflex(args-\u003earch_args.uart.regs.start,\n+                       args-\u003earch_args.uart.regShift, args-\u003earch_args.uart.clock);\n        }/* else if (strncmp(args-\u003earch_args.uart.kind, UART_KIND_8250_OMAP,\n                sizeof(args-\u003earch_args.uart.kind)) \u003d\u003d 0) {\n                sArchDebugUART \u003d arch_get_uart_8250_omap(args-\u003earch_args.uart.regs.start,\n-                       args-\u003earch_args.uart.clock);\n+                       args-\u003earch_args.uart.regShift, args-\u003earch_args.uart.clock);\n        }*/ else if (strncmp(args-\u003earch_args.uart.kind, UART_KIND_8250,\n                sizeof(args-\u003earch_args.uart.kind)) \u003d\u003d 0) {\n-               sArchDebugUART \u003d arch_get_uart_8250(args-\u003earch_args.uart.regs.start, regShift,\n-                       args-\u003earch_args.uart.clock);\n+               sArchDebugUART \u003d arch_get_uart_8250(args-\u003earch_args.uart.regs.start,\n+                       args-\u003earch_args.uart.regShift, args-\u003earch_args.uart.clock);\n        }\n \n        // Oh well.\n```",
      "revId": "68e5b15f9c28f14fb72bc31c4a123208271b372f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}