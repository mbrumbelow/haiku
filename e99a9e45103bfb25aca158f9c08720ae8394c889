{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "584c573c_94ddad14",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-07-16T15:37:25Z",
      "side": 1,
      "message": "What are the implications in terms of ABI compatibility? Could there be any 3rd party app using this structure?",
      "revId": "e99a9e45103bfb25aca158f9c08720ae8394c889",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5fa1d7e7_7246c4aa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-07-16T16:01:25Z",
      "side": 1,
      "message": "This is why I uploaded this small change. I don\u0027t know, however I assume headers/private should be ok? Perhaps we make a branch with reorganized  system structs and check?\nSome are in public headers OS.h, KernelExport.h but I assume those are hard to fix?\n\nSide note on how to try out pahole:\nIn UserbuildConfig:\n  SetConfigVar DEBUG : HAIKU_TOP src system : 1 : global ;\n\njam\ncd \u003c?\u003e/objects/haiku/x86_64/debug_1/system/kernel\npahole -aA -H1 -I -l thread.o\n#H1 to show only those that have \u003e\u003d1 hole.\n# Comments like /*     8     8 */ are offset and length.\n# and /* XXX ... */ are suggested improvements.",
      "parentUuid": "584c573c_94ddad14",
      "revId": "e99a9e45103bfb25aca158f9c08720ae8394c889",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e93d3a8_73e579c0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-07-16T16:07:28Z",
      "side": 1,
      "message": "Sample output:\n...\n/* \u003c680\u003e ../headers/os/drivers/KernelExport.h:85 */\nstruct timer {\n\tclass timer *              next;                 /*     0     8 */\n\tint64                      schedule_time;        /*     8     8 */\n\tvoid *                     user_data;            /*    16     8 */\n\tuint16                     flags;                /*    24     2 */\n\tuint16                     cpu;                  /*    26     2 */\n\n\t/* XXX 4 bytes hole, try to pack */\n\n\ttimer_hook                 hook;                 /*    32     8 */\n\tbigtime_t                  period;               /*    40     8 */\n\n\t/* size: 48, cachelines: 1, members: 7 */\n\t/* sum members: 44, holes: 1, sum holes: 4 */\n\t/* last cacheline: 48 bytes */\n\t/* first biggest size base type member: next 0 8 */\n};\n...",
      "parentUuid": "5fa1d7e7_7246c4aa",
      "revId": "e99a9e45103bfb25aca158f9c08720ae8394c889",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "339dcc88_370fecd3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-07-16T16:21:06Z",
      "side": 1,
      "message": "\u003e Some are in public headers OS.h, KernelExport.h but I assume those are hard to fix?\n\nYes, it will create ABI problems if apps access the fields directly. But some things can still be changed, for example it should be possible to reorder private fields in C++ classes, as long as the size of the object is the same in the end and public fields are not moved (maybe re-adding padding at the end). But it\u0027s going to be difficult to get right, especially if we want to keep things the same size on both 32 and 64bit systems.\n\nEven headers/private is kind of a grey area because currently it is packaged in haiku_devel pretty much without any filtering. But, well, it says \"private\" in the name, that is enough of a warning, and if apps break, well, it\u0027s their fault really. One thing I usually do in this case is search the struct name in github to see if I find anything else than Haiku using it. If there is absolutely nothing, it\u0027s reasonably safe to change. If I find something I can discuss the issue with the people who wrote that code and see what can be done about it (it can be as simple as they need to recompile their app).\n\nMaybe it\u0027s best to start with internal struct that are only used in src/. I suspect that some of these will be used in \"hot\" codepaths where they are used a lot, and there will be a lot to gain. While the ones in headers/private are more at the interface between things, and would be used less often. There would still be small gains, but the effort in checking that we don\u0027t break anything can be higher than it\u0027s worth.",
      "parentUuid": "9e93d3a8_73e579c0",
      "revId": "e99a9e45103bfb25aca158f9c08720ae8394c889",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4cff8141_a40ff3f0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-07-16T18:25:28Z",
      "side": 1,
      "message": "I wanted to explore this long ago as the scheduler looked like it might have more  padding than needed.\nThis is just a starting example. pahole generates quite a long list even for one object file.\n\nTo me this change looks safe, but is it?",
      "parentUuid": "339dcc88_370fecd3",
      "revId": "e99a9e45103bfb25aca158f9c08720ae8394c889",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c913abbd_5e08aa21",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2022-07-18T16:06:29Z",
      "side": 1,
      "message": "This structure is fully private so we can change it as we want, but it is used in syscalls, so changing this will break syscall ABI. I think that\u0027s fine?\n\nWhy put \"name\" last, though? Why not just move \"priority\" and leave \"name\" alone? That should also remove all padding, right?",
      "revId": "e99a9e45103bfb25aca158f9c08720ae8394c889",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19542772_a31a4b04",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-07-19T13:00:48Z",
      "side": 1,
      "message": "It was split in two cache lines, not sure if that is true anymore. As this was my first experimental change I just moved name to second cache line.",
      "parentUuid": "c913abbd_5e08aa21",
      "revId": "e99a9e45103bfb25aca158f9c08720ae8394c889",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00288da7_3f2968f4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2022-07-19T16:05:31Z",
      "side": 1,
      "message": "Might as well keep \"name\" in the first cache line because it is probably going to be accessed before anything else, no?",
      "parentUuid": "19542772_a31a4b04",
      "revId": "e99a9e45103bfb25aca158f9c08720ae8394c889",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}