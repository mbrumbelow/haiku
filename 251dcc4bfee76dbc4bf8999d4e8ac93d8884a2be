{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3dccddc5_5dba5550",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-01-06T02:18:12Z",
      "side": 1,
      "message": "Ok.  One more minor change to fix the vtable build error on x86_gcc2:\n\n```\ndiff --git a/src/system/boot/arch/x86/Jamfile b/src/system/boot/arch/x86/Jamfile\nindex 21102787a8..5e783064d6 100644\n--- a/src/system/boot/arch/x86/Jamfile\n+++ b/src/system/boot/arch/x86/Jamfile\n@@ -1,5 +1,7 @@\n SubDir HAIKU_TOP src system boot arch x86 ;\n \n+SubDirC++Flags -fno-rtti ;\n+\n local defines \u003d $(DEFINES) ;\n \n local platform ;\n```",
      "revId": "251dcc4bfee76dbc4bf8999d4e8ac93d8884a2be",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "246dcc2e_a65c4a1b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-01-06T02:46:00Z",
      "side": 1,
      "message": "We should probably just build the whole bootloader with -fno-rtti, unless I\u0027m missing something? But that can be done in a later commit.",
      "revId": "251dcc4bfee76dbc4bf8999d4e8ac93d8884a2be",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "faec3593_83b75bfc",
        "filename": "src/system/boot/platform/efi/serial.cpp",
        "patchSetId": 14
      },
      "lineNbr": 47,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-01-06T09:34:28Z",
      "side": 1,
      "message": "is there no risk of the output ending up printed over the splash screen? I think that\u0027s why this was under a #ifdef before, but I don\u0027t know if it actually happens",
      "revId": "251dcc4bfee76dbc4bf8999d4e8ac93d8884a2be",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19f9c24a_91b04674",
        "filename": "src/system/boot/platform/efi/serial.cpp",
        "patchSetId": 14
      },
      "lineNbr": 47,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-01-06T13:45:15Z",
      "side": 1,
      "message": "The logic now is a lot clearer to estimate what would happen.\n\n1) We use serial_io if it\u0027s available\n2) If serial_io is unavailable, we use EFI stdio.\n3) If EFI is unavailable, we try the UART\u0027s\n\nWe could still wrap the EFI stdio logic with a #ifdef DEBUG to prevent putting text on screen unless we\u0027re debugging.  Then if serial_io is unavailable, we would try to manually operate the gUART.\n\nOn devices without serial_io though, the logs appear before and after the menu.. there isn\u0027t a lot of log activity while in the menus however from what i\u0027ve seen. \n\nMy thought is, lets leave stdio active for now in nightlies.  If people on older / weirder devices begin to complain about text on stdout, we can wrap this in an ifdef DEBUG.  This commit is not a candidate for r1/beta4",
      "parentUuid": "faec3593_83b75bfc",
      "revId": "251dcc4bfee76dbc4bf8999d4e8ac93d8884a2be",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cdc8b996_039a07aa",
        "filename": "src/system/boot/platform/efi/serial.cpp",
        "patchSetId": 14
      },
      "lineNbr": 47,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-01-06T14:46:45Z",
      "side": 1,
      "message": "crap. I just booted on my Framework laptop via EFI.    There\u0027s no serial port on the laptop, so EFI output goes to the console ðŸ˜„\n\nok... i guess we do need to wrap it still.",
      "parentUuid": "19f9c24a_91b04674",
      "revId": "251dcc4bfee76dbc4bf8999d4e8ac93d8884a2be",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fd5a37bc_eb82dd90",
        "filename": "src/system/boot/platform/efi/serial.cpp",
        "patchSetId": 14
      },
      "lineNbr": 47,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-01-06T15:21:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cdc8b996_039a07aa",
      "revId": "251dcc4bfee76dbc4bf8999d4e8ac93d8884a2be",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "994e8147_5671a6a3",
        "filename": "src/system/kernel/arch/generic/debug_uart.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-01-06T09:34:28Z",
      "side": 1,
      "message": "every function in this file is architecture specific; so we should probably move it out of \"generic\" and have it specific for each architecture instead?",
      "revId": "251dcc4bfee76dbc4bf8999d4e8ac93d8884a2be",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19fe712d_48085b33",
        "filename": "src/system/kernel/arch/generic/debug_uart.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-01-06T13:45:15Z",
      "side": 1,
      "message": "The arm ifdef\u0027s will go away once I get the reg-shift logic in place.\n\nIs x86 the only architecture with an assembly requirement to access io spaces?  I haven\u0027t seen it anywhere else.",
      "parentUuid": "994e8147_5671a6a3",
      "revId": "251dcc4bfee76dbc4bf8999d4e8ac93d8884a2be",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37a2d7d1_c8f3a107",
        "filename": "src/system/kernel/arch/generic/debug_uart.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-01-06T16:59:26Z",
      "side": 1,
      "message": "Yes. So maybe x86 should have its own debug_uart.cpp instead of using the shared one?",
      "parentUuid": "19fe712d_48085b33",
      "revId": "251dcc4bfee76dbc4bf8999d4e8ac93d8884a2be",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8b48d9bc_12f1f2da",
        "filename": "src/system/kernel/arch/generic/debug_uart.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-01-06T18:03:04Z",
      "side": 1,
      "message": "True.   Let me get the reg-shift stuff in next (it\u0027ll require reworking the DebugUART stuff.  Then i\u0027ll look into this.",
      "parentUuid": "37a2d7d1_c8f3a107",
      "revId": "251dcc4bfee76dbc4bf8999d4e8ac93d8884a2be",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}