{
  "comments": [
    {
      "key": {
        "uuid": "73e5f812_d7829d1c",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 15
      },
      "lineNbr": 99,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2021-03-14T14:16:49Z",
      "side": 1,
      "message": "see the comments below to understand why using plain \"new\" is a bad idea. You have 3 different memory leaks because you tried to manage memory manually and it is hard to do that correctly and handle all cases (and it only gets worse when someone changes the code and has to re-verify all cases).\n\nYou should use a BAutoDeleter or another similar mechanism that can make sure this memory is correctly released when the function exits.",
      "revId": "0806cde542802d9e5266f165c5c3449d6801f296",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "664553cb_792ec773",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 15
      },
      "lineNbr": 99,
      "author": {
        "id": 1000287
      },
      "writtenOn": "2021-03-23T13:33:01Z",
      "side": 1,
      "message": "At first, I did my work on the latest version which has near 1000 lines and found it made things mess.\u003e_\u003c. Maybe I should do on this change and adapt other related changes later, right? \n\nTwo main goals of my work in this patch: fix problem of memory leak and call constructor in Haiku\u0027s way. I\u0027ve looked into code in other File Systems of Haiku and made some changes. And I think the definition of variables and functions are not concise enough, so it makes easy to write long line code. Should I do something to make it better if possible?\n\nBesides, I think the function UnWrapExtents() should not be inline.",
      "parentUuid": "73e5f812_d7829d1c",
      "revId": "0806cde542802d9e5266f165c5c3449d6801f296",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "463a264f_375f0548",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 15
      },
      "lineNbr": 129,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2021-03-14T14:16:49Z",
      "side": 1,
      "message": "missing space after !\u003d",
      "revId": "0806cde542802d9e5266f165c5c3449d6801f296",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3294af00_26cc887e",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 15
      },
      "lineNbr": 129,
      "author": {
        "id": 1000287
      },
      "writtenOn": "2021-03-23T13:33:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "463a264f_375f0548",
      "revId": "0806cde542802d9e5266f165c5c3449d6801f296",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15c10142_2e8ec89f",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 15
      },
      "lineNbr": 135,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2021-03-14T14:16:49Z",
      "side": 1,
      "message": "here extentsWrapped is leaked",
      "revId": "0806cde542802d9e5266f165c5c3449d6801f296",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c18f746_4dc1548f",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 15
      },
      "lineNbr": 149,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2021-03-14T14:16:49Z",
      "side": 1,
      "message": "here extentsWrapped is leaked",
      "revId": "0806cde542802d9e5266f165c5c3449d6801f296",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8bd1a508_282dca7f",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 15
      },
      "lineNbr": 191,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2021-03-14T14:16:49Z",
      "side": 1,
      "message": "this memory is never released?\n\nAlso this does not need to be a class member since it is used only in this method. Make it a local variable, and use a BAutoDeleter to make sure it is not leaked.",
      "revId": "0806cde542802d9e5266f165c5c3449d6801f296",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd2dfa0a_27600218",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 15
      },
      "lineNbr": 204,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2021-03-14T14:16:49Z",
      "side": 1,
      "message": "it was allocated with new[] so it should be released with delete[]\n\nAlso, the fact that it\u0027s allocated in one function and freed in another makes this code a bit difficult to follow. It would be better to move the delete in the caller function.",
      "revId": "0806cde542802d9e5266f165c5c3449d6801f296",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    }
  ]
}