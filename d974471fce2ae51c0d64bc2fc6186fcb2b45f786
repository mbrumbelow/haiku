{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "64448fcb_400fb833",
        "filename": "src/add-ons/kernel/drivers/graphics/intel_extreme/intel_extreme.cpp",
        "patchSetId": 2
      },
      "lineNbr": 115,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-04-02T19:25:45Z",
      "side": 1,
      "message": "this function changed semantics, before we read the register and then changed a single bit and wrote it back. Now we\u0027re clearing all bits except the one we want to enable. So this could disable other interrputs, unless the register is designed to work this way?",
      "revId": "d974471fce2ae51c0d64bc2fc6186fcb2b45f786",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9b95c8f_4afcb8bd",
        "filename": "src/add-ons/kernel/drivers/graphics/intel_extreme/intel_extreme.cpp",
        "patchSetId": 2
      },
      "lineNbr": 115,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2022-04-03T07:36:28Z",
      "side": 1,
      "message": "Only the bit 31 is writable, and reserved bits don\u0027t need to be preserved. As the register is read after the disable write to avoid a posted write, we get the actual stand. This is what \"minimize register reads/writes\" meant in the commit message.\n\nhttps://01.org/sites/default/files/documentation/intel-gfx-prm-osrc-skl-vol02c-commandreference-registers-part2.pdf  page 10",
      "parentUuid": "64448fcb_400fb833",
      "revId": "d974471fce2ae51c0d64bc2fc6186fcb2b45f786",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}