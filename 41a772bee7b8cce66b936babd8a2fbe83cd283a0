{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4baf6a3e_d4f79edc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2022-08-11T14:25:09Z",
      "side": 1,
      "message": "only for the x86_64 kernel, not the x86_64 bootloaders, right?",
      "revId": "41a772bee7b8cce66b936babd8a2fbe83cd283a0",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d38a7ec1_d0abdfcb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-12-12T16:01:00Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4baf6a3e_d4f79edc",
      "revId": "41a772bee7b8cce66b936babd8a2fbe83cd283a0",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1df76ded_30ddeda9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-01-19T15:15:29Z",
      "side": 1,
      "message": "https://review.haiku-os.org/c/buildtools/+/4368 is a much extended version of this one.\n\nAsking around, the feeling that adding frame-pointers *EVERYWHERE* might have substantial performance impacts.\n\nGCC sets no-omit-frame-pointer on -O0.   Our kernel / bootloader should never be -O0 unless someone is building DEBUG.\n\nSince backtraces in kernels + bootloaders are always useful... only enable for these components.",
      "revId": "41a772bee7b8cce66b936babd8a2fbe83cd283a0",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7476974e_a7b879c2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2022-01-19T15:35:18Z",
      "side": 1,
      "message": "Current riscv problem is crash in early userland so this change will not help. It should be at least applied to haikuports.cross.",
      "revId": "41a772bee7b8cce66b936babd8a2fbe83cd283a0",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e1ebdb2c_2178b8b4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-01-19T17:10:12Z",
      "side": 1,
      "message": "actually, upstream haiku in qemu is crashing in early kernel load from the bootloader.\n\nThis one actually fixes that early crash (booted 4 times without seeing it).  As for why I have no idea lol.\n\nYou are correct though, this doesn\u0027t solve the issue in user space. We likely need some kind of custom exception unwinder?",
      "parentUuid": "7476974e_a7b879c2",
      "revId": "41a772bee7b8cce66b936babd8a2fbe83cd283a0",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "af57e4b5_3e39993f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2022-01-20T14:30:23Z",
      "side": 1,
      "message": "I couldn\u0027t find good sources on the performance impact (admittedly, I didn\u0027t search long), but at least on x86, the extra register could definitely come in handy. Therefore, I think that should only be done in debug builds, not in release builds. Or we could adopt it now, and switch to dropping the frame pointer later on all architectures. Having a variety of test cases on different architectures would make this change more welcome, anyway :-)",
      "revId": "41a772bee7b8cce66b936babd8a2fbe83cd283a0",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "757fe0ce_9d3c6a7f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-01-20T14:49:08Z",
      "side": 1,
      "message": "I think on x86 it is still possible to have stacktraces even without a frame pointer (they may be missing some functions but generally it can still be done). And there are not a lot of registers, so the frame pointer is disabled by default, I think.\n\nOn ARM it is a lot more complicated due to the calling convention making it difficult to find function call boundaries in the stack.\n\nOn SPARC it is not possible to do anything without a frame pointer because the frame pointer and stack pointer are handled in hardware (with the SAVE/RESTORE instructions and the shifting register window). So it is enabled by default.\n\nI don\u0027t know about other architectures.",
      "parentUuid": "af57e4b5_3e39993f",
      "revId": "41a772bee7b8cce66b936babd8a2fbe83cd283a0",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37450c96_fc1974eb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-01-20T16:44:06Z",
      "side": 1,
      "message": "\u003e Therefore, I think that should only be done in debug builds, not in release builds. Or we could adopt it now, and switch to dropping the frame pointer later on all architectures. \n\nSo, the way it works today is debug builds already include no-omit-frame-pointers.  -O0 gets set on DEBUG builds which adds no-omit-frame-pointers.\n\nThe reasoning for this change is stack traces for the kernel and bootloader are painfully un-useful for end users and developers.  x86_64 already forces no-omit-frame-pointers all of the time to improve this.\n\ntldr; the minimal performance impacts make adding this across all architectures seemingly useful.  It improves the ability of non-developers to provide helpful backtraces from bootloaders + kernel issues on non-x86_64 platforms without becoming developers.\n\nx512 was pushing for this change globally in our gcc spec... I felt like that was overkill given the ominous warnings about performance issues.  As it would be a lot easier for end users to compile user applications as DEBUG vs the kernel + bootloader this felt like a good compromise.\n\nAlso, as PulkoMandy said.. the beneficial nature of this is limited on some architectures.",
      "parentUuid": "757fe0ce_9d3c6a7f",
      "revId": "41a772bee7b8cce66b936babd8a2fbe83cd283a0",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4aa59a5f_193d715b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000341
      },
      "writtenOn": "2022-08-11T12:23:49Z",
      "side": 1,
      "message": "+1 because it also helps with the arm port",
      "revId": "41a772bee7b8cce66b936babd8a2fbe83cd283a0",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b909c2bd_28540f9b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-08-11T19:03:47Z",
      "side": 1,
      "message": "It sounds like we should do it on most arches but not x86? Do we care about x86?\nI mostly care about x86_64 and it seems we already have taken the performance impact there, so I give it my vote.",
      "parentUuid": "37450c96_fc1974eb",
      "revId": "41a772bee7b8cce66b936babd8a2fbe83cd283a0",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5747a93c_a067cb96",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-12-12T16:01:00Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b909c2bd_28540f9b",
      "revId": "41a772bee7b8cce66b936babd8a2fbe83cd283a0",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}