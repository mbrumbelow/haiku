{
  "comments": [
    {
      "key": {
        "uuid": "5414e176_12fd0ec6",
        "filename": "src/add-ons/kernel/network/protocols/tcp/EndpointManager.cpp",
        "patchSetId": 4
      },
      "lineNbr": 297,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2020-01-29T11:53:56Z",
      "side": 1,
      "message": "If I understand correctly, we rely here on the fact that RemoveUnchecked:\n- Is safe to call for an object that is not in the hashmap\n- Does not need the object hash to be the same as what was used to insert it (because we already changed the addresses at this point, and that\u0027s what is used as the hashcode?).\n\nDo your added unit tests cover both cases? They seem pretty important expectations about the API here, and ones that are at risk of being broken by a change of implementation.",
      "revId": "8c47ec304fbe450f066ae711a509d9fe0bbf4c90",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf3c8b0d_d20cc2ef",
        "filename": "src/add-ons/kernel/network/protocols/tcp/EndpointManager.cpp",
        "patchSetId": 4
      },
      "lineNbr": 297,
      "author": {
        "id": 1000162
      },
      "writtenOn": "2020-01-30T00:34:57Z",
      "side": 1,
      "message": "Oh yeah that\u0027s a good point. The test cases that just got merged don\u0027t actually cover that case. I\u0027ll add some additional test cases for InsertUnchecked, RemoveUnchecked, and removing an object that isn\u0027t already present in the table.\n\nThanks man.",
      "parentUuid": "5414e176_12fd0ec6",
      "revId": "8c47ec304fbe450f066ae711a509d9fe0bbf4c90",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    }
  ]
}