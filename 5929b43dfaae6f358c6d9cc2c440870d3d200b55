{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4b86f8ff_f3a8030a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2022-04-28T21:23:06Z",
      "side": 1,
      "message": "How does this work on x86 et al.?",
      "revId": "5929b43dfaae6f358c6d9cc2c440870d3d200b55",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6b81f68d_447749b6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-04-28T21:55:16Z",
      "side": 1,
      "message": "On x86 we rely on the BIOS to hopefully set up everything (that\u0027s ticket #3). We also implement a few bits of ACPI in the PCI driver to get some info from one of the ACPI tables.\n\nOn RISC-V the PCI init was done by custom code in arch specific parts which reimplements a part of the PCI code.",
      "parentUuid": "4b86f8ff_f3a8030a",
      "revId": "5929b43dfaae6f358c6d9cc2c440870d3d200b55",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6b0ef1af_d43edcb5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2022-04-28T22:15:22Z",
      "side": 1,
      "message": "x86 code parses static MCFG table directly (without using acpica), and that\u0027s enough information because PCI memory and IO is assumed to identity mapped to CPU memory and IO spaces respectively. That\u0027s not true for other platforms (memory might be, but IO is certainly not) thus we need to get information from _CRS method. Because ACPI module is normally initialized after PCI, this kludge is needed.\n\nAllocating bridge bus numbers and allocating BARs is another topic. This code assumes that they are already properly configured by platform firmware. (that\u0027s probably reasonable assumption for ACPI systems, on FDT it\u0027s probably more mixed bag). It seems code for allocating bridge numbers already exists in PCI::EnumerateBus (enabled for PowerPC and M68K) and independently in RISCV64 arch code. RISCV64 arch code also does BAR allocation but in simplified fashion (doesn\u0027t seem to properly handle bridges with potentially narrower address range).",
      "parentUuid": "6b81f68d_447749b6",
      "revId": "5929b43dfaae6f358c6d9cc2c440870d3d200b55",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "47855bce_5494282b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-04-29T07:43:55Z",
      "side": 1,
      "message": "\u003e This code assumes that they are already properly configured by platform firmware. (that\u0027s probably reasonable assumption for ACPI systems, on FDT it\u0027s probably more mixed bag).\n\nIt\u0027s not the case on my current PC, some devices do not get an address allocated by the firmware.\n\nIt will also certainly not be the case for thunderbolt, expresscard, etc where this can happen much later (when the device is connected).\n\nDoing the allocation requires info from the _CRS method as well (just so we can know what address space the PCI bus is mapped to). Even if it is identity mapped, it only has a certain range of memory, and we must assign to each device an address that fits in that range.",
      "parentUuid": "6b0ef1af_d43edcb5",
      "revId": "5929b43dfaae6f358c6d9cc2c440870d3d200b55",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a879a003_f336ebde",
        "filename": "src/add-ons/kernel/bus_managers/pci/pci.cpp",
        "patchSetId": 1
      },
      "lineNbr": 527,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2022-04-28T21:23:06Z",
      "side": 1,
      "message": "Perhaps B_DEV_NOT_READY is a better error code?",
      "revId": "5929b43dfaae6f358c6d9cc2c440870d3d200b55",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "576e383f_61b1d9f5",
        "filename": "src/add-ons/kernel/bus_managers/pci/pci.cpp",
        "patchSetId": 1
      },
      "lineNbr": 527,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-05-29T14:25:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a879a003_f336ebde",
      "revId": "5929b43dfaae6f358c6d9cc2c440870d3d200b55",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8eb3a89_0dfc3989",
        "filename": "src/add-ons/kernel/bus_managers/pci/pci.h",
        "patchSetId": 1
      },
      "lineNbr": 199,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2022-04-29T06:32:25Z",
      "side": 1,
      "message": "should be a tab",
      "revId": "5929b43dfaae6f358c6d9cc2c440870d3d200b55",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a42451d5_a2511005",
        "filename": "src/add-ons/kernel/bus_managers/pci/pci.h",
        "patchSetId": 1
      },
      "lineNbr": 199,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-05-29T14:25:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b8eb3a89_0dfc3989",
      "revId": "5929b43dfaae6f358c6d9cc2c440870d3d200b55",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ebc5c493_9df8da72",
        "filename": "src/add-ons/kernel/bus_managers/pci/pci_root.cpp",
        "patchSetId": 1
      },
      "lineNbr": 133,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2022-04-29T06:32:25Z",
      "side": 1,
      "message": "return pci_init_deferred();",
      "revId": "5929b43dfaae6f358c6d9cc2c440870d3d200b55",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3fdec440_9614ea79",
        "filename": "src/add-ons/kernel/bus_managers/pci/pci_root.cpp",
        "patchSetId": 1
      },
      "lineNbr": 133,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-05-29T14:25:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ebc5c493_9df8da72",
      "revId": "5929b43dfaae6f358c6d9cc2c440870d3d200b55",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}