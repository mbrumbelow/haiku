{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9bd52682_690d6206",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2024-10-12T19:06:47Z",
      "side": 1,
      "message": "why not have this code in the block at \"Try starting a new range\" ?",
      "revId": "25cd8293b9137021a0cd999efa10f2bacf8f52b1",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c38e326c_d6b1d110",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2024-10-12T19:28:23Z",
      "side": 1,
      "message": "Because otherwise the existing ranges below 4GB will be used up before the ones above 4GB are allocated, which is what we don\u0027t want.",
      "parentUuid": "9bd52682_690d6206",
      "revId": "25cd8293b9137021a0cd999efa10f2bacf8f52b1",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e860555_0aafd48f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2024-10-12T21:28:41Z",
      "side": 1,
      "message": "Right, but the loop \"Try starting a new range\" won\u0027t find any range before the last allocated page, so every 32-bit range are de facto ignored?",
      "parentUuid": "c38e326c_d6b1d110",
      "revId": "25cd8293b9137021a0cd999efa10f2bacf8f52b1",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d9c0fef8_24a5116e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2024-10-13T02:35:12Z",
      "side": 1,
      "message": "No, they won\u0027t be ignored. When we run out of memory above 4GB, the \"expand upwards\" loop will just try the previous ranges and expand them, and then the \"expand downwards\" loop will expand the range starting at 4GB downwards if there\u0027s memory there. So we won\u0027t ignore them if they\u0027re needed.\n\nThe only case that this misses is when there is a range of memory below 4GB which did not already exist at least partially in the allocated_ranges (and ends before the 4GB boundary). But we would have missed that case before this week, too, and it didn\u0027t seem to be a problem; I doubt it\u0027s a very common one. We can add some more logic to the range-insertion case if necessary later on.",
      "parentUuid": "9e860555_0aafd48f",
      "revId": "25cd8293b9137021a0cd999efa10f2bacf8f52b1",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1c299175_a77751f4",
        "filename": "src/system/kernel/vm/vm.cpp",
        "patchSetId": 2
      },
      "lineNbr": 4346,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-10-12T17:15:12Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tconst addr_range\u0026 lastMemoryRange\n\t\t\u003d args-\u003ephysical_memory_range[args-\u003enum_physical_memory_ranges - 1];\n```",
      "range": {
        "startLine": 4345,
        "startChar": 0,
        "endLine": 4346,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "25cd8293b9137021a0cd999efa10f2bacf8f52b1",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1045c847_363bf986",
        "filename": "src/system/kernel/vm/vm.cpp",
        "patchSetId": 2
      },
      "lineNbr": 4349,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-10-12T17:15:12Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\t\u0026\u0026 args-\u003enum_physical_allocated_ranges \u003c MAX_PHYSICAL_ALLOCATED_RANGE) {\n```",
      "range": {
        "startLine": 4349,
        "startChar": 0,
        "endLine": 4349,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "25cd8293b9137021a0cd999efa10f2bacf8f52b1",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c4e89015_97b2f5cf",
        "filename": "src/system/kernel/vm/vm.cpp",
        "patchSetId": 2
      },
      "lineNbr": 4353,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-10-12T17:15:12Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\tconst addr_range\u0026 lastAllocatedRange\n\t\t\t\u003d args-\u003ephysical_allocated_range[args-\u003enum_physical_allocated_ranges - 1];\n```",
      "range": {
        "startLine": 4352,
        "startChar": 0,
        "endLine": 4353,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "25cd8293b9137021a0cd999efa10f2bacf8f52b1",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ce1ece0a_e3b8e85c",
        "filename": "src/system/kernel/vm/vm.cpp",
        "patchSetId": 2
      },
      "lineNbr": 4362,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-10-12T17:15:12Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\t\t\taddr_range\u0026 allocatedRange\n\t\t\t\t\t\u003d args-\u003ephysical_allocated_range[args-\u003enum_physical_allocated_ranges];\n```",
      "range": {
        "startLine": 4361,
        "startChar": 0,
        "endLine": 4362,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "25cd8293b9137021a0cd999efa10f2bacf8f52b1",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "28fcd31f_c8033029",
        "filename": "src/system/kernel/vm/vm.cpp",
        "patchSetId": 2
      },
      "lineNbr": 4365,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-10-12T17:15:12Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\t\t\tallocatedRange.start\n\t\t\t\t\t\u003d (memoryRange.start \u003e max32bitAddr) ? memoryRange.start : max32bitAddr;\n```",
      "range": {
        "startLine": 4364,
        "startChar": 0,
        "endLine": 4365,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "25cd8293b9137021a0cd999efa10f2bacf8f52b1",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}