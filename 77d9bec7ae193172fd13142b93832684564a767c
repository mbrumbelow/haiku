{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b2a6fbfb_b2f46341",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000670
      },
      "writtenOn": "2024-09-03T18:09:54Z",
      "side": 1,
      "message": "The new updated version greatly reduces flickering by redrawing only when either B_DOCUMENT_TEXT_COLOR or B_LINK_TEXT_COLOR changed.\n\nAnother interesting find: Removing the -\u003eDelete() call makes it redraw without flickering and without resetting the scroll position, which is great. Unfortunately it appends the whole text again at the bottom in the style of the green Haiku title text. If that could be avoided, it would be the preferred solution I guess.",
      "revId": "77d9bec7ae193172fd13142b93832684564a767c",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a7ae2b25_5cb203f4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2024-09-06T09:41:51Z",
      "side": 1,
      "message": "Seems good so far. One more comprehensive solution would be remembering indeces of text runs and updating the colors afterwards... but that is probably a premature optimization.",
      "revId": "77d9bec7ae193172fd13142b93832684564a767c",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "850d44e0_81d7ae26",
        "filename": "src/apps/aboutsystem/AboutSystem.cpp",
        "patchSetId": 2
      },
      "lineNbr": 459,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-09-03T18:08:19Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (insert after):\n```c++\n\n\n```",
      "range": {
        "startLine": 459,
        "startChar": 0,
        "endLine": 459,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "77d9bec7ae193172fd13142b93832684564a767c",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "592f924b_79118109",
        "filename": "src/apps/aboutsystem/AboutSystem.cpp",
        "patchSetId": 2
      },
      "lineNbr": 466,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2024-09-06T09:41:51Z",
      "side": 1,
      "message": "Isn\u0027t the logo (on the left) ontop of a panel?",
      "revId": "77d9bec7ae193172fd13142b93832684564a767c",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3df3c745_25363e98",
        "filename": "src/apps/aboutsystem/AboutSystem.cpp",
        "patchSetId": 2
      },
      "lineNbr": 466,
      "author": {
        "id": 1000670
      },
      "writtenOn": "2024-09-06T13:40:29Z",
      "side": 1,
      "message": "The logo background is B_DOCUMENT_BACKGROUND_COLOR and that\u0027s also what\u0027s used to initially pick the right color for it,see line 437.",
      "parentUuid": "592f924b_79118109",
      "revId": "77d9bec7ae193172fd13142b93832684564a767c",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eda2d801_5f31ac6f",
        "filename": "src/apps/aboutsystem/AboutSystem.cpp",
        "patchSetId": 2
      },
      "lineNbr": 466,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2024-09-08T00:23:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3df3c745_25363e98",
      "revId": "77d9bec7ae193172fd13142b93832684564a767c",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "932d6921_e27bfba7",
        "filename": "src/apps/aboutsystem/AboutSystem.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1408,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2024-09-06T09:41:51Z",
      "side": 1,
      "message": "To me this is a bit confusing to follow from the control flow, and would be more happy if those 3 lines would be in the previous if conditionals. \n(Also, why does the _FillCreditsView function not ensure it is empty?)\n\nBut maybe this is fine. Gonna see what other devs say.",
      "revId": "77d9bec7ae193172fd13142b93832684564a767c",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe3022e5_01e56984",
        "filename": "src/apps/aboutsystem/AboutSystem.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1408,
      "author": {
        "id": 1000670
      },
      "writtenOn": "2024-09-06T13:40:29Z",
      "side": 1,
      "message": "I assume multiple colors can change at the same time? Then, if both B_DOCUMENT_TEXT_COLOR and B_LINK_TEXT_COLOR are changed and the 3 lines are in both of the other conditions, the view is redrawn twice, doubling the flickering and the resource usage. In the current solution, the view is only redrawn once, no matter if B_DOCUMENT_TEXT_COLOR or B_LINK_TEXT_COLOR or both of them are changed.",
      "parentUuid": "932d6921_e27bfba7",
      "revId": "77d9bec7ae193172fd13142b93832684564a767c",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f81f757_a1fd26b4",
        "filename": "src/apps/aboutsystem/AboutSystem.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1408,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2024-09-08T00:23:58Z",
      "side": 1,
      "message": "This flickers? That would be quite annoying.\n\nI think in general you are correct that the message could have multiple colors. \nwhen changing colors in preference/Appearence IIRC it will only stuff one color in each message. I am not sure if the broadcast for the new auto mode changed this to have all in one message or if it sends N messages for all colors. The ideal case would likely be only the changed colors in one message.",
      "parentUuid": "fe3022e5_01e56984",
      "revId": "77d9bec7ae193172fd13142b93832684564a767c",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b838bfdb_f7469810",
        "filename": "src/apps/aboutsystem/AboutSystem.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1408,
      "author": {
        "id": 1000670
      },
      "writtenOn": "2024-09-08T07:48:13Z",
      "side": 1,
      "message": "Yes, it unfortunately flickers when the color changes. The text first disappears, then appears again after a few milliseconds, and the scroll position is reset to top. Have you read my comments at the top? I think this pull request probably needs more work before it should be merged, but I don\u0027t have ideas to get that problem solved after trying different approaches for hours.",
      "parentUuid": "6f81f757_a1fd26b4",
      "revId": "77d9bec7ae193172fd13142b93832684564a767c",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c46f27f_c2de6404",
        "filename": "src/apps/aboutsystem/AboutSystem.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1408,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2025-02-09T23:21:26Z",
      "side": 1,
      "message": "\u003e  but I don\u0027t have ideas to get that problem solved after trying different approaches for hours.\n\nI\u0027ve had an idea for this for longer but haden\u0027t written it down yet. Sorry.\n\nOkay so, what I think the \"correct\" approach here is basically this:\nKeep a list of text offsets, and the semantic color you use to draw it with.\n\nFor example\n0, green\n5, text\n200, link\n220, orange\n\nIf the text color changes you can then iterate over all text slices and update them (except link colors)\n\nif the link color changes you can iterate over all slices and update the link color ones.\n\nIn essence, in the construcing view, each time SetFontAndColor for the next slice is called mark the index where you are now and with which semantic color you are starting to draw now.\n\nLater you can then update these with:\nBTextView::SetFontAndColor(int32 startOffset, int32 endOffset, const BFont* font, uint32 mode, const rgb_color* color);\n\nwhere startOffSet is the index you saved, endOffset is the index of the next item, font is the be_plain_font, mode is B_FONT_ALL (iirc) and color is your saved semantic color mapped to the new color you calculated based on the one you received in MessageReceived.\n\nAnyhow, if this solution is too complex you don\u0027t need to implement it. I probably will at some point if you do not want to, but I have written this down so you know how I would do it.",
      "parentUuid": "b838bfdb_f7469810",
      "revId": "77d9bec7ae193172fd13142b93832684564a767c",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82c010b8_2bc3cebc",
        "filename": "src/apps/aboutsystem/AboutSystem.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1408,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2025-02-09T23:45:04Z",
      "side": 1,
      "message": "Actually, the HyperTextView here is already doing sometthing similar to figure out when links are hovered and when not (saving the offsets I mean, to set the font underline flag or remove it)",
      "parentUuid": "6c46f27f_c2de6404",
      "revId": "77d9bec7ae193172fd13142b93832684564a767c",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e6146a6d_9abcee4b",
        "filename": "src/apps/aboutsystem/AboutSystem.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1633,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-09-03T18:08:19Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (insert after):\n```c++\n\n```",
      "range": {
        "startLine": 1633,
        "startChar": 0,
        "endLine": 1633,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "77d9bec7ae193172fd13142b93832684564a767c",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}