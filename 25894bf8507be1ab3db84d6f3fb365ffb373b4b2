{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "61405875_2a986514",
        "filename": "src/add-ons/screen_savers/glife/GLifeConfig.cpp",
        "patchSetId": 2
      },
      "lineNbr": 126,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-04-30T12:34:13Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n/*\n * Copyright 2012, Haiku, Inc.\n * Distributed under the terms of the MIT License.\n *\n * Authors:\n * \t\tAaron Hill \u003cserac@hillvisions.com\u003e\n *\t\tAlexander von Gluck \u003ckallisti5@unixzen.com\u003e\n */\n\n\n#include \"GLifeConfig.h\"\n\n#include \u003cCatalog.h\u003e\n#include \u003cGroupLayoutBuilder.h\u003e\n#include \u003cSlider.h\u003e\n#include \u003cstdio.h\u003e\n#include \u003cString.h\u003e\n#include \u003cStringView.h\u003e\n#include \u003cView.h\u003e\n\n#include \"GLifeState.h\"\n\n#undef B_TRANSLATION_CONTEXT\n#define B_TRANSLATION_CONTEXT \"GLife ScreenSaver\"\n\n\n// ------------------------------------------------------\n//  GLifeConfig Class Constructor Definition\nGLifeConfig::GLifeConfig(BRect frame, GLifeState* pglsState)\n\t:\n\tBView(frame, \"\", B_FOLLOW_ALL_SIDES, B_WILL_DRAW),\n\tm_pglsState(pglsState)\n{\n\tSetLayout(new BGroupLayout(B_HORIZONTAL));\n\tSetViewUIColor(B_PANEL_BACKGROUND_COLOR);\n\n\t// Info text\n\tBStringView* name \u003d new BStringView(frame, B_EMPTY_STRING,\n\t\tB_TRANSLATE(\"OpenGL \\\"Game of Life\\\"\"), B_FOLLOW_LEFT);\n\tBStringView* author \u003d new BStringView(frame, B_EMPTY_STRING,\n\t\tB_TRANSLATE(\"by Aaron Hill\"), B_FOLLOW_LEFT);\n\n\t// Sliders\n\tfGridDelay \u003d new BSlider(frame, \"GridDelay\",\n\t\tB_TRANSLATE(\"Grid life delay: \"),\n\t\tnew BMessage(kGridDelay),\n\t\t0, 4, B_BLOCK_THUMB);\n\n\tfGridDelay-\u003eSetHashMarks(B_HASH_MARKS_BOTTOM);\n\tfGridDelay-\u003eSetLimitLabels(B_TRANSLATE(\"None\"), B_TRANSLATE_COMMENT(\"4x\",\n\t\t\t\"This is a factor: the x represents \u0027times\u0027\"));\n\tfGridDelay-\u003eSetValue(pglsState-\u003eGridDelay());\n\tfGridDelay-\u003eSetHashMarkCount(5);\n\n\tfGridBorder \u003d new BSlider(frame, \"GridBorder\",\n\t\tB_TRANSLATE(\"Grid border: \"),\n\t\tnew BMessage(kGridBorder),\n\t\t0, 10, B_BLOCK_THUMB);\n\n\tfGridBorder-\u003eSetHashMarks(B_HASH_MARKS_BOTTOM);\n\tfGridBorder-\u003eSetLimitLabels(\"0\", \"10\");\n\tfGridBorder-\u003eSetValue(pglsState-\u003eGridBorder());\n\tfGridBorder-\u003eSetHashMarkCount(11);\n\n\tfGridWidth \u003d new BSlider(frame, \"GridWidth\",\n\t\tB_TRANSLATE(\"Grid width: \"),\n\t\tnew BMessage(kGridWidth),\n\t\t10, 100, B_BLOCK_THUMB);\n\n\tfGridWidth-\u003eSetHashMarks(B_HASH_MARKS_BOTTOM);\n\t//fGridWidth-\u003eSetLimitLabels(\"10\", \"100\");\n\tfGridWidth-\u003eSetValue(pglsState-\u003eGridWidth());\n\tfGridWidth-\u003eSetHashMarkCount(10);\n\n\tfGridHeight \u003d new BSlider(frame, \"GridHeight\",\n\t\tB_TRANSLATE(\"Grid height: \"),\n\t\tnew BMessage(kGridHeight),\n\t\t10, 100, B_BLOCK_THUMB);\n\n\tfGridHeight-\u003eSetHashMarks(B_HASH_MARKS_BOTTOM);\n\t//fGridHeight-\u003eSetLimitLabels(\"10\", \"100\");\n\tfGridHeight-\u003eSetValue(pglsState-\u003eGridHeight());\n\tfGridHeight-\u003eSetHashMarkCount(10);\n\n\tAddChild(BGroupLayoutBuilder(B_VERTICAL, B_USE_DEFAULT_SPACING)\n\t\t.Add(BGroupLayoutBuilder(B_VERTICAL, 0)\n\t\t\t.Add(name)\n\t\t\t.Add(author)\n\t\t)\n\t\t.AddGlue()\n\t\t.Add(fGridDelay)\n\t\t.Add(fGridBorder)\n\t\t.Add(BGroupLayoutBuilder(B_HORIZONTAL, 0)\n\t\t\t.Add(fGridWidth)\n\t\t\t.Add(fGridHeight)\n\t\t)\n\t\t.SetInsets(B_USE_DEFAULT_SPACING, B_USE_DEFAULT_SPACING,\n\t\t\tB_USE_DEFAULT_SPACING, B_USE_DEFAULT_SPACING)\n\t);\n\n\t// Do our first label update\n\t_UpdateLabels();\n}\n\n\n// ------------------------------------------------------\n//  GLifeConfig Class AttachedToWindow Definition\nvoid\nGLifeConfig::AttachedToWindow(void)\n{\n\tfGridWidth-\u003eSetTarget(this);\n\tfGridHeight-\u003eSetTarget(this);\n\tfGridBorder-\u003eSetTarget(this);\n\tfGridDelay-\u003eSetTarget(this);\n\n#ifdef _USE_ASYNCHRONOUS\n\n\tm_uiWindowFlags \u003d Window()-\u003eFlags();\n\tWindow()-\u003eSetFlags(m_uiWindowFlags | B_ASYNCHRONOUS_CONTROLS);\n\n#endif\n}\n\n\nvoid\nGLifeConfig::_UpdateLabels()\n```",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 126,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "25894bf8507be1ab3db84d6f3fb365ffb373b4b2",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "62be5373_df406e37",
        "filename": "src/add-ons/screen_savers/glife/GLifeConfig.cpp",
        "patchSetId": 2
      },
      "lineNbr": 140,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-04-30T12:34:13Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tint32 delay \u003d fGridDelay-\u003eValue();\n\tif (delay \u003c\u003d 0)\n\t\tnewLabel \u003d B_TRANSLATE(\"Grid life delay: none\");\n```",
      "range": {
        "startLine": 138,
        "startChar": 0,
        "endLine": 140,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "25894bf8507be1ab3db84d6f3fb365ffb373b4b2",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4e3a5845_85658683",
        "filename": "src/add-ons/screen_savers/glife/GLifeConfig.cpp",
        "patchSetId": 2
      },
      "lineNbr": 143,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-04-30T12:34:13Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\tnewLabel.SetToFormat(\n\t\t\tB_TRANSLATE_CONTEXT(\"Grid life delay: %ld×\",\n\t\t\t\t\"This is a factor: the × represents \u0027times\u0027, don\u0027t translate \u0027%ld\u0027\"),\n```",
      "range": {
        "startLine": 142,
        "startChar": 0,
        "endLine": 143,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "25894bf8507be1ab3db84d6f3fb365ffb373b4b2",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2d88be90_ced4dd3b",
        "filename": "src/add-ons/screen_savers/glife/GLifeConfig.cpp",
        "patchSetId": 2
      },
      "lineNbr": 173,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-04-30T12:34:13Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t}\n\tfGridDelay-\u003eSetLabel(newLabel);\n}\n\n\n// ------------------------------------------------------\n//  GLifeConfig Class MessageReceived Definition\nvoid\nGLifeConfig::MessageReceived(BMessage* pbmMessage)\n{\n\tswitch(pbmMessage-\u003ewhat) {\n\t\tcase kGridWidth:\n\t\t\tm_pglsState-\u003eGridWidth() \u003d fGridWidth-\u003eValue();\n\t\t\tbreak;\n\t\tcase kGridHeight:\n\t\t\tm_pglsState-\u003eGridHeight() \u003d fGridHeight-\u003eValue();\n\t\t\tbreak;\n\t\tcase kGridBorder:\n\t\t\tm_pglsState-\u003eGridBorder() \u003d fGridBorder-\u003eValue();\n\t\t\tbreak;\n\t\tcase kGridDelay:\n\t\t\tm_pglsState-\u003eGridDelay() \u003d fGridDelay-\u003eValue();\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tBView::MessageReceived(pbmMessage);\n\t\t\treturn;\n\t}\n\t_UpdateLabels();\n}\n```",
      "range": {
        "startLine": 145,
        "startChar": 0,
        "endLine": 173,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "25894bf8507be1ab3db84d6f3fb365ffb373b4b2",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}