{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e3f204e6_ea9fd029",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000341
      },
      "writtenOn": "2022-03-20T20:54:50Z",
      "side": 1,
      "message": "I\u0027m not really sure about this one so please give me some suggestion.\n\nDo we need to handle PT_ARM_UNWIND in runtime_loader or will it be handled in some other place e.g. libunwind?\n",
      "revId": "b0d95feb5edc4fc03ff20fc9277c764e920a550e",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "188795f1_6c7d9229",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2022-03-20T21:06:21Z",
      "side": 1,
      "message": "Unwind is currently implemented in libgcc_s.so.1 and unwind information is registered with `__register_frame_info` in init/initarray handler. When moving to libunwind, registration mechanism can be changed to program reader PT_GNU_EH_FRAME entry preserving compatibility with `__register_frame_info`.\n\nYou can disassemble some application and check if it use `__register_frame_info` call on init. It it does, no other actions are currently needed and PT_ARM_UNWIND can be ignored.\n\nRelated: https://review.haiku-os.org/c/haiku/+/5105\n",
      "revId": "b0d95feb5edc4fc03ff20fc9277c764e920a550e",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cea9b9d5_98400520",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2022-03-21T08:05:13Z",
      "side": 1,
      "message": "Please remove [wip] before submit",
      "revId": "b0d95feb5edc4fc03ff20fc9277c764e920a550e",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "afe4efcb_cdfb021b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-03-21T08:05:26Z",
      "side": 1,
      "message": "At the very least the comments should be updated to say why these things are not needed here and where else they should be handled.\n\nIf they are not useful at all, linker scripts could be modified to drop them (making executables/libraries smaller).\n\nIf they are useful only for debugging, the defineDebugInfoPackage macro in haikuports should be updated to move them from the main executable to the debuginfo package (making executables/libraries smaller but keeping the info somewhere for use with Debugger).\n\nIf they are useful at runtime, but not handled by runtime_loader, the comments should say what is using them. This case would seem a bit strange to me, as it would mean whatever uses this needs to reopen the executable or library from disk and get the info from there, since runtime_loader won\u0027t keep it. This can be a bit unreliable, as between the time a program is launched, and the time the file is opened to get this info, it\u0027s not certain the file will still contain the same executable. There are ways to workaround that but I don\u0027t think we implement anything like that currently?",
      "revId": "b0d95feb5edc4fc03ff20fc9277c764e920a550e",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}