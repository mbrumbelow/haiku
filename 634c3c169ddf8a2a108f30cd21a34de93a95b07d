{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "fab1da37_ea7d6ecc",
        "filename": "headers/os/drivers/PCI.h",
        "patchSetId": 32
      },
      "lineNbr": 4,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-21T05:25:34Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n */\n```",
      "range": {
        "startLine": 4,
        "startChar": 0,
        "endLine": 4,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "634c3c169ddf8a2a108f30cd21a34de93a95b07d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b7968b93_f971d624",
        "filename": "headers/os/drivers/PCI.h",
        "patchSetId": 32
      },
      "lineNbr": 7,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-21T05:25:34Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n#define PCI_H\n```",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "634c3c169ddf8a2a108f30cd21a34de93a95b07d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "56876674_7de8486d",
        "filename": "headers/os/drivers/PCI.h",
        "patchSetId": 32
      },
      "lineNbr": 12,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-21T05:25:34Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n#ifdef __cplusplus\nextern \"C\"\n{\n```",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 12,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "634c3c169ddf8a2a108f30cd21a34de93a95b07d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e2535798_d4d53b74",
        "filename": "headers/os/drivers/PCI.h",
        "patchSetId": 32
      },
      "lineNbr": 51,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-21T05:25:34Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n#define B_PCI_MODULE_NAME \"bus_managers/pci/v1\"\n\n\t//\tPCI device-related information\n\n\ttypedef struct pci_info {\n\n\t\tuint16 vendor_id;\n\t\tuint16 device_id;\n\t\tuint8 bus;\n\t\tuint8 device;\n\t\tuint8 function;\n\t\tuint8 revision;\n\t\tuint8 class_api;\n\t\tuint8 class_sub;\n\t\tuint8 class_base;\n\t\tuint8 line_size;\n\t\tuint8 latency;\n\t\tuint8 header_type;\n\t\tuint8 bist;\n\t\tuint8 reserved;\n\n\t\tunion {\n\t\t\tstruct {\n\t\t\t\tuint32 cardbus_cis;\n\t\t\t\tuint16 subsystem_id;\n\t\t\t\tuint16 subsystem_vendor_id;\n\t\t\t\tuint32 rom_base;\n\t\t\t\tuint32 rom_base_pci;\n\t\t\t\tuint32 rom_size;\n\t\t\t\tuint32 base_registers[6];\n\t\t\t\tuint32 base_registers_pci[6];\n\t\t\t\tuint32 base_register_sizes[6];\n\t\t\t\tuint8 base_register_flags[6];\n\t\t\t\tuint8 interrupt_line;\n\t\t\t\tuint8 interrupt_pin;\n\t\t\t\tuint8 min_grant;\n\t\t\t\tuint8 max_latency;\n\t\t\t};\n\n\n\t\t\tstruct {\n\t\t\t\tuint32 base_registers[2];\n\t\t\t\tuint32 base_registers_pci[2];\n\t\t\t\tuint32 base_register_sizes[2];\n\t\t\t\tuint8 base_register_flags[2];\n\t\t\t\tuint8 primary_bus;\n\t\t\t\tuint8 secondary_bus;\n\t\t\t\tuint8 subordinate_bus;\n\t\t\t\tuint8 secondary_latency;\n\t\t\t\tuint8 io_base;\n\t\t\t\tuint8 io_limit;\n\t\t\t\tuint16 secondary_status;\n\t\t\t\tuint16 memory_base;\n\t\t\t\tuint16 memory_limit;\n\t\t\t\tuint16 prefetchable_memory_base;\n\t\t\t\tuint16 prefetchable_memory_limit;\n\t\t\t\tuint32 prefetchable_memory_base_upper32;\n\t\t\t\tuint32 prefetchable_memory_limit_upper32;\n\t\t\t\tuint16 io_base_upper16;\n\t\t\t\tuint16 io_limit_upper16;\n\t\t\t\tuint32 rom_base;\n\t\t\t\tuint32 rom_base_pci;\n\t\t\t\tuint8 interrupt_line;\n\t\t\t\tuint8 interrupt_pin;\n\t\t\t\tuint16 bridge_control;\n\t\t\t\tuint16 subsystem_id;\n\t\t\t\tuint16 subsystem_vendor_id;\n\t\t\t};\n\n\n\t\t\tstruct {\n\t\t\t\tuint16 subsystem_id;\n\t\t\t\tuint16 subsystem_vendor_id;\n\n#ifdef __HAIKU_PCI_BUS_MANAGER_TESTING\n\n\t\t\t\t//\tfor testing only, not final (do not use!)\n\n\t\t\t\tuint8 primary_bus;\n\t\t\t\tuint8 secondary_bus;\n\t\t\t\tuint8 subordinate_bus;\n\t\t\t\tuint8 secondary_latency;\n\t\t\t\tuint16 reserved;\n\t\t\t\tuint32 memory_base;\n\t\t\t\tuint32 memory_limit;\n\t\t\t\tuint32 memory_base_upper32;\n\t\t\t\tuint32 memory_limit_upper32;\n\t\t\t\tuint32 io_base;\n\t\t\t\tuint32 io_limit;\n\t\t\t\tuint32 io_base_upper32;\n\t\t\t\tuint32 io_limit_upper32;\n\t\t\t\tuint16 secondary_status;\n\t\t\t\tuint16 bridge_control;\n\n#endif /*\t__HAIKU_PCI_BUS_MANAGER_TESTING\t*/\n\t\t\t};\n```",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 51,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "634c3c169ddf8a2a108f30cd21a34de93a95b07d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8a1714a7_8e7785ea",
        "filename": "headers/os/drivers/PCI.h",
        "patchSetId": 32
      },
      "lineNbr": 807,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-21T05:25:34Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\n\t} pci_info;\n\n\ttypedef struct pci_module_info {\n\n\t\tbus_manager_info binfo;\n\n\t\tuint8 (*read_io_8)(int mapped_io_addr);\n\n\t\tvoid (*write_io_8)(int mapped_io_addr, uint8 value);\n\n\t\tuint16 (*read_io_16)(int mapped_io_addr);\n\n\t\tvoid (*write_io_16)(int mapped_io_addr, uint16 value);\n\n\t\tuint32 (*read_io_32)(int mapped_io_addr);\n\n\t\tvoid (*write_io_32)(int mapped_io_addr, uint32 value);\n\n\t\tlong (*get_nth_pci_info)(long index, pci_info* info);\n\n\t\tuint32 (\n\t\t\t*read_pci_config)(uint8 bus, uint8 device, uint8 function, uint16 offset, uint8 size);\n\n\t\tvoid (*write_pci_config)(uint8 bus, uint8 device, uint8 function, uint16offset, uint8 size,\n\t\t\tuint32 value);\n\n\t\tphys_addr_t (*ram_address)(phys_addr_t physical_address_in_system_memory);\n\n\t\tstatus_t (*find_pci_capability)(uint8 bus, uint8 device, uint8 function, uint8 cap_id,\n\t\t\tuint8* offset);\n\n\t\tstatus_t (*reserve_device)(uint8 bus, uint8 device, uint8 function, const char* driver_name,\n\t\t\tvoid* cookie);\n\n\t\tstatus_t (*unreserve_device)(uint8 bus, uint8 device, uint8 function,\n\t\t\tconst char* driver_name, void* cookie);\n\n\t\tstatus_t (*update_interrupt_line)(uint8 bus, uint8 device, uint8 function,\n\t\t\tuint8 newInterruptLineValue);\n\n\t\tstatus_t (*find_pci_extended_capability)(uint8 bus, uint8 device, uint8 function,\n\t\t\tuint16 cap_id, uint16* offset);\n\n\t\tstatus_t (*get_powerstate)(uint8 bus, uint8 device, uint8 function, uint8* state);\n\n\t\tstatus_t (*set_powerstate)(uint8 bus, uint8 device, uint8 function, uint8 newState);\n\n\t\tuint32 (*get_msi_count)(uint8 bus, uint8 device, uint8 function);\n\n\t\tstatus_t (*configure_msi)(uint8 bus, uint8 device, uint8 function, uint32 count,\n\t\t\tuint32* startVector);\n\n\t\tstatus_t (*unconfigure_msi)(uint8 bus, uint8 device, uint8 function);\n\n\t\tstatus_t (*enable_msi)(uint8 bus, uint8 device, uint8 function);\n\n\t\tstatus_t (*disable_msi)(uint8 bus, uint8 device, uint8 function);\n\n\t\tuint32 (*get_msix_count)(uint8 bus, uint8 device, uint8 function);\n\n\t\tstatus_t (*configure_msix)(uint8 bus, uint8 device, uint8 function, uint32 count,\n\t\t\tuint32* startVector);\n\n\t\tstatus_t (*enable_msix)(uint8 bus, uint8 device, uint8 function);\n\n\t} pci_module_info;\n\n\t/*\n\t *\toffsets in PCI configuration space to the elements of the predefined\n\t *\theader common to all header types\n\t */\n\n#define PCI_vendor_id 0x00\n#define PCI_device_id 0x02\n#define PCI_command 0x04\n#define PCI_status 0x06\n#define PCI_revision 0x08\n#define PCI_class_api 0x09\n#define PCI_class_sub 0x0a\n#define PCI_class_base 0x0b\n#define PCI_line_size 0x0c\n#define PCI_latency 0x0d\n#define PCI_header_type 0x0e\n#define PCI_bist 0x0f\n#define PCI_extended_capability 0x100\n\n\t/*\n\t *\toffsets in PCI configuration space to the elements of the predefined\n\t *\theader common to header types 0x00 and 0x01\n\t */\n\n#define PCI_base_registers 0x10\n#define PCI_interrupt_line 0x3c\n#define PCI_interrupt_pin 0x3d\n\n\t//\toffsets in PCI configuration space to the elements of header type 0x00\n\n#define PCI_cardbus_cis 0x28\n#define PCI_subsystem_vendor_id 0x2c\n#define PCI_subsystem_id 0x2e\n#define PCI_rom_base 0x30\n#define PCI_capabilities_ptr 0x34\n#define PCI_min_grant 0x3e\n#define PCI_max_latency 0x3f\n\n\t//\toffsets in PCI configuration space to the elements of header type 0x01 (PCI-to-PCI bridge)\n\n#define PCI_primary_bus 0x18\n#define PCI_secondary_bus 0x19\n#define PCI_subordinate_bus 0x1A\n#define PCI_secondary_latency 0x1B\n#define PCI_io_base 0x1C\n#define PCI_io_limit 0x1D\n#define PCI_secondary_status 0x1E\n#define PCI_memory_base 0x20\n#define PCI_memory_limit 0x22\n#define PCI_prefetchable_memory_base 0x24\n#define PCI_prefetchable_memory_limit 0x26\n#define PCI_prefetchable_memory_base_upper32 0x28\n#define PCI_prefetchable_memory_limit_upper32 0x2C\n#define PCI_io_base_upper16 0x30\n#define PCI_io_limit_upper16 0x32\n#define PCI_sub_vendor_id_1 0x34\n#define PCI_sub_device_id_1 0x36\n#define PCI_bridge_rom_base 0x38\n#define PCI_bridge_control 0x3E\n\n#define PCI_capabilities_ptr_2 0x14\n#define PCI_secondary_status_2 0x16\n#define PCI_primary_bus_2 0x18\n#define PCI_secondary_bus_2 0x19\n#define PCI_subordinate_bus_2 0x1A\n#define PCI_secondary_latency_2 0x1B\n#define PCI_memory_base0_2 0x1C\n#define PCI_memory_limit0_2 0x20\n#define PCI_memory_base1_2 0x24\n#define PCI_memory_limit1_2 0x28\n#define PCI_io_base0_2 0x2c\n#define PCI_io_limit0_2 0x30\n#define PCI_io_base1_2 0x34\n#define PCI_io_limit1_2 0x38\n#define PCI_bridge_control_2 0x3E\n#define PCI_sub_vendor_id_2 0x40\n#define PCI_sub_device_id_2 0x42\n#define PCI_card_interface_2 0x44\n\n\t//\tvalues for the class_base field in the common header\n\n#define PCI_early 0x00\n#define PCI_mass_storage 0x01\n#define PCI_network 0x02\n#define PCI_display 0x03\n#define PCI_multimedia 0x04\n#define PCI_memory 0x05\n#define PCI_bridge 0x06\n#define PCI_simple_communications 0x07\n#define PCI_base_peripheral 0x08\n#define PCI_input 0x09\n#define PCI_docking_station 0x0a\n#define PCI_processor 0x0b\n#define PCI_serial_bus 0x0c\n#define PCI_wireless 0x0d\n#define PCI_intelligent_io 0x0e\n#define PCI_satellite_communications 0x0f\n#define PCI_encryption_decryption 0x10\n#define PCI_data_acquisition 0x11\n#define PCI_processing_accelerator 0x12\n#define PCI_nonessential_function 0x13\n#define PCI_undefined 0xFF\n\n\t//\tvalues for the class_sub field for class_base \u003d 0x00 * (built before class codes were\n\t//defined)\n\n#define PCI_early_not_vga 0x00\n#define PCI_early_vga 0x01\n\n\t// \tvalues for the class_sub field for class_base \u003d 0x01 * (mass storage)\n\n\n#define PCI_scsi 0x00\n#define PCI_ide 0x01\n#define PCI_floppy 0x02\n#define PCI_ipi 0x03\n#define PCI_raid 0x04\n#define PCI_ata 0x05\n#define PCI_sata 0x06\n#define PCI_sas 0x07\n#define PCI_nvm 0x08\n#define PCI_ufs 0x09\n#define PCI_mass_storage_other 0x80\n\n\t/*\n\t *\tbit mask of the class_api field for\n\t *\t\tclass_base \u003d 0x01 (mass storage)\n\t *\t\tclass_sub \u003d 0x01 (IDE controller)\n\t */\n\n#define PCI_ide_primary_native 0x01\n#define PCI_ide_primary_fixed 0x02\n#define PCI_ide_secondary_native 0x04\n#define PCI_ide_secondary_fixed 0x08\n#define PCI_ide_master 0x80\n\n\t/*\n\t *\tvalues of the class_api field for\n\t *\t\tclass_base \u003d 0x01 (mass storage)\n\t *\t\tclass_sub \u003d 0x06 (Serial ATA controller)\n\t */\n\n#define PCI_sata_other 0x00\n#define PCI_sata_ahci 0x01\n\n\t/*\n\t *\tvalues of the class_api field for\n\t *\t\tclass_base \u003d 0x01 (mass storage)\n\t *\t\tclass_sub \u003d 0x08 (NVM Express controller)\n\t */\n\n#define PCI_nvm_other 0x00\n#define PCI_nvm_hci 0x01\n#define PCI_nvm_hci_enterprise 0x02\n\n\t/*\n\t *\tvalues of the class_api field for\n\t *\t\tclass_base \u003d 0x01 (mass storage)\n\t *\t\tclass_sub \u003d 0x09 (Universal Flash Storage controller)\n\t */\n\n#define PCI_ufs_other 0x00\n#define PCI_ufs_hci 0x01\n\n\t//\tvalues for the class_sub field for class_base \u003d 0x02 (network)\n\n#define PCI_ethernet 0x00\n#define PCI_token_ring 0x01\n#define PCI_fddi 0x02\n#define PCI_atm 0x03\n#define PCI_isdn 0x04\n#define PCI_worldfip 0x05\n#define PCI_picmg 0x06\n#define PCI_network_infiniband 0x07\n#define PCI_hfc 0x08\n#define PCI_network_other 0x80\n\n\t//\tvalues for the class_sub field for class_base \u003d 0x03 (display)\n\n#define PCI_vga 0x00\n#define PCI_xga 0x01\n#define PCI_3d 0x02\n#define PCI_display_other 0x80\n\n\t/*\n\t *\tvalues for the class_sub field for class_base \u003d 0x04 (multimedia device)\n\t */\n\n#define PCI_video 0x00\n#define PCI_audio 0x01\n#define PCI_telephony 0x02\n#define PCI_hd_audio 0x03\n#define PCI_multimedia_other 0x80\n\n\t/*\n\t *\tvalues of the class_api field for\n\t *\t\tclass_base \u003d 0x04 (multimedia device)\n\t *\t\tclass_sub \u003d 0x03 (HD audio)\n\t */\n\n#define PCI_hd_audio_vendor 0x80\n\n\t//\tvalues for the class_sub field for class_base \u003d 0x05 (memory)\n\n#define PCI_ram 0x00\n#define PCI_flash 0x01\n#define PCI_memory_other 0x80\n\n\t//\tvalues for the class_sub field for class_base \u003d 0x06 (bridge)\n\n#define PCI_host 0x00\n#define PCI_isa 0x01\n#define PCI_eisa 0x02\n#define PCI_microchannel 0x03\n#define PCI_pci 0x04\n#define PCI_pcmcia 0x05\n#define PCI_nubus 0x06\n#define PCI_cardbus 0x07\n#define PCI_raceway 0x08\n#define PCI_bridge_transparent 0x09\n#define PCI_bridge_infiniband 0x0a\n#define PCI_bridge_as_pci 0x0b\n#define PCI_bridge_other 0x80\n\n\t/*\n\t *\tvalues of the class_api field for\n\t *\t\tclass_base \u003d 0x06 (bridge), and\n\t *\t\tclass_sub \u003d 0x0b (Advanced Switching to PCI host bridge)\n\t */\n\n#define PCI_bridge_as_pci_asi_sig 0x01\n\n\t/*\n\t *    values for the class_sub field for class_base \u003d 0x07 (simple\n\t *    communications controllers)\n\t */\n\n#define PCI_serial 0x00\n#define PCI_parallel 0x01\n#define PCI_multiport_serial 0x02\n#define PCI_modem 0x03\n#define PCI_gpib 0x04\n#define PCI_smart_card 0x05\n#define PCI_simple_communications_other 0x80\n\n\t/*\n\t *\tvalues of the class_api field for\n\t *\t\tclass_base \u003d 0x07 (simple communications), and\n\t *\t\tclass_sub \u003d 0x00 (serial port controller)\n\t */\n\n#define PCI_serial_xt 0x00\n#define PCI_serial_16450 0x01\n#define PCI_serial_16550 0x02\n\n\t/*\n\t *\tvalues of the class_api field for\n\t *\t\tclass_base \u003d 0x07 (simple communications), and\n\t *\t\tclass_sub \u003d 0x01 (parallel port)\n\t */\n\n#define PCI_parallel_simple 0x00\n#define PCI_parallel_bidirectional 0x01\n#define PCI_parallel_ecp 0x02\n\n\t/*\n\t *\tvalues for the class_sub field for class_base \u003d 0x08 (generic\n\t *\tsystem peripherals)\n\t */\n\n#define PCI_pic 0x00\n#define PCI_dma 0x01\n#define PCI_timer 0x02\n#define PCI_rtc 0x03\n#define PCI_generic_hot_plug 0x04\n#define PCI_sd_host 0x05\n#define PCI_iommu 0x06\n#define PCI_rcec 0x07\n#define PCI_system_peripheral_other 0x80\n\n\t/*\n\t *\tvalues of the class_api field for\n\t *\t\tclass_base \u003d 0x08 (generic system peripherals)\n\t *\t\tclass_sub \u003d 0x00 (peripheral interrupt controller)\n\t */\n\n#define PCI_pic_8259 0x00\n#define PCI_pic_isa 0x01\n#define PCI_pic_eisa 0x02\n\n\t/*\n\t *\tvalues of the class_api field for\n\t *\t\tclass_base \u003d 0x08 (generic system peripherals)\n\t *\t\tclass_sub \u003d 0x01 (dma controller)\n\t */\n\n#define PCI_dma_8237 0x00\n#define PCI_dma_isa 0x01\n#define PCI_dma_eisa 0x02\n\n\t/*\n\t *\tvalues of the class_api field for\n\t *\t\tclass_base \u003d 0x08 (generic system peripherals)\n\t *\t\tclass_sub \u003d 0x02 (timer)\n\t */\n\n#define PCI_timer_8254 0x00\n#define PCI_timer_isa 0x01\n#define PCI_timer_eisa 0x02\n\n\t/*\n\t *\tvalues of the class_api field for\n\t *\t\tclass_base \u003d 0x08 (generic system peripherals)\n\t *\t\tclass_sub \u003d 0x03 (real time clock\n\t */\n\n#define PCI_rtc_generic 0x00\n#define PCI_rtc_isa 0x01\n\n\t//\tvalues for the class_sub field for class_base \u003d 0x09 (input devices)\n\n#define PCI_keyboard 0x00\n#define PCI_pen 0x01\n#define PCI_mouse 0x02\n#define PCI_scanner 0x03\n#define PCI_gameport 0x04\n#define PCI_input_other 0x80\n\n\t//\tvalues for the class_sub field for class_base \u003d 0x0a (docking stations)\n\n#define PCI_docking_generic 0x00\n#define PCI_docking_other 0x80\n\n\t//\tvalues for the class_sub field for class_base \u003d 0x0b (processor)\n\n#define PCI_386 0x00\n#define PCI_486 0x01\n#define PCI_pentium 0x02\n#define PCI_alpha 0x10\n#define PCI_PowerPC 0x20\n#define PCI_mips 0x30\n#define PCI_coprocessor 0x40\n\n\t/*\n\t *\tvalues for the class_sub field for class_base \u003d 0x0c (serial bus controller)\n\t */\n\n#define PCI_firewire 0x00\n#define PCI_access 0x01\n#define PCI_ssa 0x02\n#define PCI_usb 0x03\n#define PCI_fibre_channel 0x04\n#define PCI_smbus 0x05\n#define PCI_infiniband 0x06\n#define PCI_ipmi 0x07\n#define PCI_sercos 0x08\n#define PCI_canbus 0x09\n#define PCI_mipi_i3c 0x0a\n\n\t/*\n\t *\tvalues of the class_api field for\n\t *\t\tclass_base \u003d 0x0c (serial bus controller)\n\t *\t\tclass_sub \u003d 0x03 (Universal Serial Bus)\n\t */\n\n#define PCI_usb_uhci 0x00\n#define PCI_usb_ohci 0x10\n#define PCI_usb_ehci 0x20\n#define PCI_usb_xhci 0x30\n#define PCI_usb_usb4 0x40\n\n\t//\tvalues for the class_sub field for class_base \u003d 0x0d (wireless controller)\n\n#define PCI_wireless_irda 0x00\n#define PCI_wireless_consumer_ir 0x01\n#define PCI_wireless_rf 0x10\n#define PCI_wireless_bluetooth 0x11\n#define PCI_wireless_broadband 0x12\n#define PCI_wireless_80211A 0x20\n#define PCI_wireless_80211B 0x21\n#define PCI_wireless_cellular 0x40\n#define PCI_wireless_cellular_ethernet 0x41\n#define PCI_wireless_other 0x80\n\n\t//\tvalues for the class_sub field for class_base \u003d 0x10 (encryption decryption)\n\n#define PCI_encryption_decryption_network_computing 0x00\n#define PCI_encryption_decryption_entertainment 0x10\n#define PCI_encryption_decryption_other 0x80\n\n\t//\tvalues for the class_sub field for class_base \u003d 0x11 (data acquisition)\n\n#define PCI_data_acquisition_dpio 0x00\n#define PCI_data_acquisition_performance_counters 0x01\n#define PCI_data_acquisition_communication_synchroniser 0x10\n#define PCI_data_acquisition_management 0x20\n#define PCI_data_acquisition_other 0x80\n\n\t//\tmasks for command register bits\n\n#define PCI_command_io 0x001\n#define PCI_command_memory 0x002\n#define PCI_command_master 0x004\n#define PCI_command_special 0x008\n#define PCI_command_mwi 0x010\n#define PCI_command_vga_snoop 0x020\n#define PCI_command_parity 0x040\n#define PCI_command_address_step 0x080\n#define PCI_command_serr 0x100\n#define PCI_command_fastback 0x200\n#define PCI_command_int_disable 0x400\n\n\t//\tmasks for status register bits\n\n#define PCI_status_capabilities 0x0010\n#define PCI_status_66_MHz_capable 0x0020\n#define PCI_status_udf_supported 0x0040\n#define PCI_status_fastback 0x0080\n#define PCI_status_parity_signalled 0x0100\n#define PCI_status_devsel 0x0600\n#define PCI_status_target_abort_signalled 0x0800\n#define PCI_status_target_abort_received 0x1000\n#define PCI_status_master_abort_received 0x2000\n#define PCI_status_serr_signalled 0x4000\n#define PCI_status_parity_error_detected 0x8000\n\n\t//\tmasks for devsel field in status register\n\n#define PCI_status_devsel_fast 0x0000\n#define PCI_status_devsel_medium 0x0200\n#define PCI_status_devsel_slow 0x0400\n\n\t//\tmasks for header type register\n\n#define PCI_header_type_mask 0x7F\n#define PCI_multifunction 0x80\n\n\t// types of PCI header\n\n#define PCI_header_type_generic 0x00\n#define PCI_header_type_PCI_to_PCI_bridge 0x01\n#define PCI_header_type_cardbus 0x02\n\n\t// masks for built in self test (bist) register bits\n\n#define PCI_bist_code 0x0F\n#define PCI_bist_start 0x40\n#define PCI_bist_capable 0x80\n\n\t// masks for flags in the various base address registers\n\n#define PCI_address_space 0x01\n#define PCI_register_start 0x10\n#define PCI_register_end 0x24\n#define PCI_register_ppb_end 0x18\n#define PCI_register_pcb_end 0x14\n\n\t// masks for flags in memory space base address registers\n\n#define PCI_address_type_32 0x00\n#define PCI_address_type_32_low 0x02\n#define PCI_address_type_64 0x04\n#define PCI_address_type 0x06\n#define PCI_address_prefetchable 0x08\n#define PCI_address_memory_32_mask 0xFFFFFFF0\n\n\t//\tmasks for flags in i/o space base address registers\n\n#define PCI_address_io_mask 0xFFFFFFFC\n#define PCI_range_memory_mask 0xFFFFFFF0\n\n\t//\tmasks for flags in expansion rom base address registers\n\n#define PCI_rom_enable 0x00000001\n#define PCI_rom_shadow 0x00000010\n#define PCI_rom_copy 0x00000100\n#define PCI_rom_bios 0x00001000\n#define PCI_rom_address_mask 0xFFFFF800\n\n\t//\tPCI interrupt pin values\n\n#define PCI_pin_mask 0x07\n#define PCI_pin_none 0x00\n#define PCI_pin_a 0x01\n#define PCI_pin_b 0x02\n#define PCI_pin_c 0x03\n#define PCI_pin_d 0x04\n#define PCI_pin_max 0x04\n\n\t//\tPCI bridge control register bits\n\n#define PCI_bridge_parity_error_response 0x0001\n#define PCI_bridge_serr 0x0002\n#define PCI_bridge_isa 0x0004\n#define PCI_bridge_vga 0x0008\n#define PCI_bridge_master_abort 0x0020\n#define PCI_bridge_secondary_bus_reset 0x0040\n#define PCI_bridge_secondary_bus_fastback 0x0080\n#define PCI_bridge_primary_discard_timeout 0x0100\n#define PCI_bridge_secondary_discard_timeout 0x0200\n#define PCI_bridge_discard_timer_status 0x0400\n#define PCI_bridge_discard_timer_serr 0x0800\n\n\t//\tPCI Capability Codes\n\n#define PCI_cap_id_reserved 0x00\n#define PCI_cap_id_pm 0x01\n#define PCI_cap_id_agp 0x02\n#define PCI_cap_id_vpd 0x03\n#define PCI_cap_id_slotid 0x04\n#define PCI_cap_id_msi 0x05\n#define PCI_cap_id_chswp 0x06\n#define PCI_cap_id_pcix 0x07\n#define PCI_cap_id_ht 0x08\n#define PCI_cap_id_vendspec 0x09\n#define PCI_cap_id_debugport 0x0a\n#define PCI_cap_id_cpci_rsrcctl 0x0b\n#define PCI_cap_id_hotplug 0x0c\n#define PCI_cap_id_subvendor 0x0d\n#define PCI_cap_id_agp8x 0x0e\n#define PCI_cap_id_secure_dev 0x0f\n#define PCI_cap_id_pcie 0x10\n#define PCI_cap_id_msix 0x11\n#define PCI_cap_id_sata 0x12\n#define PCI_cap_id_pciaf 0x13\n#define PCI_cap_id_ea 0x14\n#define PCI_cap_id_fpb 0x15\n\n\t//\tPCI Extended Capabilities\n```",
      "range": {
        "startLine": 53,
        "startChar": 0,
        "endLine": 807,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "634c3c169ddf8a2a108f30cd21a34de93a95b07d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3956f8fb_ff6193e0",
        "filename": "headers/os/drivers/PCI.h",
        "patchSetId": 32
      },
      "lineNbr": 858,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-21T05:25:34Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n#define PCI_extcap_id_aer 0x0001\n#define PCI_extcap_id_vc 0x0002\n#define PCI_extcap_id_serial 0x0003\n#define PCI_extcap_id_power_budget 0x0004\n#define PCI_extcap_id_rcl_decl 0x0005\n#define PCI_extcap_id_rcil_ctl 0x0006\n#define PCI_extcap_id_rcec_assoc 0x0007\n#define PCI_extcap_id_mfvc 0x0008\n#define PCI_extcap_id_vc2 0x0009\n#define PCI_extcap_id_rcrb_header 0x000a\n#define PCI_extcap_id_vendo r 0x000b\n#define PCI_extcap_id_acs 0x000d\n#define PCI_extcap_id_ari 0x000e\n#define PCI_extcap_id_ats 0x000f\n#define PCI_extcap_id_srio_virtual 0x0010\n#define PCI_extcap_id_mrio_virtual 0x0011\n#define PCI_extcap_id_multicast 0x0012\n#define PCI_extcap_id_page_request 0x0013\n#define PCI_extcap_id_amd 0x0014\n#define PCI_extcap_id_resizable_bar 0x0015\n#define PCI_extcap_id_dyn_power_alloc 0x0016\n#define PCI_extcap_id_tph_requester 0x0017\n#define PCI_extcap_id_latency_tolerance 0x0018\n#define PCI_extcap_id_2ndpcie 0x0019\n#define PCI_extcap_id_pmux 0x001a\n#define PCI_extcap_id_pasid 0x001b\n#define PCI_extcap_id_ln_requester 0x001c\n#define PCI_extcap_id_dpc 0x001d\n#define PCI_extcap_id_l1pm 0x001e\n#define PCI_extcap_id_ptm 0x001f\n#define PCI_extcap_id_m_pcie 0x0020\n#define PCI_extcap_id_frs 0x0021\n#define PCI_extcap_id_rtr 0x0022\n#define PCI_extcap_id_dvsec 0x0023\n#define PCI_extcap_id_vf_resizable_bar 0x0024\n#define PCI_extcap_id_datalink 0x0025\n#define PCI_extcap_id_16gt 0x0026\n#define PCI_extcap_id_lmr 0x0027\n#define PCI_extcap_id_hierarchy_id 0x0028\n#define PCI_extcap_id_npem 0x0029\n#define PCI_extcap_id_pl32 0x002a\n#define PCI_extcap_id_ap 0x002b\n#define PCI_extcap_id_sfi 0x002c\n#define PCI_extcap_id_sf 0x002d\n#define PCI_extcap_id_doe 0x002e\n\n\t//\tPower Management Control Status Register settings\n```",
      "range": {
        "startLine": 812,
        "startChar": 0,
        "endLine": 858,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "634c3c169ddf8a2a108f30cd21a34de93a95b07d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "84dd25a7_44509e0d",
        "filename": "headers/os/drivers/PCI.h",
        "patchSetId": 32
      },
      "lineNbr": 864,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-21T05:25:34Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n#define PCI_pm_d1supp 0x0200\n#define PCI_pm_d2supp 0x0400\n#define PCI_pm_status 0x04\n```",
      "range": {
        "startLine": 862,
        "startChar": 0,
        "endLine": 864,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "634c3c169ddf8a2a108f30cd21a34de93a95b07d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f0f207ba_a09b7132",
        "filename": "headers/os/drivers/PCI.h",
        "patchSetId": 32
      },
      "lineNbr": 901,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-21T05:25:34Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n#define PCI_pm_state_d1 0x01\n#define PCI_pm_state_d2 0x02\n#define PCI_pm_state_d3 0x03\n\n\t//\tMSI registers\n\n#define PCI_msi_control 0x02\n#define PCI_msi_address 0x04\n#define PCI_msi_address_high 0x08\n#define PCI_msi_data 0x08\n#define PCI_msi_data_64bit 0x0c\n#define PCI_msi_mask 0x10\n#define PCI_msi_pending 0x14\n\n\t//\tMSI control register values\n\n#define PCI_msi_control_enable 0x0001\n#define PCI_msi_control_vector 0x0100\n#define PCI_msi_control_64bit 0x0080\n#define PCI_msi_control_mme_mask 0x0070\n#define PCI_msi_control_mme_1 0x0000\n#define PCI_msi_control_mme_2 0x0010\n#define PCI_msi_control_mme_4 0x0020\n#define PCI_msi_control_mme_8 0x0030\n#define PCI_msi_control_mme_16 0x0040\n#define PCI_msi_control_mme_32 0x0050\n#define PCI_msi_control_mmc_mask 0x000e\n#define PCI_msi_control_mmc_1 0x0000\n#define PCI_msi_control_mmc_2 0x0002\n#define PCI_msi_control_mmc_4 0x0004\n#define PCI_msi_control_mmc_8 0x0006\n#define PCI_msi_control_mmc_16 0x0008\n#define PCI_msi_control_mmc_32 0x000a\n\n\n\t// MSI-X registers\n```",
      "range": {
        "startLine": 866,
        "startChar": 0,
        "endLine": 901,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "634c3c169ddf8a2a108f30cd21a34de93a95b07d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d1883875_58cc8a83",
        "filename": "headers/os/drivers/PCI.h",
        "patchSetId": 32
      },
      "lineNbr": 945,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-21T05:25:34Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t//\tHyperTransport registers\n\n#define PCI_ht_command 0x02\n#define PCI_ht_msi_address_low 0x04\n#define PCI_ht_msi_address_high 0x08\n#define PCI_ht_command_cap_mask_3_bits 0xe000\n#define PCI_ht_command_cap_mask_5_bits 0xf800\n#define PCI_ht_command_cap_slave 0x0000\n#define PCI_ht_command_cap_host 0x2000\n#define PCI_ht_command_cap_switch 0x4000\n#define PCI_ht_command_cap_interrupt 0x8000\n#define PCI_ht_command_cap_revision_id 0x8800\n#define PCI_ht_command_cap_unit_id_clumping 0x9000\n#define PCI_ht_command_cap_ext_config_space 0x9800\n#define PCI_ht_command_cap_address_mapping 0xa000\n#define PCI_ht_command_cap_msi_mapping 0xa800\n#define PCI_ht_command_cap_direct_route 0xb000\n#define PCI_ht_command_cap_vcset 0xb800\n#define PCI_ht_command_cap_retry_mode 0xc000\n#define PCI_ht_command_cap_x86_encoding 0xc800\n#define PCI_ht_command_cap_gen3 0xd000\n#define PCI_ht_command_cap_fle 0xd800\n#define PCI_ht_command_cap_pm 0xe000\n#define PCI_ht_command_cap_high_node_count 0xe800\n#define PCI_ht_command_msi_enable 0x0001\n#define PCI_ht_command_msi_fixed 0x0002\n```",
      "range": {
        "startLine": 920,
        "startChar": 0,
        "endLine": 945,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "634c3c169ddf8a2a108f30cd21a34de93a95b07d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d1c89673_05961e3b",
        "filename": "headers/os/drivers/PCI.h",
        "patchSetId": 32
      },
      "lineNbr": 951,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-21T05:25:34Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n#endif /* PCI_H */\n```",
      "range": {
        "startLine": 951,
        "startChar": 0,
        "endLine": 951,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "634c3c169ddf8a2a108f30cd21a34de93a95b07d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}