{
  "comments": [
    {
      "key": {
        "uuid": "172d8d01_d336f97e",
        "filename": "headers/private/kernel/arch/riscv64/arch_kernel_args.h",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2021-08-17T23:04:13Z",
      "side": 1,
      "message": "This struct can be moved to some common header and shared with ARM, PPC or even x86.",
      "revId": "ea09cab401cffd5069de9e8302d6788bcff8e5cb",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92c177c5_8fd7719b",
        "filename": "headers/private/kernel/arch/riscv64/arch_kernel_args.h",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-08-18T00:15:36Z",
      "side": 1,
      "message": "I actually agree. I could standardize this into a \"platform_uart_info\"? for efi?  The fields seem pretty architecture agnostic.",
      "parentUuid": "172d8d01_d336f97e",
      "revId": "ea09cab401cffd5069de9e8302d6788bcff8e5cb",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b1b2592_98755178",
        "filename": "headers/private/kernel/arch/riscv64/arch_kernel_args.h",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2021-08-18T00:21:38Z",
      "side": 1,
      "message": "It can be applied not only for EFI, but to u-boot, openfirmware, riscv as well.",
      "parentUuid": "92c177c5_8fd7719b",
      "revId": "ea09cab401cffd5069de9e8302d6788bcff8e5cb",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5fa1c11f_07edb18e",
        "filename": "headers/private/kernel/arch/riscv64/arch_kernel_args.h",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-08-19T02:36:05Z",
      "side": 1,
      "message": "Agree.  I Setup a kernel \"uart_info\"",
      "parentUuid": "1b1b2592_98755178",
      "revId": "ea09cab401cffd5069de9e8302d6788bcff8e5cb",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e8e4b915_9b36cbb9",
        "filename": "headers/private/kernel/arch/riscv64/arch_kernel_args.h",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2021-08-17T23:04:13Z",
      "side": 1,
      "message": "Why 32? Does FDT documentation says something about maximum \"compatible\" string length?",
      "revId": "ea09cab401cffd5069de9e8302d6788bcff8e5cb",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d76f904e_69d7d16e",
        "filename": "headers/private/kernel/arch/riscv64/arch_kernel_args.h",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-08-18T00:15:36Z",
      "side": 1,
      "message": "I just chose a length \"big enough\" for all the uart compats I could find. We could choose anything here.  Open to alternatives if it seems too small.\n\nI don\u0027t think there\u0027s any limit on uart compat length, however i\u0027m also trying to keep arch_args slim.\n\n*ALSO* we don\u0027t have to put the fdt compat here at all.  We could turn arm,pl011 into a shortened + abstract  \"pl011\", \"8250\", etc stored in kSupportedUarts (kSupportUarts[0].name?)",
      "parentUuid": "e8e4b915_9b36cbb9",
      "revId": "ea09cab401cffd5069de9e8302d6788bcff8e5cb",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66d5e6f5_f9d878f2",
        "filename": "headers/private/kernel/arch/riscv64/arch_kernel_args.h",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2021-08-18T00:21:38Z",
      "side": 1,
      "message": "\u003e *ALSO* we don\u0027t have to put the fdt compat here at all.  We could turn arm,pl011 into a shortened + abstract  \"pl011\", \"8250\"\n\nThat would be probably better.",
      "parentUuid": "d76f904e_69d7d16e",
      "revId": "ea09cab401cffd5069de9e8302d6788bcff8e5cb",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24f05e08_b69be500",
        "filename": "headers/private/kernel/arch/riscv64/arch_kernel_args.h",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-08-19T02:36:05Z",
      "side": 1,
      "message": "done.  we have control of the kind name length now, and the code guards against overflows.",
      "parentUuid": "66d5e6f5_f9d878f2",
      "revId": "ea09cab401cffd5069de9e8302d6788bcff8e5cb",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "93f0064d_0f232661",
        "filename": "headers/private/kernel/boot/platform/efi/arch_smp.h",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2021-08-18T00:04:32Z",
      "side": 1,
      "message": "For RISC-V HART ID comes here in my SMP branch.",
      "revId": "ea09cab401cffd5069de9e8302d6788bcff8e5cb",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "afe4a2a2_4e849ff6",
        "filename": "headers/private/kernel/boot/platform/efi/arch_smp.h",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-08-18T00:15:36Z",
      "side": 1,
      "message": "I broke these changes off into another patch.   If you\u0027re actively working on SMP i\u0027ll hold off on pushing them up.\n\nJust an idea though.. the \"individual cpu id struct\" could be made an efi-universal thing instead of a riscv64 only thing (arm and arm64 could use something similar)",
      "parentUuid": "93f0064d_0f232661",
      "revId": "ea09cab401cffd5069de9e8302d6788bcff8e5cb",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2a4be9c_9bea3217",
        "filename": "src/system/boot/platform/efi/dtb.cpp",
        "patchSetId": 1
      },
      "lineNbr": 379,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-08-17T18:27:26Z",
      "side": 1,
      "message": "maybe gUART \u003d\u003d NULL would be better here?",
      "revId": "ea09cab401cffd5069de9e8302d6788bcff8e5cb",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6e9b0a9_7d070444",
        "filename": "src/system/boot/platform/efi/dtb.cpp",
        "patchSetId": 1
      },
      "lineNbr": 379,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2021-08-17T23:26:15Z",
      "side": 1,
      "message": "Note that gUART is for internal boot loader use. This code detects UART for passing to kernel.",
      "parentUuid": "d2a4be9c_9bea3217",
      "revId": "ea09cab401cffd5069de9e8302d6788bcff8e5cb",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "29991492_434b277b",
        "filename": "src/system/boot/platform/efi/dtb.cpp",
        "patchSetId": 1
      },
      "lineNbr": 379,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-08-17T23:35:16Z",
      "side": 1,
      "message": "In addition, I\u0027d invert this condition to reduce unnecessary indentation:\nif (sUart.kind !\u003d NULL)\n  return;",
      "parentUuid": "e6e9b0a9_7d070444",
      "revId": "ea09cab401cffd5069de9e8302d6788bcff8e5cb",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbd9c62d_c34d8755",
        "filename": "src/system/boot/platform/efi/dtb.cpp",
        "patchSetId": 1
      },
      "lineNbr": 379,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-08-18T00:20:12Z",
      "side": 1,
      "message": "done :-)",
      "parentUuid": "29991492_434b277b",
      "revId": "ea09cab401cffd5069de9e8302d6788bcff8e5cb",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "daff5e61_925dc8f7",
        "filename": "src/system/kernel/arch/riscv64/arch_debug_console.cpp",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-08-17T18:27:26Z",
      "side": 1,
      "message": "I chose not to use the logic in the bootloader here since the bootloader code is \"all architectures\" while the kernel debug console is \"one architecture\"\n\nThe logic may change around which uarts are available once we get into the kernel.\n\nThe dtb.cpp in efi doesn\u0027t need any architecture macros today.. but it may in the future.",
      "revId": "ea09cab401cffd5069de9e8302d6788bcff8e5cb",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    }
  ]
}