{
  "comments": [
    {
      "key": {
        "uuid": "6ec14885_2d7cada5",
        "filename": "headers/private/kernel/arch/riscv64/arch_int.h",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1000281
      },
      "writtenOn": "2021-08-05T00:24:36Z",
      "side": 1,
      "message": "CSRRS instruction",
      "revId": "8161c76c60e8024febe00ef54581d35f63528317",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e2177ee_f5bceae8",
        "filename": "headers/private/kernel/arch/riscv64/arch_int.h",
        "patchSetId": 4
      },
      "lineNbr": 34,
      "author": {
        "id": 1000281
      },
      "writtenOn": "2021-08-05T00:24:36Z",
      "side": 1,
      "message": "CSRRC instruction",
      "revId": "8161c76c60e8024febe00ef54581d35f63528317",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "274fdfd1_92fbfb1c",
        "filename": "src/system/kernel/arch/riscv64/arch_int.cpp",
        "patchSetId": 4
      },
      "lineNbr": 230,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2021-08-05T00:44:49Z",
      "side": 1,
      "message": "Is this really good solution? HiFive Unmatched do not automatically set accessed and modified PTE flags, it cause page fault exception instead.",
      "revId": "8161c76c60e8024febe00ef54581d35f63528317",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "060748a4_f8624cd3",
        "filename": "src/system/kernel/arch/riscv64/arch_int.cpp",
        "patchSetId": 4
      },
      "lineNbr": 230,
      "author": {
        "id": 1000281
      },
      "writtenOn": "2021-08-05T00:54:04Z",
      "side": 1,
      "message": "Yes, this is the kind of thing you have to do. See FreeBSD\u0027s pmap_fault in sys/riscv/riscv/pmap.c for its equivalent.",
      "parentUuid": "274fdfd1_92fbfb1c",
      "revId": "8161c76c60e8024febe00ef54581d35f63528317",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ce1a516_1038629c",
        "filename": "src/system/kernel/arch/riscv64/arch_int.cpp",
        "patchSetId": 4
      },
      "lineNbr": 246,
      "author": {
        "id": 1000281
      },
      "writtenOn": "2021-08-05T00:54:04Z",
      "side": 1,
      "message": "What if it\u0027s not mapped? Is pageFlags just 0 or something so this works?",
      "revId": "8161c76c60e8024febe00ef54581d35f63528317",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e7c160e_0cf440cb",
        "filename": "src/system/kernel/arch/riscv64/arch_int.cpp",
        "patchSetId": 4
      },
      "lineNbr": 246,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2021-08-05T01:19:11Z",
      "side": 1,
      "message": "PAGE_PRESENT flag will be not set.",
      "parentUuid": "9ce1a516_1038629c",
      "revId": "8161c76c60e8024febe00ef54581d35f63528317",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d9985bda_61f091d4",
        "filename": "src/system/kernel/arch/riscv64/arch_int.cpp",
        "patchSetId": 4
      },
      "lineNbr": 253,
      "author": {
        "id": 1000281
      },
      "writtenOn": "2021-08-05T00:54:04Z",
      "side": 1,
      "message": "Does SetFlags include an sfence.vma? Because you need one before you retry the instruction.\n\nUsing addr here is potentially racy without having taken a lock, as another hart could have changed what addr maps to in between QueryInterrupt and here.",
      "revId": "8161c76c60e8024febe00ef54581d35f63528317",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91df2578_7201da4f",
        "filename": "src/system/kernel/arch/riscv64/arch_int.cpp",
        "patchSetId": 4
      },
      "lineNbr": 253,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2021-08-05T01:19:11Z",
      "side": 1,
      "message": "Yes, SetFlags call sfence.vma (FlushTlbPage(address)).\n\nI am not sure about locks, this code must run with interrupts disabled. Page without flags set can be accessed by kernel with interrupts disabled and it does no expect interrupts to became enabled.",
      "parentUuid": "d9985bda_61f091d4",
      "revId": "8161c76c60e8024febe00ef54581d35f63528317",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a8880c6_fcde3e6d",
        "filename": "src/system/kernel/arch/riscv64/arch_int.cpp",
        "patchSetId": 4
      },
      "lineNbr": 253,
      "author": {
        "id": 1000281
      },
      "writtenOn": "2021-08-05T01:20:40Z",
      "side": 1,
      "message": "I said \"other hart\"; interrupts being disabled on this hart (which is true because you\u0027re in a trap handler and haven\u0027t re-enabled them) has no bearing on other harts in the system.",
      "parentUuid": "91df2578_7201da4f",
      "revId": "8161c76c60e8024febe00ef54581d35f63528317",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a90029ae_e3ad8c0d",
        "filename": "src/system/kernel/arch/riscv64/arch_int.cpp",
        "patchSetId": 4
      },
      "lineNbr": 253,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2021-08-05T01:37:45Z",
      "side": 1,
      "message": "Do you mean this: https://github.com/freebsd/freebsd-src/blob/main/sys/riscv/riscv/pmap.c#L2405 ?",
      "parentUuid": "7a8880c6_fcde3e6d",
      "revId": "8161c76c60e8024febe00ef54581d35f63528317",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1a04dcd_6016a0e0",
        "filename": "src/system/kernel/arch/riscv64/arch_int.cpp",
        "patchSetId": 4
      },
      "lineNbr": 293,
      "author": {
        "id": 1000281
      },
      "writtenOn": "2021-08-05T00:24:36Z",
      "side": 1,
      "message": "Surely this belongs in a machine-independent library header somewhere?",
      "revId": "8161c76c60e8024febe00ef54581d35f63528317",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3cf7c274_ae231db7",
        "filename": "src/system/kernel/arch/riscv64/arch_int.cpp",
        "patchSetId": 4
      },
      "lineNbr": 293,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2021-08-05T00:36:20Z",
      "side": 1,
      "message": "Yes, it should be moved. But maybe it is better to just move SSTATUS save to asm code and trap frame.",
      "parentUuid": "c1a04dcd_6016a0e0",
      "revId": "8161c76c60e8024febe00ef54581d35f63528317",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67f0f116_8f8532a2",
        "filename": "src/system/kernel/arch/riscv64/arch_int.cpp",
        "patchSetId": 4
      },
      "lineNbr": 437,
      "author": {
        "id": 1000281
      },
      "writtenOn": "2021-08-05T00:24:36Z",
      "side": 1,
      "message": "This layout is not at all guaranteed. You have to read the interrupts-extended property of the PLIC\u0027s device tree node to find which indices are supervisor external interrupts and which harts they map to. The PLIC should also be separated out of here as its own driver that this calls (indirectly, so it can be swapped out transparently), as a new interrupt controller is being worked on.",
      "revId": "8161c76c60e8024febe00ef54581d35f63528317",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2bb020c3_1801fc11",
        "filename": "src/system/kernel/arch/riscv64/arch_int.cpp",
        "patchSetId": 4
      },
      "lineNbr": 437,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2021-08-05T00:36:20Z",
      "side": 1,
      "message": "Yes, I know. I already understand how to get PLIC context id mapping for HART id from FDT, but it is currently not implemented.",
      "parentUuid": "67f0f116_8f8532a2",
      "revId": "8161c76c60e8024febe00ef54581d35f63528317",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dfa089fd_dca04d92",
        "filename": "src/system/kernel/arch/riscv64/arch_int.cpp",
        "patchSetId": 4
      },
      "lineNbr": 494,
      "author": {
        "id": 1000281
      },
      "writtenOn": "2021-08-05T00:24:36Z",
      "side": 1,
      "message": "FPU in the kernel? And what about userspace? I don\u0027t see floating-point registers in the trap frame, how are you making sure those get context switched as needed if you\u0027re not trapping on them being accessed?",
      "revId": "8161c76c60e8024febe00ef54581d35f63528317",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e794749_c6c2f0ce",
        "filename": "src/system/kernel/arch/riscv64/arch_int.cpp",
        "patchSetId": 4
      },
      "lineNbr": 494,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2021-08-05T00:36:20Z",
      "side": 1,
      "message": "Yes, FPU is used in Haiku kernel and boot loader, but rarely. Kernel mode FPU handling is not correct for now. I am currently considering how to efficiently implement it, saving FPU registers on each trap would be inefficient. Probably FPU should be initially disabled and re-enabled on illegal instruction trap handler.",
      "parentUuid": "dfa089fd_dca04d92",
      "revId": "8161c76c60e8024febe00ef54581d35f63528317",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fcc7b61d_4888745c",
        "filename": "src/system/kernel/arch/riscv64/arch_int.cpp",
        "patchSetId": 4
      },
      "lineNbr": 494,
      "author": {
        "id": 1000281
      },
      "writtenOn": "2021-08-05T00:39:05Z",
      "side": 1,
      "message": "Yes, that is how you do lazy FPU context switching.",
      "parentUuid": "9e794749_c6c2f0ce",
      "revId": "8161c76c60e8024febe00ef54581d35f63528317",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    }
  ]
}