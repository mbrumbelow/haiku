{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0630ffee_dcb12f80",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000341
      },
      "writtenOn": "2022-11-28T21:29:53Z",
      "side": 1,
      "message": "trying to do something similar to the definition of ioctl:\n\n* on C++ define crypt_r as an inline function\n* on C define crypt_r as a macro",
      "revId": "fc38f4136c7478426fbb596e67310bd81b067fca",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4619d3c2_6e0b5277",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-12-12T10:22:37Z",
      "side": 1,
      "message": "This is not a POSIX standard function as far as I can see, so it should not be in the posix/unistd.h header.\n\nIt should instead be in headers/compatibility/gnu.\n\nLikewise the implementation should probably go in src/libs/gnu\n\nThe reason for this is, if some POSIX compliant software has its own function named crypt_r or crpyt_rn, possibly doing a completely different thing, it would run into confusion if there is a similarly named one in the standard library. Our solution is to move these functions in separate libraries that POSIX compliant code can simply not use.",
      "revId": "fc38f4136c7478426fbb596e67310bd81b067fca",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2c87110f_532064af",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000341
      },
      "writtenOn": "2023-01-28T10:35:54Z",
      "side": 1,
      "message": "I moved the definition of crypt_r(), crypt_rn(), struct crypt_data to a new file headers/compatibility/gnu/crypt.h\nNot sure about #ifdef _GNU_SOURCE though, should we use it in crypt.h?",
      "parentUuid": "4619d3c2_6e0b5277",
      "revId": "fc38f4136c7478426fbb596e67310bd81b067fca",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d5b862a_1dcfa720",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-01-30T12:51:12Z",
      "side": 1,
      "message": "Yes. The following changes are needed in headers/compatibility/gnu/crypt.h:\n\n    #include \u003cfeatures.h\u003e // to aumomatically define _GNU_SOURCE if appropriate\n    #ifdef _GNU_SOURCE\n\n    // GNU specific functions defined here (all content of the file)\n\n    #endif\n\nThis will make sure that if _GNU_SOURCE is defined, the GNU extensions will be available, otherwise, they will not\n\nBy default, _GNU_SOURCE is defined, since gcc is using -std\u003dgnu99 or similar. However, if an application requests strict standard (-std\u003dc99 for example), then _GNU_SOURCE will not be defined, and the extensions will not be made available.\n\n\nIdeally, the function definitions would also be moved outside of libroot (glibc hqs them in a separate library, libcrypt). But in this case, since the POSIX function relies on the same code, it is a bit difficult to do so. Probably, weak symbols can be used in this situation.\n\n\nThe idea for all of this is that the headers defined by POSIX should not provide more than what\u0027s specified in POSIX, and people can write POSIX compatible code and provide their own function named crypt_r if they want so. In that case, there should be no crypt_r function in libroot and in our system headers interferring. But enabling GNU extensions should make it available.",
      "parentUuid": "2c87110f_532064af",
      "revId": "fc38f4136c7478426fbb596e67310bd81b067fca",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5287de5a_f1196d73",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000341
      },
      "writtenOn": "2023-02-03T16:50:50Z",
      "side": 1,
      "message": "I keep running into trouble with _GNU_SOURCE:\n* it does not seem to be defined by default\n* features.h is available only under compatibility/bsd and src/system/libroot/posix/glibc/include\n* features.h does not define _GNU_SOURCE it rather relies on _GNU_SOURCE being defined by the compiler\n\nso... shall I define it in the Jamfiles using SubDirCcFlags/SubDirC++Flags or in crypt.cpp and CryptTest.cpp?",
      "parentUuid": "3d5b862a_1dcfa720",
      "revId": "fc38f4136c7478426fbb596e67310bd81b067fca",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c1d5c19_7e415616",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-02-06T12:13:02Z",
      "side": 1,
      "message": "I\u0027m sorry, I forgot that this had been reorganized ðŸ˜ž\n\nYou should use _DEFAULT_SOURCE as a guard, which is enabled automatically by features.h (the one in headers/compatibility/bsd).\n\nI have written some documentation to clarify how this all is supposed to work, let me know if that\u0027s clear and understandable: https://review.haiku-os.org/c/haiku/+/6045",
      "parentUuid": "5287de5a_f1196d73",
      "revId": "fc38f4136c7478426fbb596e67310bd81b067fca",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b71c0a25_b9e83fd6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000341
      },
      "writtenOn": "2023-02-06T19:17:08Z",
      "side": 1,
      "message": "I hope we\u0027re going in the right direction here...\n* include features.h from crypt.h, protect the declarations with _DEFAULT_SOURCE\n* therefore I need to add compatibility/bsd to include path wherever crypt.h is used\n* I\u0027m still not sure whether crypt_r() should be inline or static inline\n\nAnyways if it looks right then next thing I\u0027ll try to move crypt_rn() implementation out from libroot. Shall it go in -lgnu or in -lcrypt?",
      "parentUuid": "7c1d5c19_7e415616",
      "revId": "fc38f4136c7478426fbb596e67310bd81b067fca",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4daa1348_06b23ffa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-02-06T22:16:44Z",
      "side": 1,
      "message": "If you make it inline you probably want \"static inline\", otherwise you risk linker errors for having multiple definitions of it.\n\nIt will not be possible to completely move crypt_rn out of libroot since crypt depends on it (and if libroot needs to link to libgnu, the whole point of separating the GNU functions in another lib is lost).\n\nSo, we would need the following setup:\n\n- A function named _crypt_rn in libroot, not declared in public headers,\n- crypt() is implemented in libroot and calls _crypt_rn\n- crypt_rn() is implemented in libgnu and is just a simple wrapper to _crypt_rn (but doing it this way costs an extra function call)\n- or alternatively, crypt_rn remains defined in libroot, but as a weak alias to _crypt_rn so that applications which define their own crypt_rn implementation don\u0027t hit any problem.",
      "parentUuid": "b71c0a25_b9e83fd6",
      "revId": "fc38f4136c7478426fbb596e67310bd81b067fca",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce4e8da7_63797db8",
        "filename": "headers/posix/unistd.h",
        "patchSetId": 6
      },
      "lineNbr": 322,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-12-12T10:22:37Z",
      "side": 1,
      "message": "why can\u0027t this definition be used in both C and C++?",
      "revId": "fc38f4136c7478426fbb596e67310bd81b067fca",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "53327b70_a361da53",
        "filename": "headers/posix/unistd.h",
        "patchSetId": 6
      },
      "lineNbr": 322,
      "author": {
        "id": 1000341
      },
      "writtenOn": "2023-02-03T16:50:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ce4e8da7_63797db8",
      "revId": "fc38f4136c7478426fbb596e67310bd81b067fca",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}