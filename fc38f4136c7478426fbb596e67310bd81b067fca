{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0630ffee_dcb12f80",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000341
      },
      "writtenOn": "2022-11-28T21:29:53Z",
      "side": 1,
      "message": "trying to do something similar to the definition of ioctl:\n\n* on C++ define crypt_r as an inline function\n* on C define crypt_r as a macro",
      "revId": "fc38f4136c7478426fbb596e67310bd81b067fca",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4619d3c2_6e0b5277",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-12-12T10:22:37Z",
      "side": 1,
      "message": "This is not a POSIX standard function as far as I can see, so it should not be in the posix/unistd.h header.\n\nIt should instead be in headers/compatibility/gnu.\n\nLikewise the implementation should probably go in src/libs/gnu\n\nThe reason for this is, if some POSIX compliant software has its own function named crypt_r or crpyt_rn, possibly doing a completely different thing, it would run into confusion if there is a similarly named one in the standard library. Our solution is to move these functions in separate libraries that POSIX compliant code can simply not use.",
      "revId": "fc38f4136c7478426fbb596e67310bd81b067fca",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2c87110f_532064af",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000341
      },
      "writtenOn": "2023-01-28T10:35:54Z",
      "side": 1,
      "message": "I moved the definition of crypt_r(), crypt_rn(), struct crypt_data to a new file headers/compatibility/gnu/crypt.h\nNot sure about #ifdef _GNU_SOURCE though, should we use it in crypt.h?",
      "parentUuid": "4619d3c2_6e0b5277",
      "revId": "fc38f4136c7478426fbb596e67310bd81b067fca",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d5b862a_1dcfa720",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-01-30T12:51:12Z",
      "side": 1,
      "message": "Yes. The following changes are needed in headers/compatibility/gnu/crypt.h:\n\n    #include \u003cfeatures.h\u003e // to aumomatically define _GNU_SOURCE if appropriate\n    #ifdef _GNU_SOURCE\n\n    // GNU specific functions defined here (all content of the file)\n\n    #endif\n\nThis will make sure that if _GNU_SOURCE is defined, the GNU extensions will be available, otherwise, they will not\n\nBy default, _GNU_SOURCE is defined, since gcc is using -std\u003dgnu99 or similar. However, if an application requests strict standard (-std\u003dc99 for example), then _GNU_SOURCE will not be defined, and the extensions will not be made available.\n\n\nIdeally, the function definitions would also be moved outside of libroot (glibc hqs them in a separate library, libcrypt). But in this case, since the POSIX function relies on the same code, it is a bit difficult to do so. Probably, weak symbols can be used in this situation.\n\n\nThe idea for all of this is that the headers defined by POSIX should not provide more than what\u0027s specified in POSIX, and people can write POSIX compatible code and provide their own function named crypt_r if they want so. In that case, there should be no crypt_r function in libroot and in our system headers interferring. But enabling GNU extensions should make it available.",
      "parentUuid": "2c87110f_532064af",
      "revId": "fc38f4136c7478426fbb596e67310bd81b067fca",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce4e8da7_63797db8",
        "filename": "headers/posix/unistd.h",
        "patchSetId": 6
      },
      "lineNbr": 322,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-12-12T10:22:37Z",
      "side": 1,
      "message": "why can\u0027t this definition be used in both C and C++?",
      "revId": "fc38f4136c7478426fbb596e67310bd81b067fca",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}