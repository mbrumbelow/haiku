{
  "comments": [
    {
      "key": {
        "uuid": "eaf4e0f3_6d84d374",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 12
      },
      "lineNbr": 17,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2020-12-02T16:47:56Z",
      "side": 1,
      "message": "shouldn\u0027t the constructor call Init() automatically?",
      "revId": "e3d49bc97073cb3c0faa6d82c0a62ae6a61c6518",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "121ffa28_e24f8b29",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 12
      },
      "lineNbr": 17,
      "author": {
        "id": 1000183
      },
      "writtenOn": "2021-01-16T12:55:49Z",
      "side": 1,
      "message": "We can\u0027t get return values from the constructor right? Init() could return B_NO_MEMORY",
      "parentUuid": "eaf4e0f3_6d84d374",
      "revId": "e3d49bc97073cb3c0faa6d82c0a62ae6a61c6518",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "986d22d1_94f2b87c",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 12
      },
      "lineNbr": 17,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2021-01-16T13:28:03Z",
      "side": 1,
      "message": "What we do usually is that the constructor does the initialization and store the error code in a field variable (fInitStatus or similar).\n\nThen there is an InitCheck() method that just returns that status.\n\nThis makes sure the class is always initialized in a sane way when constructed.",
      "parentUuid": "121ffa28_e24f8b29",
      "revId": "e3d49bc97073cb3c0faa6d82c0a62ae6a61c6518",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed004aac_e753e9d0",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 12
      },
      "lineNbr": 17,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2021-03-23T17:35:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "986d22d1_94f2b87c",
      "revId": "e3d49bc97073cb3c0faa6d82c0a62ae6a61c6518",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8846d95c_7731fd14",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.h",
        "patchSetId": 12
      },
      "lineNbr": 100,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2020-12-02T16:47:56Z",
      "side": 1,
      "message": "this line is too long",
      "revId": "e3d49bc97073cb3c0faa6d82c0a62ae6a61c6518",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4bfb931c_7f8cdc1d",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.h",
        "patchSetId": 12
      },
      "lineNbr": 100,
      "author": {
        "id": 1000183
      },
      "writtenOn": "2021-01-16T12:55:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8846d95c_7731fd14",
      "revId": "e3d49bc97073cb3c0faa6d82c0a62ae6a61c6518",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": false
    }
  ]
}