{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9087381f_5836e427",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000459
      },
      "writtenOn": "2023-10-18T14:57:20Z",
      "side": 1,
      "message": "Oh, wow. I learned something new about C++.\n\nFrom https://isocpp.org/wiki/faq/references\n\n\u003e Even though a reference is often implemented using an address in the underlying assembly language, please do not think of a reference as a funny looking pointer to an object. A reference is the object, just with another name. It is neither a pointer to the object, nor a copy of the object. It is the object. There is no C++ syntax that lets you operate on the reference itself separate from the object to which it refers.\n\nSo trying to reassign a reference makes no sense. Good job finding this :)",
      "revId": "8b7acd81233f6bdf387fc1646c7c7c17f9d98877",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ff75424_1d4bf2c9",
        "filename": "src/libs/icon/generic/VertexSource.h",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1000459
      },
      "writtenOn": "2023-10-18T14:57:20Z",
      "side": 1,
      "message": "Why do you explicitly disallow this?",
      "revId": "8b7acd81233f6bdf387fc1646c7c7c17f9d98877",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d9be971c_7da0511d",
        "filename": "src/libs/icon/generic/VertexSource.h",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-10-18T15:01:53Z",
      "side": 1,
      "message": "In general, unless you explicitly implement the operators correctly, it\u0027s safer to disallow them to prevent mistakes ; the default C++ auto-generated ones will generally only perform shallow copies, which can lead to things like inadvertently sharing pointers to the same object, etc., and the associated mem management issues that brings.",
      "parentUuid": "2ff75424_1d4bf2c9",
      "revId": "8b7acd81233f6bdf387fc1646c7c7c17f9d98877",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b1d2f6b_2767dec8",
        "filename": "src/libs/icon/generic/VertexSource.h",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1000459
      },
      "writtenOn": "2023-10-18T17:10:34Z",
      "side": 1,
      "message": "Maybe, then, it belongs in the subclasses that inherit this class but don\u0027t want to be copied? AFAIK, only the `PathSource` subclass hasn\u0027t implemented the ability to copy itself.\n\nOtherwise, it feels a bit weird to me to put this here since it is nowhere else in Icon-O-Matic\u0027s codebase. If I were reading this code for the first time, I would wonder why they specifically state this shouldn\u0027t be copied. Then I would try to figure out why, to no avail. Maybe a comment would help clarify?",
      "parentUuid": "d9be971c_7da0511d",
      "revId": "8b7acd81233f6bdf387fc1646c7c7c17f9d98877",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}