{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "08b79e3a_9badaabf",
        "filename": "headers/os/app/Message.h",
        "patchSetId": 1
      },
      "lineNbr": 418,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2025-03-18T12:32:50Z",
      "side": 1,
      "message": "do we want to maintain the deprecation for these ones? They were deprecated in BeOS because the error handling is imperfect (they just return a default value if the field is not found), but in a lot of cases it turns out that is just what you need, and indeed a lot of code is using them.\n\nThe alternative would be the GetInt* functions below, but these have two versions with and without an index, which means they can\u0027t have a default default value (so you would write GetInt(\"foo\") and just get the first \"foo\", or 0 if not found).",
      "revId": "6ab7ab7ce7782cfeccb270d206858bc705ac862d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1fe6fb6c_989ce7e5",
        "filename": "headers/os/app/Message.h",
        "patchSetId": 1
      },
      "lineNbr": 418,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-03-18T13:08:50Z",
      "side": 1,
      "message": "That\u0027s a fair question. I\u0027ll remove the _DEPRECATED from them in the next version then.",
      "parentUuid": "08b79e3a_9badaabf",
      "revId": "6ab7ab7ce7782cfeccb270d206858bc705ac862d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "939ea2af_0064a57c",
        "filename": "headers/os/app/Message.h",
        "patchSetId": 1
      },
      "lineNbr": 418,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2025-03-25T16:17:32Z",
      "side": 1,
      "message": "I\u0027m confused. The Get* functions have default values already, and you normally *have* to pass defaults to them. The Find functions can be used if the error handeling is important and falling back to a default value is not desired.\n\nThese variants should be deprecated as they are now.",
      "parentUuid": "1fe6fb6c_989ce7e5",
      "revId": "6ab7ab7ce7782cfeccb270d206858bc705ac862d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6eca26bb_00a9c699",
        "filename": "headers/os/app/Message.h",
        "patchSetId": 1
      },
      "lineNbr": 418,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2025-03-27T17:50:08Z",
      "side": 1,
      "message": "The Get* functions have no \"default default\" value.\n\nThat means the equivalent to FindString(\"somekey\"); is GetString(\"somekey\", \"\"); and likewise for each other type. One extra parameter allowing to set the default value.\n\nAll of the defined Find* have \"obvious\" default values (0 for numbers, false for bool, empty string for strings, empty rectangle for rectangles, B_ORIGIN for points) which is what you want in a lot of cases. And the Find* functions just use that obvious value, making the code simpler by not forcing you to explicitly state that default value.\n\nIt may be possible to declare these values as default parameters in the Get* functions, but this has been done only for GetBool and a few of the new ones that don\u0027t have Find* equivalents (GetPointer defaults to NULL for example). In the case that all Get* functions get default values, then, yes, maybe we can deprecate these as there is a good replacement.\n\nBut that raises another problem: there is no way to do this for the 3-parameter Get* functions (with an index). Suppose you have:\n\n    GetInt32(const char* name, int32 defaultValue \u003d 0) const;\n    GetInt32(const char* name, int32 index, int32 defaultValue \u003d 0) const;\n    \nNow you write:\n\n    int32 v \u003d GetInt32(\"somekey\", 0);\n    \nThe compiler does not know if you are trying to call the first variant (with defaultValue explicitly set to 0) or the second one (with index \u003d 0 and the default default value of 0).\n\nSo, we can\u0027t have default default values for all the variants of the Get* functions. That makes them annoying to use as you always have to specify a default value. Existing code in Haiku and applications shows that people have been ignoring the Be Book deprecation warning, and are indeed fine with the implicit default value used by Find* in most cases, with only occasional use of either the Find* variant returning a status_t, or, maybe even more rarely, the Get* version.",
      "parentUuid": "939ea2af_0064a57c",
      "revId": "6ab7ab7ce7782cfeccb270d206858bc705ac862d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "313a35ec_a9e422a5",
        "filename": "headers/os/app/Message.h",
        "patchSetId": 1
      },
      "lineNbr": 418,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2025-03-31T06:43:55Z",
      "side": 1,
      "message": "I don\u0027t think implicit default values are a good idea in either case. I consider this a benefit and not a defect.\n\nThe code in which I\u0027ve seen that uses the deprecated methods does so in the assumtion that it cannot fail, i.e that there is never not the item requested in the message.\n\nAlso I don\u0027t thunk the default values you proposed are all too obvious. Stuff like B_ORIGIN requires specific knowledge about the api. And I don\u0027t think hoping that the right value is documented somewhere is a good idea. These methods could just aswell return null if nothing exists.\n\nWith the default values supplied in arguments the intent is explicit, if no default value is actually wanted a status_t check with a not reached assertion would be better suited. We should not undeprecate these.",
      "parentUuid": "6eca26bb_00a9c699",
      "revId": "6ab7ab7ce7782cfeccb270d206858bc705ac862d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8928c7ee_bd115390",
        "filename": "headers/os/interface/InterfaceDefs.h",
        "patchSetId": 1
      },
      "lineNbr": 452,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-03-06T15:38:44Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\nstatus_t get_mouse_type(int32* type) _DEPRECATED;\n```",
      "range": {
        "startLine": 452,
        "startChar": 0,
        "endLine": 452,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "6ab7ab7ce7782cfeccb270d206858bc705ac862d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b73dff75_24e3f357",
        "filename": "headers/os/interface/InterfaceDefs.h",
        "patchSetId": 1
      },
      "lineNbr": 455,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-03-06T15:38:44Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\nstatus_t get_mouse_map(mouse_map* map) _DEPRECATED;\n```",
      "range": {
        "startLine": 455,
        "startChar": 0,
        "endLine": 455,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "6ab7ab7ce7782cfeccb270d206858bc705ac862d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9aa4b4ea_0340661f",
        "filename": "headers/os/interface/InterfaceDefs.h",
        "patchSetId": 1
      },
      "lineNbr": 457,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-03-06T15:38:44Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\nstatus_t set_mouse_map(mouse_map* map) _DEPRECATED;\n```",
      "range": {
        "startLine": 457,
        "startChar": 0,
        "endLine": 457,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "6ab7ab7ce7782cfeccb270d206858bc705ac862d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ec2b3ae4_6041a123",
        "filename": "headers/os/interface/InterfaceDefs.h",
        "patchSetId": 1
      },
      "lineNbr": 459,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-03-06T15:38:44Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\nstatus_t get_click_speed(bigtime_t* speed) _DEPRECATED;\n```",
      "range": {
        "startLine": 459,
        "startChar": 0,
        "endLine": 459,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "6ab7ab7ce7782cfeccb270d206858bc705ac862d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "31396a3a_62ad4d7a",
        "filename": "headers/os/interface/InterfaceDefs.h",
        "patchSetId": 1
      },
      "lineNbr": 461,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-03-06T15:38:44Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\nstatus_t set_click_speed(bigtime_t speed) _DEPRECATED;\n```",
      "range": {
        "startLine": 461,
        "startChar": 0,
        "endLine": 461,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "6ab7ab7ce7782cfeccb270d206858bc705ac862d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "00099f1e_0215528c",
        "filename": "headers/os/interface/InterfaceDefs.h",
        "patchSetId": 1
      },
      "lineNbr": 463,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-03-06T15:38:44Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\nstatus_t get_mouse_speed(int32* speed) _DEPRECATED;\n```",
      "range": {
        "startLine": 463,
        "startChar": 0,
        "endLine": 463,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "6ab7ab7ce7782cfeccb270d206858bc705ac862d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3872fa8b_8768530d",
        "filename": "headers/os/interface/InterfaceDefs.h",
        "patchSetId": 1
      },
      "lineNbr": 466,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-03-06T15:38:44Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\nstatus_t get_mouse_acceleration(int32* speed) _DEPRECATED;\n```",
      "range": {
        "startLine": 466,
        "startChar": 0,
        "endLine": 466,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "6ab7ab7ce7782cfeccb270d206858bc705ac862d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}