{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "866b7416_f5296915",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2025-01-10T22:34:21Z",
      "side": 1,
      "message": "Minor nitpick, the String* headers come before the Sun* headers, but otherwise looks good to me.",
      "revId": "1f50908c5733497c478d073780864ba342f22a5f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2509ba00_67d5ac71",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-01-11T03:09:31Z",
      "side": 1,
      "message": "I\u0027m actually not certain if this is the fully correct or best solution. The changes to the Table symbol reader are correct and necessary, I think, but I don\u0027t know about the others. I am increasingly wondering if runtime_loader should patch st_value to be correct relative to the first text offset rather than the file offset.",
      "revId": "1f50908c5733497c478d073780864ba342f22a5f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1eed2ab_1196b134",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-01-11T03:34:03Z",
      "side": 1,
      "message": "Yeah, there are a lot of parts of the runtime_loader symbol resolution that just go off the st_value + regions[0].delta. So how does this work for that?",
      "parentUuid": "2509ba00_67d5ac71",
      "revId": "1f50908c5733497c478d073780864ba342f22a5f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a1fb6654_c8cc93ba",
        "filename": "src/kits/debug/Image.cpp",
        "patchSetId": 1
      },
      "lineNbr": 157,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-01-10T22:21:34Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\t\telf_phdr* header \u003d (elf_phdr*)((uint8*)fProgramHeaders + i * fProgramHeaderSize);\n```",
      "range": {
        "startLine": 156,
        "startChar": 0,
        "endLine": 157,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "1f50908c5733497c478d073780864ba342f22a5f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "531ddd3e_ab114f2e",
        "filename": "src/kits/debug/Image.cpp",
        "patchSetId": 1
      },
      "lineNbr": 159,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-01-10T22:21:34Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\t\t\t\u0026\u0026 (header-\u003ep_offset + header-\u003ep_filesz) \u003e symbol-\u003est_value) {\n```",
      "range": {
        "startLine": 159,
        "startChar": 0,
        "endLine": 159,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "1f50908c5733497c478d073780864ba342f22a5f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "807f138d_b36f3333",
        "filename": "src/kits/debug/Image.cpp",
        "patchSetId": 1
      },
      "lineNbr": 331,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-01-10T22:21:34Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\telf_phdr* header \u003d (elf_phdr*)((uint8*)fProgramHeaders + i * fProgramHeaderSize);\n```",
      "range": {
        "startLine": 330,
        "startChar": 0,
        "endLine": 331,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "1f50908c5733497c478d073780864ba342f22a5f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb39bdcd_b790f6da",
        "filename": "src/kits/debug/SymbolLookup.cpp",
        "patchSetId": 1
      },
      "lineNbr": 562,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-01-10T22:21:34Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\nSymbolLookup::LoadedImage::LoadedImage(SymbolLookup* symbolLookup, const image_t* image,\n\tint32 symbolCount)\n```",
      "range": {
        "startLine": 561,
        "startChar": 0,
        "endLine": 562,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "1f50908c5733497c478d073780864ba342f22a5f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "53fa8244_b901afb9",
        "filename": "src/kits/debug/SymbolLookup.cpp",
        "patchSetId": 1
      },
      "lineNbr": 605,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-01-10T22:21:34Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tconst elf_region_t* textRegion \u003d fImage-\u003eregions; // local\n```",
      "range": {
        "startLine": 605,
        "startChar": 0,
        "endLine": 605,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "1f50908c5733497c478d073780864ba342f22a5f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0a59e8cc_89f893de",
        "filename": "src/kits/debug/SymbolLookup.cpp",
        "patchSetId": 1
      },
      "lineNbr": 686,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-01-10T22:21:34Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\t\t\t\u0026\u0026 (region-\u003efdstart + region-\u003efdsize) \u003e symbol-\u003est_value) {\n```",
      "range": {
        "startLine": 686,
        "startChar": 0,
        "endLine": 686,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "1f50908c5733497c478d073780864ba342f22a5f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}