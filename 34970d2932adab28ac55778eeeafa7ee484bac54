{
  "comments": [
    {
      "key": {
        "uuid": "7e9f0054_ac1bbdfd",
        "filename": "src/add-ons/kernel/file_systems/xfs/Debug.h",
        "patchSetId": 4
      },
      "lineNbr": 12,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-08-19T17:12:44Z",
      "side": 1,
      "message": "This shouldn\u0027t be left enabled in the checked in code.",
      "revId": "34970d2932adab28ac55778eeeafa7ee484bac54",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ee1cba3_28b87f1a",
        "filename": "src/add-ons/kernel/file_systems/xfs/Debug.h",
        "patchSetId": 4
      },
      "lineNbr": 12,
      "author": {
        "id": 1000287
      },
      "writtenOn": "2021-06-15T03:20:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7e9f0054_ac1bbdfd",
      "revId": "34970d2932adab28ac55778eeeafa7ee484bac54",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3265839d_60c3efcd",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 4
      },
      "lineNbr": 159,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-08-19T17:12:44Z",
      "side": 1,
      "message": "Is this buffer actually necessary? As far as I can tell, it\u0027s only ever used during GetFromDisk(), and then (partially) copied into fNode. Unless the inode size has the potential to be very large, the buffer could just be allocated on the stack in GetFromDisk() directly, or alternatively, read_pos() in ReadFromDisk() can read into fNode directly, assuming len is constrained to INODE_CORE_UNLINKED_BYTES first. This would eliminate both the need to new/delete it, and the memcpy.",
      "revId": "34970d2932adab28ac55778eeeafa7ee484bac54",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e6a9479_9b0277ff",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 4
      },
      "lineNbr": 159,
      "author": {
        "id": 1000183
      },
      "writtenOn": "2020-08-23T09:08:44Z",
      "side": 1,
      "message": "This buffer is quite important. inodeSize is always larger than the INODE_CORE as there is always information that is present after di_next_unlinked.\nfNode is only a part of the inode. It basically stores the metadata of the Inode (basically xfs_ino_t). The data of the inode comes really from what is after fNode.\nWe can\u0027t have this in stack because this is used a lot by the directory classes. It needs to be a member attribute.",
      "parentUuid": "3265839d_60c3efcd",
      "revId": "34970d2932adab28ac55778eeeafa7ee484bac54",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1bf2c02_315fe2d3",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 4
      },
      "lineNbr": 159,
      "author": {
        "id": 1000183
      },
      "writtenOn": "2021-06-15T16:21:04Z",
      "side": 1,
      "message": "Did I right this at 3AM? :P\nAnyway, to put it in short, I think BStackOrHeap could be used here. The reason why I used heap here is because in B+Tree dirs the size of the inode would be too large for the stack to hold.\nConsidering the fact that this function will be used by ALL types of directories, for smaller inode sizes (Short form, leaf, node dirs), need not be allocated on heap. Hence BStackOrHeap is the way to go imo.",
      "parentUuid": "2e6a9479_9b0277ff",
      "revId": "34970d2932adab28ac55778eeeafa7ee484bac54",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "51f7d41a_645c8321",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 4
      },
      "lineNbr": 159,
      "author": {
        "id": 1000287
      },
      "writtenOn": "2021-06-18T05:07:32Z",
      "side": 1,
      "message": "Hi, \nI got problems here.\n- Actually, fBuffer was allocated in init(), and delete[] in ~Inode(), so when I use BStackOrHeapArray\u003cchar, StackSize\u003e fBuffer(inodeSize) here(the same place as before, in init()); I think I should not call delete[] fBuffer in ~Inode() anymore, but when will fBuffer be deleted, will it be what we need here?\n- How to set patameter \u0027StackSize\u0027, it depends what?\n- Besides, I do #include \u003cStackOrHeapArray.h\u003e in file system_dependencies.h but it seems things didn\u0027t work, jam reminds me ‘BStackOrHeapArray’ was not declared.",
      "parentUuid": "c1bf2c02_315fe2d3",
      "revId": "34970d2932adab28ac55778eeeafa7ee484bac54",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2154f680_99d465a2",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 4
      },
      "lineNbr": 159,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2021-06-20T20:03:48Z",
      "side": 1,
      "message": "Hi,\n\nBStackOrHeapArray will release the memory automatically when it goes out of scope (when the Inode is deleted) so you don\u0027t need to do anything special for that.\n\nStackSize defines the maximum size that can be allocated directly on the stack. The idea of BStackOrHeapArray is to reserve some space on the stack to do fast allocations, and switch to the heap if it turns out the allocation has to be larger than that space.\n\nAnyway, I think the existing code is fine here, I\u0027m not sure BStackOrHeapArray would be a very useful change here.",
      "parentUuid": "51f7d41a_645c8321",
      "revId": "34970d2932adab28ac55778eeeafa7ee484bac54",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "458cd407_402a778a",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 4
      },
      "lineNbr": 159,
      "author": {
        "id": 1000183
      },
      "writtenOn": "2021-06-21T17:37:58Z",
      "side": 1,
      "message": "I have a question here. How do you think a good StackSize could be decided?\nThere could be a lot of inodes not taking much space, like small directories and files. This is just a heuristic though. So I guess if Yi feels comfortable with the API he could go ahead? I am not familiar with this one so I can\u0027t comment on it.",
      "parentUuid": "2154f680_99d465a2",
      "revId": "34970d2932adab28ac55778eeeafa7ee484bac54",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "605fb57c_800837eb",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 4
      },
      "lineNbr": 159,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2021-06-21T20:22:03Z",
      "side": 1,
      "message": "The inode size depends only on the filesystem. You could look at the default inode size generated by mkfs and use that here. This way, anything that size or smaller will be allocated inline on the stack, anything larger will be allocated externally.",
      "parentUuid": "458cd407_402a778a",
      "revId": "34970d2932adab28ac55778eeeafa7ee484bac54",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e28cd1e_c9ef027c",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 4
      },
      "lineNbr": 159,
      "author": {
        "id": 1000287
      },
      "writtenOn": "2021-06-22T15:26:00Z",
      "side": 1,
      "message": "Done\nI think now it has become a optimization issue, right?\nSo I guess we can consider this issue later. For one thing, if BStackOrheap will help a lot need to be tested/determined. For another, if indeed, we can wait a  chance to do the same work all at once. Because the other parts of xfs may also need to change to BStackOrHeap in this way.",
      "parentUuid": "605fb57c_800837eb",
      "revId": "34970d2932adab28ac55778eeeafa7ee484bac54",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87a5d108_e8b476f9",
        "filename": "src/add-ons/kernel/file_systems/xfs/kernel_interface.cpp",
        "patchSetId": 4
      },
      "lineNbr": 333,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-08-19T17:12:44Z",
      "side": 1,
      "message": "Missing implementation? This should be freeing the cookie at least.",
      "revId": "34970d2932adab28ac55778eeeafa7ee484bac54",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b579379_6341edbb",
        "filename": "src/add-ons/kernel/file_systems/xfs/kernel_interface.cpp",
        "patchSetId": 4
      },
      "lineNbr": 333,
      "author": {
        "id": 1000183
      },
      "writtenOn": "2020-08-23T09:08:44Z",
      "side": 1,
      "message": "freeing the cookie is handled by another hook that we have, \"xfs_free_cookie\".\nI looked up what BFS, ext2, btrfs do. They simply return B_OK.",
      "parentUuid": "87a5d108_e8b476f9",
      "revId": "34970d2932adab28ac55778eeeafa7ee484bac54",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a8934ed_102a0893",
        "filename": "src/add-ons/kernel/file_systems/xfs/kernel_interface.cpp",
        "patchSetId": 4
      },
      "lineNbr": 333,
      "author": {
        "id": 1000287
      },
      "writtenOn": "2021-06-15T03:20:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0b579379_6341edbb",
      "revId": "34970d2932adab28ac55778eeeafa7ee484bac54",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6ade968f_99275549",
        "filename": "src/add-ons/kernel/file_systems/xfs/kernel_interface.cpp",
        "patchSetId": 4
      },
      "lineNbr": 469,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-08-19T17:12:44Z",
      "side": 1,
      "message": "Same.",
      "revId": "34970d2932adab28ac55778eeeafa7ee484bac54",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b045838e_3eb0aa37",
        "filename": "src/add-ons/kernel/file_systems/xfs/kernel_interface.cpp",
        "patchSetId": 4
      },
      "lineNbr": 469,
      "author": {
        "id": 1000183
      },
      "writtenOn": "2020-08-23T09:08:44Z",
      "side": 1,
      "message": "Same as above.",
      "parentUuid": "6ade968f_99275549",
      "revId": "34970d2932adab28ac55778eeeafa7ee484bac54",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": false
    }
  ]
}