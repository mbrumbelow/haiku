{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c65c26c6_e523bd06",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2025-02-06T00:46:47Z",
      "side": 1,
      "message": "This is just an experiment to see if it works better (or worse) than ACPICA. At this point I have no intent on switching us away from ACPICA unless this proves to solve many problems.",
      "revId": "7d0afffef03178878ce23924e4ef152fb1059158",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb7cc199_4f80bd0b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2025-02-06T10:04:28Z",
      "side": 1,
      "message": "This looks nice and seems to match Haiku code better. I tried to check where global lock handling is done but didn\u0027t see it. Is that all done by UACPI?",
      "revId": "7d0afffef03178878ce23924e4ef152fb1059158",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5890413_728e976e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000743
      },
      "writtenOn": "2025-02-06T10:05:25Z",
      "side": 1,
      "message": "If you mean field accesses from AML it is done by uACPI internally of course.",
      "parentUuid": "fb7cc199_4f80bd0b",
      "revId": "7d0afffef03178878ce23924e4ef152fb1059158",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6692ea1_7500859e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000743
      },
      "writtenOn": "2025-02-06T10:08:27Z",
      "side": 1,
      "message": "See https://github.com/uACPI/uACPI/blob/master/source/mutex.c#L18",
      "parentUuid": "a5890413_728e976e",
      "revId": "7d0afffef03178878ce23924e4ef152fb1059158",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3ba69683_084d8676",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2025-02-06T13:56:30Z",
      "side": 1,
      "message": "Yes, thanks for the link. Looks good!",
      "parentUuid": "e6692ea1_7500859e",
      "revId": "7d0afffef03178878ce23924e4ef152fb1059158",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9e1dab6_b780319c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-02-06T18:18:30Z",
      "side": 1,
      "message": "d-tatianin: since you\u0027re here (hello!) a few general questions/comments about uACPI:\n\n1. This is just a hobby project for you (and other contributors), correct? Or am I wrong and this is being used commercially as well?\n\n(I guess if uACPI ever became unmaintained and we didn\u0027t have the person-power to maintain it, then it wouldn\u0027t be such a big deal to switch back to ACPICA anyway.)\n\n2. Based on the current \"notable projects\" table in the README, I think Haiku would be the biggest adopter by far. We don\u0027t know what our install base and DAU/MAU actually is (because we don\u0027t collect telemetry at all :D) but based on past bug reports and interaction with other OSes, it\u0027s at least in the thousands. (In porting WiFi drivers from FreeBSD, we\u0027ve encountered and fixed bugs in hardware combinations that apparently nobody ever ran FreeBSD on, for context.)\n\nSo, in other words, I would expect that (again, if we actually merge this change and adopt uACPI) there would be an influx of bug reports for odd hardware and strange corner-cases. (A recent change to the ACPICA glue for ARM64 exposed a bunch of things here already, even without changing ACPICA itself.) We should prepare for this on our end by adding easy ways to collect dumps of AML and other such things, of course. And depending on what time people have here we may be able to help with bugfixing, but there\u0027s not so many of us who work on Haiku (I\u0027m the only paid developer at present, and I don\u0027t know a whole lot about ACPI.)\n\n3. How is the support for sleep states, if any? (Haiku doesn\u0027t have this yet, but it\u0027s a big TODO list item, so it would be good to know where uACPI is on that front at least.)\n\n4. All that being said: Thanks to you (and the other contributors) for writing uACPI! Just based on the README and glancing at the source code, it looks like it is indeed an improvement over ACPICA, and if we get a leg up over even Linux in ACPI compatibility by adopting it, that would be pretty cool.",
      "revId": "7d0afffef03178878ce23924e4ef152fb1059158",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3404f8b4_5c248cb7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000743
      },
      "writtenOn": "2025-02-06T19:00:44Z",
      "side": 1,
      "message": "Hi there!\n\n1. Basically yes! Although I\u0027ve been working on it for over two years now, so I\u0027d like to think of it as more than just a hobby project (in regards to the quality etc. I\u0027d like to keep).\n\n2. That\u0027s definitely true. ReactOS is currently also in the process of switching to uACPI, and they even made an NT-native driver that replaces the native (Windows 10) Acpi.sys driver entirely: https://www.youtube.com/watch?v\u003dgUEzkglsXn4 That said I do expect bugs to be discovered, especially from a more \"power-user\" OS like Haiku, and I\u0027d be happy to assist with fixing them.\n\n3. Pretty good! There\u0027s a hobby OS that supports suspend-to-ram (S3) via uACPI that worked just fine on real hw that we tested. Also a ReactOS maintainer has been daily driving uACPI (with Windows) on their relatively modern laptop (I think it was a framework(?)) without noticing any differences vs the native driver, and of course having it fully suspend and resume many times just fine.\n\n4. Thanks for the kind words!",
      "parentUuid": "c9e1dab6_b780319c",
      "revId": "7d0afffef03178878ce23924e4ef152fb1059158",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1067f139_03f68b57",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2025-02-16T16:16:54Z",
      "side": 1,
      "message": "This is as far as I got so far. Sorry for the delay in updating it, I\u0027ve had a busy week at work coming back from the coding sprint.\n\nAnyway, at the moment this doesn\u0027t build because we need a replacement for get_next_entry and get_next_device. I\u0027m not sure if these can be replaced by walk_resources or if other iteration methods from uacpi are needed.\n\nAnother problem is code outside of the bus_manager accessing uacpi APIs directly (in the interrupt controller mainly). But it is related to these same iteration functions, so, probably both issues can be fixed at the same time.\n\nAs a result this isn\u0027t compiling yet, and I have not done any testing.",
      "parentUuid": "c65c26c6_e523bd06",
      "revId": "7d0afffef03178878ce23924e4ef152fb1059158",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b81a23fa_56188d8d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000743
      },
      "writtenOn": "2025-02-22T13:17:06Z",
      "side": 1,
      "message": "\u003e Anyway, at the moment this doesn\u0027t build because we need a replacement for get_next_entry and get_next_device. I\u0027m not sure if these can be replaced by walk_resources or if other iteration methods from uacpi are needed.\n\nAn alternative to `AcpiGetNextObject` is now merged into uACPI, see `uacpi_namespace_node_next{_typed}`.",
      "parentUuid": "1067f139_03f68b57",
      "revId": "7d0afffef03178878ce23924e4ef152fb1059158",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dbe56deb_ea95b17b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2025-05-01T21:41:28Z",
      "side": 1,
      "message": "Code is fully compiling now. Still completely untested, I\u0027ll have a try at booting it tomorrow. I probably got a few things wrong.\n\nCurrently the ACPI module interface tries to abstract things away from the underlying implementation, but this leads to redefining a lot of types (callbacks, enums) to be the same as uacpi types. In some cases they can be just forward declared, but not always. For now I used casts, but I\u0027m not happy about it because it degrades type safety. I think it would be better to just use uacpi definitions all around and not redefine our own types on top of it.\n\nIn the existing code we also have a mix of interfaces: either ACPIPrivate.h (direct method calls inside the ACPI module), ACPI.h (calls throug function pointers using the kernel module interface), and acpi.h (for userspace and used in a few other places).\n\nuacpi opaque types don\u0027t go so well with the module interface (the getter and setter functions have to either be part of the module interface, or compiled inside each module). I think I didn\u0027t get that right yet.",
      "parentUuid": "b81a23fa_56188d8d",
      "revId": "7d0afffef03178878ce23924e4ef152fb1059158",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2c7aafb8_9dad7361",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2025-05-01T21:41:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3404f8b4_5c248cb7",
      "revId": "7d0afffef03178878ce23924e4ef152fb1059158",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "990e2045_0f7a1c08",
        "filename": "src/add-ons/kernel/bus_managers/acpi/arch/x86/arch_init.cpp",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-02-06T00:39:47Z",
      "side": 1,
      "message": "If we\u0027re going to seriously consider switching to uACPI, maybe we can ask upstream if they\u0027d take this?",
      "revId": "7d0afffef03178878ce23924e4ef152fb1059158",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "703c0a14_b3229475",
        "filename": "src/add-ons/kernel/bus_managers/acpi/arch/x86/arch_init.cpp",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2025-02-06T00:46:47Z",
      "side": 1,
      "message": "I will ask them for help with the missing parts when I\u0027m done with the easy changes.",
      "parentUuid": "990e2045_0f7a1c08",
      "revId": "7d0afffef03178878ce23924e4ef152fb1059158",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "370458ae_f734e5f7",
        "filename": "src/add-ons/kernel/bus_managers/acpi/arch/x86/arch_init.cpp",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1000743
      },
      "writtenOn": "2025-02-06T10:32:11Z",
      "side": 1,
      "message": "How is haiku booted on BIOS? Does the boot protocol it uses not provide the RSDP pointer?",
      "parentUuid": "703c0a14_b3229475",
      "revId": "7d0afffef03178878ce23924e4ef152fb1059158",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1822f74e_5777b207",
        "filename": "src/add-ons/kernel/bus_managers/acpi/arch/x86/arch_init.cpp",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-02-06T18:06:52Z",
      "side": 1,
      "message": "It looks like we do find the pointer but we don\u0027t pass it to the kernel. We already have a facility for that in EFI but we don\u0027t use it under BIOS.\n\nAdded a change to do that, tested and working: https://review.haiku-os.org/c/haiku/+/8941\n\nSo indeed we don\u0027t need a \"find root pointer\" facility then.",
      "parentUuid": "370458ae_f734e5f7",
      "revId": "7d0afffef03178878ce23924e4ef152fb1059158",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5a541878_983f4f39",
        "filename": "src/add-ons/kernel/bus_managers/acpi/arch/x86/arch_init.cpp",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2025-02-16T16:16:54Z",
      "side": 1,
      "message": "Removed all of this in the new version of the changeset, thanks!",
      "parentUuid": "1822f74e_5777b207",
      "revId": "7d0afffef03178878ce23924e4ef152fb1059158",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e85a7320_5f93d064",
        "filename": "src/add-ons/kernel/bus_managers/acpi/arch/x86/arch_init.cpp",
        "patchSetId": 1
      },
      "lineNbr": 164,
      "author": {
        "id": 1000743
      },
      "writtenOn": "2025-02-06T09:42:45Z",
      "side": 1,
      "message": "If you\u0027re going to use object_create, don\u0027t forget to object_unref later",
      "revId": "7d0afffef03178878ce23924e4ef152fb1059158",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9d512cc5_91c1b4a1",
        "filename": "src/add-ons/kernel/bus_managers/acpi/arch/x86/arch_init.cpp",
        "patchSetId": 1
      },
      "lineNbr": 164,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2025-02-16T16:16:54Z",
      "side": 1,
      "message": "Not needed anymore thanks to your other suggestion",
      "parentUuid": "e85a7320_5f93d064",
      "revId": "7d0afffef03178878ce23924e4ef152fb1059158",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a68b62a_da8e854a",
        "filename": "src/add-ons/kernel/bus_managers/acpi/arch/x86/arch_init.cpp",
        "patchSetId": 1
      },
      "lineNbr": 168,
      "author": {
        "id": 1000743
      },
      "writtenOn": "2025-02-06T09:42:45Z",
      "side": 1,
      "message": "`uacpi_set_interrupt_model(apic_available() ? UACPI_INTERRUPT_MODEL_IOAPIC : UACPI_INTERRUPT_MODEL_PIC);`",
      "revId": "7d0afffef03178878ce23924e4ef152fb1059158",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "14eea1ae_464a9dba",
        "filename": "src/add-ons/kernel/bus_managers/acpi/arch/x86/arch_init.cpp",
        "patchSetId": 1
      },
      "lineNbr": 168,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2025-02-16T16:16:54Z",
      "side": 1,
      "message": "Done, thanks!",
      "parentUuid": "1a68b62a_da8e854a",
      "revId": "7d0afffef03178878ce23924e4ef152fb1059158",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6763adb4_b95c9bae",
        "filename": "src/system/kernel/arch/generic/acpi_irq_routing_table.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1029,
      "author": {
        "id": 1000743
      },
      "writtenOn": "2025-02-06T09:47:24Z",
      "side": 1,
      "message": "Same idea as ACPICA, resources are variable length, you must use `UACPI_NEXT_RESOURCE`, or just add the length field manually. Basically same as the old code.",
      "revId": "7d0afffef03178878ce23924e4ef152fb1059158",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7c2b8fd3_9431eca1",
        "filename": "src/system/kernel/arch/generic/acpi_irq_routing_table.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1029,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2025-02-16T16:21:49Z",
      "side": 1,
      "message": "I had missed that, it should be good now.",
      "parentUuid": "6763adb4_b95c9bae",
      "revId": "7d0afffef03178878ce23924e4ef152fb1059158",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}