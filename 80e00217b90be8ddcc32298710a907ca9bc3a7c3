{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9f7b81b9_573a7508",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2022-04-28T21:24:22Z",
      "side": 1,
      "message": "Perhaps it should be called acpi_irq_routing_table?",
      "revId": "80e00217b90be8ddcc32298710a907ca9bc3a7c3",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5df9a935_7313ec04",
        "filename": "src/system/kernel/arch/generic/irq_routing_table.cpp",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-04-29T17:27:41Z",
      "side": 1,
      "message": "I\u0027d remove the ifdef from the cpp file and have a define for the 16 and the 0 in build config.",
      "revId": "80e00217b90be8ddcc32298710a907ca9bc3a7c3",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7f9a06a_74a95654",
        "filename": "src/system/kernel/arch/generic/irq_routing_table.cpp",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2022-04-29T19:10:16Z",
      "side": 1,
      "message": "Eh, personally I prefer the ifdef.",
      "parentUuid": "5df9a935_7313ec04",
      "revId": "80e00217b90be8ddcc32298710a907ca9bc3a7c3",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca65cc1a_33600538",
        "filename": "src/system/kernel/arch/generic/irq_routing_table.cpp",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-04-29T20:46:47Z",
      "side": 1,
      "message": "The #if\u0027s in our code is almost all header guards, c-style calling conventions  and third party libraries. Better to use AchitectureRules, platform headers, arch-directories and Jamfiles.\n\n#if\u0027s tend to have compiler breakage as you do conditional compilation. It is hard to know what to implement for a port when you spread out logic all over the place.",
      "parentUuid": "f7f9a06a_74a95654",
      "revId": "80e00217b90be8ddcc32298710a907ca9bc3a7c3",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a8e3fdc_3507aff1",
        "filename": "src/system/kernel/arch/generic/irq_routing_table.cpp",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2022-04-29T20:52:25Z",
      "side": 1,
      "message": "Per-arch logic is already spread quite literally all over the place. See: VM, FreeBSD compat layer, PCI drivers, etc.\n\nI would put this in an #else #error so that it\u0027s clear what needs to be changed on other platforms.",
      "parentUuid": "ca65cc1a_33600538",
      "revId": "80e00217b90be8ddcc32298710a907ca9bc3a7c3",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7cf48a6b_cb70768a",
        "filename": "src/system/kernel/arch/generic/irq_routing_table.cpp",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-04-29T21:15:52Z",
      "side": 1,
      "message": "We have been trying to reduce it, so I guess we disagree. So perhaps someone should review.",
      "parentUuid": "5a8e3fdc_3507aff1",
      "revId": "80e00217b90be8ddcc32298710a907ca9bc3a7c3",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f76299fe_837d9d57",
        "filename": "src/system/kernel/arch/generic/irq_routing_table.cpp",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-06-21T19:29:54Z",
      "side": 1,
      "message": "I think the issue is deeper than this: while this code was written with ISA in mind initially, the idea is that some interrupts can already be used by other devices and can\u0027t simultaneously be used by PCI because they need different settings (edge or level triggered, etc) at the interrupt controller level.\n\nThere is nothing there that is specific to ISA or x86, a similar situation could happen on other hardware as well.\n\nThe thing that\u0027s specific to ISA here is that there is no reliable way to know which interrupts are used by ISA devices, so the code does:\n\n- assume the first 16 interrupts are reserved\n- unless the BIOS already configured one of the devices to use one of them\n\nPossibly this can be extracted into a separate function that is a bit less mixed in with the code, and then we can more easily plug interrupt constraints from other busses and architectures.",
      "parentUuid": "7cf48a6b_cb70768a",
      "revId": "80e00217b90be8ddcc32298710a907ca9bc3a7c3",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}