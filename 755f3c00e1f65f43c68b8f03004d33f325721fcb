{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ba9c2ca8_71012a55",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2023-06-07T20:11:57Z",
      "side": 1,
      "message": "Looks good enough to merge to me. I prefer to have ARM WIP code in tree and do more PR\u0027s. Just a bit of nitpick..",
      "revId": "755f3c00e1f65f43c68b8f03004d33f325721fcb",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ece3a007_751a1226",
        "filename": "headers/private/kernel/arch/arm/arm_mmu.h",
        "patchSetId": 2
      },
      "lineNbr": 63,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-06-08T11:09:37Z",
      "side": 1,
      "message": "a comment with a link to the corresponding documentation would be helpful here\n\nI guess it is https://developer.arm.com/documentation/ddi0406/b/System-Level-Architecture/Virtual-Memory-System-Architecture--VMSA-/Translation-tables/Translation-table-entry-formats\n\nand the \"L2\" in the define means we must look at second level descriptors\n\nWe should also be careful that the S bit is used for something else (disabling caches) and that will be needed, what\u0027s the plan here?\n\nAlso I don\u0027t really understand from the code or the commit message what a \"dirty bit modifier\" actually is. Maybe you can elaborate on that and on why it is needed?",
      "revId": "755f3c00e1f65f43c68b8f03004d33f325721fcb",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28c08b86_1b031f39",
        "filename": "headers/private/kernel/arch/arm/arm_mmu.h",
        "patchSetId": 2
      },
      "lineNbr": 63,
      "author": {
        "id": 1000341
      },
      "writtenOn": "2023-06-10T14:45:24Z",
      "side": 1,
      "message": "The phrase Dirty Bit Modifier is taken from ARMv8 where it indicates that the page is writeable and AP[2] shall be interpreted as an inverted dirty flag.\n\nAfter reading up on the page table format a bit more, I think we should enable TEX remap and then it would free up TEX[2:1] for use by the operating system. So e.g. TEX[2] could be used as swdbm flag.",
      "parentUuid": "ece3a007_751a1226",
      "revId": "755f3c00e1f65f43c68b8f03004d33f325721fcb",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "47037c2c_ed1114e1",
        "filename": "headers/private/kernel/arch/arm/arm_mmu.h",
        "patchSetId": 2
      },
      "lineNbr": 63,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-06-11T10:50:47Z",
      "side": 1,
      "message": "Yes, now we are in a configuration that is explicitly allowed by ARM documentation:\n\nhttps://developer.arm.com/documentation/ddi0406/b/System-Level-Architecture/Virtual-Memory-System-Architecture--VMSA-/Memory-region-attributes/Memory-region-attribute-descriptions-when-TEX-remap-is-enabled?lang\u003den#BEICACHE \"The OS managed translation table bits\"",
      "parentUuid": "28c08b86_1b031f39",
      "revId": "755f3c00e1f65f43c68b8f03004d33f325721fcb",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "caf07be8_a28399df",
        "filename": "headers/private/kernel/arch/arm/arm_mmu.h",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-06-08T11:09:37Z",
      "side": 1,
      "message": "It\u0027s confusing to change the define here, since it is now modifying bits that are not part of the AP flag, and so it doesn\u0027t really match the constant name anymore?",
      "revId": "755f3c00e1f65f43c68b8f03004d33f325721fcb",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d34dd93_33550fe1",
        "filename": "headers/private/kernel/arch/arm/arm_mmu.h",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 1000341
      },
      "writtenOn": "2023-06-10T14:45:24Z",
      "side": 1,
      "message": "That\u0027s a valid observation... perhaps rename it to ARM_MMU_L2_FLAG_KRW?",
      "parentUuid": "caf07be8_a28399df",
      "revId": "755f3c00e1f65f43c68b8f03004d33f325721fcb",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64d62356_b27d5a0c",
        "filename": "headers/private/kernel/arch/arm/arm_mmu.h",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-06-11T10:50:47Z",
      "side": 1,
      "message": "I think I would do two \"layers\" of defined: one strictly following the bit names as defined in the spec, and another one (perhaps with \"HAIKU\" in the define names) with the combinations we commonly use, defined in terms of the first layer.\n\nSo, something like this:\n\n    #define ARM_MMU_L2_FLAG_HAIKU_SWDBM ARM_MMU_L2_FLAG_TEX2\n    #define ARM_MMU_L2_FLAG_HAIKU_KERNEL_RW (ARM_MMU_L2_FLAG_TEX2 | ARM_MMU_L2_FLAG_AP0)",
      "parentUuid": "3d34dd93_33550fe1",
      "revId": "755f3c00e1f65f43c68b8f03004d33f325721fcb",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b37dc7a8_450668a8",
        "filename": "src/system/kernel/arch/arm/arch_int.cpp",
        "patchSetId": 2
      },
      "lineNbr": 329,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2023-06-07T20:11:57Z",
      "side": 1,
      "message": "Name for the magic variable",
      "range": {
        "startLine": 329,
        "startChar": 24,
        "endLine": 329,
        "endChar": 30
      },
      "revId": "755f3c00e1f65f43c68b8f03004d33f325721fcb",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff4fbec1_4cb7db84",
        "filename": "src/system/kernel/arch/arm/arch_int.cpp",
        "patchSetId": 2
      },
      "lineNbr": 329,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-06-11T10:50:47Z",
      "side": 1,
      "message": "It should be something like:\n\n    (ARM_FSR_FS_MASK | ARM_FSR_LPAE_MASK)\n    \nFSR register format is described here: https://documentation-service.arm.com/static/5f8db1f7f86e16515cdba55c?token\u003d",
      "parentUuid": "b37dc7a8_450668a8",
      "range": {
        "startLine": 329,
        "startChar": 24,
        "endLine": 329,
        "endChar": 30
      },
      "revId": "755f3c00e1f65f43c68b8f03004d33f325721fcb",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}