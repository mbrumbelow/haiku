{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "fe866bdf_53ea7cc7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2022-02-25T23:08:36Z",
      "side": 1,
      "message": "1. Various parts of the kernel simply do not compile with GCC 2 anymore at all; the FreeBSD drivers have been upgraded and now make use of C99 features at the very least, and packagefs likely does not either following the Zstd changes (which were the initial motivation to stop compiling the kernel with GCC 2.) I don\u0027t know what the advantage of having this change in is, then.\n\n2. This removes one of the initializations.",
      "revId": "1cb98d38077138555098972109a187b3d28fd4ad",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c426ee4_12aa6ce6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000038
      },
      "writtenOn": "2022-02-25T23:28:19Z",
      "side": 1,
      "message": "That part does get compiled if you try building in vanilla Haiku 32 bit.  It breaks the build as is.\n\nThe initializer is implied, the constructor for that \"csi\" sub-struct will get called as part of the diri constructor since it is a full structure, not a pointer.  Not that it does anything, same as the {} field init.",
      "parentUuid": "fe866bdf_53ea7cc7",
      "revId": "1cb98d38077138555098972109a187b3d28fd4ad",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81965911_ba5bd6ee",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000038
      },
      "writtenOn": "2022-02-26T23:46:12Z",
      "side": 1,
      "message": "Say, why does FAT get compiled using GCC2 in the default Haiku OS build?  Maybe a Jam rule needs to be changed, if FAT is not actually used.",
      "revId": "1cb98d38077138555098972109a187b3d28fd4ad",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b9a16f8_0f379a4e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000038
      },
      "writtenOn": "2022-02-27T17:38:35Z",
      "side": 1,
      "message": "Added a footnote about this patch to bug #17568 which is about getting 32 bit Haiku OS compiles working again.",
      "revId": "1cb98d38077138555098972109a187b3d28fd4ad",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4bc96fb1_afd017be",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-02-28T21:05:08Z",
      "side": 1,
      "message": "The problem is not in building for the kernel, this file is also used when building the \"anyboot\" tool used to generate anyboot images. This tool is built with the host compiler, which is still gcc2 on 32bit Haiku. So we need to keep this gcc2-safe for now.\n\nIs it time to stop making gcc2 the default compiler on 32-bit Haiku? Or add a special case for this in our buildsystem? As a short term measure we should still merge this.",
      "parentUuid": "2c426ee4_12aa6ce6",
      "revId": "1cb98d38077138555098972109a187b3d28fd4ad",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e12b1ee_f484636a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2022-02-28T21:09:01Z",
      "side": 1,
      "message": "You can\u0027t build a full Haiku system with GCC2 anymore, we use the new GCC for parts of GCC2 libroot. So we may as well require a newer GCC for building the host tools...",
      "parentUuid": "4bc96fb1_afd017be",
      "revId": "1cb98d38077138555098972109a187b3d28fd4ad",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4589999d_9a152b87",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2022-02-28T21:09:01Z",
      "side": 1,
      "message": "\u003e The initializer is implied, the constructor for that \"csi\" sub-struct will get called \n\nThe \"csi\" structure does not have a constructor, but it does have pointers. \"\u003d {}\" will clear it to 0, whereas otherwise it will be left uninitialized. So that is actually important as far as I can tell.",
      "parentUuid": "4bc96fb1_afd017be",
      "revId": "1cb98d38077138555098972109a187b3d28fd4ad",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "425ae7e5_0b606807",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000038
      },
      "writtenOn": "2022-02-28T21:23:24Z",
      "side": 1,
      "message": "\u003e \"\u003d {}\" will clear it to 0, whereas otherwise it will be left uninitialized. So that is actually important as far as I can tell.\n\nSomewhat obscure meaning, must be new semantics in a later compiler.  {0, 0, 0} would be more obvious.  I\u0027ll upload a patch to clear it in the diri constructor.",
      "parentUuid": "4e12b1ee_f484636a",
      "revId": "1cb98d38077138555098972109a187b3d28fd4ad",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}