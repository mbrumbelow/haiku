{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0667ae62_f8675acd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-08-15T18:19:42Z",
      "side": 1,
      "message": "I don\u0027t see any way fTeam could be NULL. It\u0027s initialized in the constructor from the current thread state, which is guaranteed to be valid while the thread is alive.",
      "revId": "486a57f75cd36898e6e80a5cae5aaa289136a26b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fdc23157_50cd2b83",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2023-08-15T18:55:53Z",
      "side": 1,
      "message": "It is never NULL, but gcc thinks it can be and produces a warning, either we need to turn off warnings or convince gcc. So it is a gcc problem.",
      "parentUuid": "0667ae62_f8675acd",
      "revId": "486a57f75cd36898e6e80a5cae5aaa289136a26b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b366c142_a57c4481",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-08-15T18:56:51Z",
      "side": 1,
      "message": "There may be a way to have an attribute to indicate it won\u0027t be NULL.",
      "parentUuid": "fdc23157_50cd2b83",
      "revId": "486a57f75cd36898e6e80a5cae5aaa289136a26b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5cec67e8_408ad719",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2023-08-15T18:59:11Z",
      "side": 1,
      "message": "I could not find one, and using attributes seems very much overkill, when a null check is simple and works! Do we need this level of review for such a simple thing?",
      "parentUuid": "b366c142_a57c4481",
      "revId": "486a57f75cd36898e6e80a5cae5aaa289136a26b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3991437c_689038a7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-08-15T18:59:59Z",
      "side": 1,
      "message": "Because we could wind up adding NULL checks in all sorts of places where they\u0027re not needed.\n\nThe attribute could be added on the variable in the team structure itself and handle all cases across the kernel for this variable. I thought there is a \"nonnull\" attribute?",
      "parentUuid": "5cec67e8_408ad719",
      "revId": "486a57f75cd36898e6e80a5cae5aaa289136a26b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c416228_310261f0",
        "filename": "src/system/kernel/debug/core_dump.cpp",
        "patchSetId": 1
      },
      "lineNbr": 781,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2023-08-15T19:02:42Z",
      "side": 1,
      "message": "In any case (I would prefer an attribute, too), the spacing is messed up here.",
      "revId": "486a57f75cd36898e6e80a5cae5aaa289136a26b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "adae5398_2bbdb448",
        "filename": "src/system/kernel/debug/core_dump.cpp",
        "patchSetId": 1
      },
      "lineNbr": 781,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2023-08-15T19:09:49Z",
      "side": 1,
      "message": "Ok so does anyone know the attribute for it? And does it work on all gcc/llvm?\n\nAnother idea might be to use a reference, but I guess that is only modern c++?",
      "parentUuid": "6c416228_310261f0",
      "revId": "486a57f75cd36898e6e80a5cae5aaa289136a26b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6113c3d8_f2174c43",
        "filename": "src/system/kernel/debug/core_dump.cpp",
        "patchSetId": 1
      },
      "lineNbr": 781,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-08-15T19:10:39Z",
      "side": 1,
      "message": "Actually, a reference would be good here. fTeam could indeed be \u0026, that\u0027d work fine with even C++98. And it doesn\u0027t matter anyway as the kernel is never compiled with GCC2 anymore.",
      "parentUuid": "adae5398_2bbdb448",
      "revId": "486a57f75cd36898e6e80a5cae5aaa289136a26b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3cab1e26_b344f6f7",
        "filename": "src/system/kernel/debug/core_dump.cpp",
        "patchSetId": 1
      },
      "lineNbr": 781,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2023-08-15T19:14:27Z",
      "side": 1,
      "message": "Then I\u0027ll try that, We don\u0027t seem to have a single nonnull in our code, only freebsd compat that \":#define __nonnull(x)     __attribute__((__nonnull__(x)))\"",
      "parentUuid": "6113c3d8_f2174c43",
      "revId": "486a57f75cd36898e6e80a5cae5aaa289136a26b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fe531f8_5362e9f7",
        "filename": "src/system/kernel/debug/core_dump.cpp",
        "patchSetId": 1
      },
      "lineNbr": 781,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2023-08-15T19:28:56Z",
      "side": 1,
      "message": "fCurrentThread is the only other pointer, and I assume we never intend for it to be NULL either?",
      "parentUuid": "3cab1e26_b344f6f7",
      "revId": "486a57f75cd36898e6e80a5cae5aaa289136a26b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}