{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0667ae62_f8675acd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-08-15T18:19:42Z",
      "side": 1,
      "message": "I don\u0027t see any way fTeam could be NULL. It\u0027s initialized in the constructor from the current thread state, which is guaranteed to be valid while the thread is alive.",
      "revId": "486a57f75cd36898e6e80a5cae5aaa289136a26b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fdc23157_50cd2b83",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2023-08-15T18:55:53Z",
      "side": 1,
      "message": "It is never NULL, but gcc thinks it can be and produces a warning, either we need to turn off warnings or convince gcc. So it is a gcc problem.",
      "parentUuid": "0667ae62_f8675acd",
      "revId": "486a57f75cd36898e6e80a5cae5aaa289136a26b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b366c142_a57c4481",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-08-15T18:56:51Z",
      "side": 1,
      "message": "There may be a way to have an attribute to indicate it won\u0027t be NULL.",
      "parentUuid": "fdc23157_50cd2b83",
      "revId": "486a57f75cd36898e6e80a5cae5aaa289136a26b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5cec67e8_408ad719",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2023-08-15T18:59:11Z",
      "side": 1,
      "message": "I could not find one, and using attributes seems very much overkill, when a null check is simple and works! Do we need this level of review for such a simple thing?",
      "parentUuid": "b366c142_a57c4481",
      "revId": "486a57f75cd36898e6e80a5cae5aaa289136a26b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3991437c_689038a7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-08-15T18:59:59Z",
      "side": 1,
      "message": "Because we could wind up adding NULL checks in all sorts of places where they\u0027re not needed.\n\nThe attribute could be added on the variable in the team structure itself and handle all cases across the kernel for this variable. I thought there is a \"nonnull\" attribute?",
      "parentUuid": "5cec67e8_408ad719",
      "revId": "486a57f75cd36898e6e80a5cae5aaa289136a26b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e06eac7_98bb0d7e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2023-08-15T20:52:17Z",
      "side": 1,
      "message": "Converting to a reference still gives same error, so I guess we need to try with an attribute.\n\nHere is what gcc says, with Team\u0026 fTeam and using . instead of -\u003e everywhere and fixing comparisons between pointers and references..\n\nIn file included from ../headers/private/kernel/core_dump.h:11,\n                 from ../src/system/kernel/debug/core_dump.cpp:7:\nIn function \u0027int32 atomic_or(int32*, int32)\u0027,\n    inlined from \u0027status_t {anonymous}::CoreDumper::Dump(const char*, bool)\u0027 at ../src/system/kernel/debug/core_dump.cpp:787:17,\n    inlined from \u0027status_t core_dump_write_core_file(const char*, bool)\u0027 at ../src/system/kernel/debug/core_dump.cpp:1600:25:\n../headers/os/support/SupportDefs.h:300:33: error: \u0027unsigned int __atomic_fetch_or_4(volatile void*, unsigned int, int)\u0027 writing 4 bytes into a region of size 0 overflows the destination [-Werror\u003dstringop-overflow\u003d]\n  300 |         return __atomic_fetch_or(value, orValue, __ATOMIC_SEQ_CST);\n      |                ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn function \u0027status_t core_dump_write_core_file(const char*, bool)\u0027:\ncc1plus: note: destination object is likely at address zero",
      "revId": "486a57f75cd36898e6e80a5cae5aaa289136a26b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83b5323b_03f3fc16",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2023-08-15T20:55:58Z",
      "side": 1,
      "message": "It got mangled, here is a pastebin instead: https://gist.github.com/tqh/1cd0f1be4a6f761f077f4a1e28357c33#file-gistfile1-txt",
      "parentUuid": "4e06eac7_98bb0d7e",
      "revId": "486a57f75cd36898e6e80a5cae5aaa289136a26b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1f2177b3_db916d45",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2023-08-16T05:45:44Z",
      "side": 1,
      "message": "Are we running into this bug? https://gcc.gnu.org/bugzilla/show_bug.cgi?id\u003d104475",
      "revId": "486a57f75cd36898e6e80a5cae5aaa289136a26b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "efe6e948_b076cadf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2023-08-16T06:15:46Z",
      "side": 1,
      "message": "I\u0027m imagining the issue is that the GCC analyzer still thinks it could be null, because there is no null check when it is initialized. I don\u0027t know how deep the analyzer goes down the chain when it does its path analysis, but the underlying cause is that we assume it will never be null. Can that be fixed/validated deeper in the code?",
      "parentUuid": "83b5323b_03f3fc16",
      "revId": "486a57f75cd36898e6e80a5cae5aaa289136a26b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b4ec5e0_72a6b4c2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2023-08-16T16:15:10Z",
      "side": 1,
      "message": "Using reference didn\u0027t help. And I can\u0027t manage to apply the attr in any way that compiles. So the if still seems the only low effort way. I havn\u0027t seen any other error after the if, but it\u0027s a bootstrap build which fails on some bootstrap packages later so can\u0027t say it is the only place. The only other place I found good info on this bug is from our own tickets on when it happened before, but it didn\u0027t reference the code changed.\n\nI hope someone that wants a better solution can provide one, but until then I am blocked.",
      "parentUuid": "efe6e948_b076cadf",
      "revId": "486a57f75cd36898e6e80a5cae5aaa289136a26b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b2d52f3_e36f3dd8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-08-16T16:24:01Z",
      "side": 1,
      "message": "How doesn\u0027t the attribute work?",
      "parentUuid": "1b4ec5e0_72a6b4c2",
      "revId": "486a57f75cd36898e6e80a5cae5aaa289136a26b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "209813ee_429c87dc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2023-08-16T16:29:15Z",
      "side": 1,
      "message": "I have not managed to apply it in a way that compiles or does anything. I havn\u0027t found any example of how it should be done either.",
      "parentUuid": "9b2d52f3_e36f3dd8",
      "revId": "486a57f75cd36898e6e80a5cae5aaa289136a26b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "69253868_8e741691",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2023-08-17T05:40:17Z",
      "side": 1,
      "message": "Why not just keep the null check? If you really want to tell the compiler that this can never happen, you can use if `(fTeam \u003d\u003d nullptr) __builtin_unreachable()`, but this does not seem to be performance critical code, and there may be bugs/changes to the promises of a thread having a valid pointer to a team in the future so you might as well just error out.\n\nIf I were to make a guess why it did not work converting it into a reference, I am thinking this is because the source of the reference still can be nullptr: the source is `thread_get_current_thread()-\u003eteam` which is still a pointer, and therefore can still be validly a nullptr. That would be different if `thread_get_current_thread()-\u003eteam` would be a reference I think, because then within this compilation unit there is a reasonable chance it is indeed never nullptr.",
      "revId": "486a57f75cd36898e6e80a5cae5aaa289136a26b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3c2c179_dafa100a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2023-08-17T06:13:52Z",
      "side": 1,
      "message": "That is what I argued initially. I honestly don\u0027t think it is healthy to downvote votes unless you can provide a better solution. Even the smallest change nowadays is a massive discussion to convince others. If someone wants a better solution I would argue we should just add a TODO: and get things done instead.",
      "parentUuid": "69253868_8e741691",
      "revId": "486a57f75cd36898e6e80a5cae5aaa289136a26b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "300bcc8e_7a96bc01",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2023-08-17T06:45:31Z",
      "side": 1,
      "message": "I think it was worthwhile to explore this further, but you did and this is where we are ending up.",
      "parentUuid": "a3c2c179_dafa100a",
      "revId": "486a57f75cd36898e6e80a5cae5aaa289136a26b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a6a6b658_d3fc4db1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2023-08-18T10:33:12Z",
      "side": 1,
      "message": "But that is what happened: a better solution was suggested; therefore, the down-vote is perfectly fine IMO. If you cannot make it work, you can just say so, and ask to reevaluate the votes for that reason. What\u0027s wrong with that?\n\nDevelopment is really not just about getting things done, but to provide adequate solutions.\n\nI have removed my vote, as I\u0027m still not satisfied with the outcome (even your solution would certainly be acceptable), but I don\u0027t have the time to look into the suggested better solution either :-)",
      "parentUuid": "300bcc8e_7a96bc01",
      "revId": "486a57f75cd36898e6e80a5cae5aaa289136a26b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1365cdd9_44d45680",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-08-18T12:12:10Z",
      "side": 1,
      "message": "Just for future reference, you can use some markdown in the comments here, a triple backquote should do it:\n\n```\nIn file included from ../headers/private/kernel/core_dump.h:11,\n                 from ../src/system/kernel/debug/core_dump.cpp:7:\nIn function \u0027int32 atomic_or(int32*, int32)\u0027,\n    inlined from \u0027status_t {anonymous}::CoreDumper::Dump(const char*, bool)\u0027 at ../src/system/kernel/debug/core_dump.cpp:787:17,\n    inlined from \u0027status_t core_dump_write_core_file(const char*, bool)\u0027 at ../src/system/kernel/debug/core_dump.cpp:1600:25:\n../headers/os/support/SupportDefs.h:300:33: error: \u0027unsigned int __atomic_fetch_or_4(volatile void*, unsigned int, int)\u0027 writing 4 bytes into a region of size 0 overflows the destination [-Werror\u003dstringop-overflow\u003d]\n  300 |         return __atomic_fetch_or(value, orValue, __ATOMIC_SEQ_CST);\n      |                ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn function \u0027status_t core_dump_write_core_file(const char*, bool)\u0027:\ncc1plus: note: destination object is likely at address zero\n```\n\nand you can check how it looks before submitting your comments.\n\n(now it will still be available when the pastebin expires)",
      "parentUuid": "209813ee_429c87dc",
      "revId": "486a57f75cd36898e6e80a5cae5aaa289136a26b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3ad7533_224db1f1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-08-18T12:12:10Z",
      "side": 1,
      "message": "There seem to be several related reports to gcc, here is a bug that links to several more: https://gcc.gnu.org/bugzilla/show_bug.cgi?id\u003d106297\n\nThey indeed suggest adding an explicit `__builtin_unreachable()` to hint that the NULL case is not possible, so that could be an option.\n\nWe can also disable this warning until gcc gets better at it and the issues get fixed. Either just for this piece of code (with a pragma) or globally in build/jam/ArchitectureRules.\n\nIf there is just this one instance, maybe the NULL check and return is fine, until a next version of gcc starts complaining that fTeam can\u0027t possibly be NULL in this place. With the comment it is clear enough that this is a workaround for GCC problems and we can remove it later.",
      "parentUuid": "1f2177b3_db916d45",
      "revId": "486a57f75cd36898e6e80a5cae5aaa289136a26b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "263200c8_336b498a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2023-08-18T12:45:15Z",
      "side": 1,
      "message": "The solutions I could find was to do a local var, but that would not work since we use it concurrently. So if was a better solution than that.\n\nI think that I expect that when you downvote, you should at least be able to provide something actionable and that is why it is frustrating, because to me it basically boilwd down to \"I don\u0027t like if\u0027s\".\n\nI suggest we go for a if (..) __builtin_unreachable(), as it seems more readable, than the others to me.\n\nAnother thing would maybe be to just remove fThread and call the function to get the thread from fTeam. Might help gcc do the right thing...\n\nAnyway I think we are overthinking this a lot which is my other argument for that we should get more things done then ending up like this in each PR.",
      "parentUuid": "b3ad7533_224db1f1",
      "revId": "486a57f75cd36898e6e80a5cae5aaa289136a26b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ad9e976_8e8e8454",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-08-18T14:54:38Z",
      "side": 1,
      "message": "I have to agree with waddlesplash that the NULL check is strange here, since, by reading the code, it shouldn\u0027t be possible to have this variable set to NULL.\n\nIt is also a bit strange that we don\u0027t see the problem on other architectures?\n\nSo it was worth the double and triple-checking to make sure we are not missing anything and this really is a gcc bug, and that there isn\u0027t really a better way to avoid it.\n\nI think we have checked enough now, and I am satisfied with how it is now. You have a +2 and a -1 (not a -2) so it is fine to merge as it is. The discussion added a bit more context (such as links to bugreports and other things you tried and didn\u0027t work) which I think is sufficient to resolve waddlesplash\u0027s concerns.",
      "parentUuid": "263200c8_336b498a",
      "revId": "486a57f75cd36898e6e80a5cae5aaa289136a26b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c416228_310261f0",
        "filename": "src/system/kernel/debug/core_dump.cpp",
        "patchSetId": 1
      },
      "lineNbr": 781,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2023-08-15T19:02:42Z",
      "side": 1,
      "message": "In any case (I would prefer an attribute, too), the spacing is messed up here.",
      "revId": "486a57f75cd36898e6e80a5cae5aaa289136a26b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "adae5398_2bbdb448",
        "filename": "src/system/kernel/debug/core_dump.cpp",
        "patchSetId": 1
      },
      "lineNbr": 781,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2023-08-15T19:09:49Z",
      "side": 1,
      "message": "Ok so does anyone know the attribute for it? And does it work on all gcc/llvm?\n\nAnother idea might be to use a reference, but I guess that is only modern c++?",
      "parentUuid": "6c416228_310261f0",
      "revId": "486a57f75cd36898e6e80a5cae5aaa289136a26b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6113c3d8_f2174c43",
        "filename": "src/system/kernel/debug/core_dump.cpp",
        "patchSetId": 1
      },
      "lineNbr": 781,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-08-15T19:10:39Z",
      "side": 1,
      "message": "Actually, a reference would be good here. fTeam could indeed be \u0026, that\u0027d work fine with even C++98. And it doesn\u0027t matter anyway as the kernel is never compiled with GCC2 anymore.",
      "parentUuid": "adae5398_2bbdb448",
      "revId": "486a57f75cd36898e6e80a5cae5aaa289136a26b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3cab1e26_b344f6f7",
        "filename": "src/system/kernel/debug/core_dump.cpp",
        "patchSetId": 1
      },
      "lineNbr": 781,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2023-08-15T19:14:27Z",
      "side": 1,
      "message": "Then I\u0027ll try that, We don\u0027t seem to have a single nonnull in our code, only freebsd compat that \":#define __nonnull(x)     __attribute__((__nonnull__(x)))\"",
      "parentUuid": "6113c3d8_f2174c43",
      "revId": "486a57f75cd36898e6e80a5cae5aaa289136a26b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fe531f8_5362e9f7",
        "filename": "src/system/kernel/debug/core_dump.cpp",
        "patchSetId": 1
      },
      "lineNbr": 781,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2023-08-15T19:28:56Z",
      "side": 1,
      "message": "fCurrentThread is the only other pointer, and I assume we never intend for it to be NULL either?",
      "parentUuid": "3cab1e26_b344f6f7",
      "revId": "486a57f75cd36898e6e80a5cae5aaa289136a26b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}