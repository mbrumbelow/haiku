{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "40eeb4a4_e8f25677",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-03-08T14:27:06Z",
      "side": 1,
      "message": "I updated the blake2 reference code to the latest copy circa 2019.  It seemed to solve the gcc2 build issues and greatly reduced the warnings.",
      "revId": "3d39725c379f62ae769cc752aaacf1bca619a1ce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "74b48fc4_6e2f7223",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2022-03-09T06:59:44Z",
      "side": 1,
      "message": "I reviewed the public API mostly and made some remarks.\n\nI am also slightly skeptical whether this is ready to be public API. It does not have API documentation, and it feels slightly undercooked with the commented out methods in the public headers.\n\nAnyway, the latter point should not block the patch itself, just how we communicate about it.",
      "revId": "3d39725c379f62ae769cc752aaacf1bca619a1ce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0727fb5_3fe3d06d",
        "filename": "headers/os/crypto/Crypto.h",
        "patchSetId": 12
      },
      "lineNbr": 32,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2022-03-09T06:59:44Z",
      "side": 1,
      "message": "Where is BCrypto::SetKey() implemented?\n\nCan the key be nullptr/NULL? If not, then would a reference be better?\n\nIs it an output parameter? If not, then could you make it const?",
      "revId": "3d39725c379f62ae769cc752aaacf1bca619a1ce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c168202_16684b2a",
        "filename": "headers/os/crypto/Crypto.h",
        "patchSetId": 12
      },
      "lineNbr": 32,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-03-09T14:40:18Z",
      "side": 1,
      "message": "It\u0027s just in the headers.  The entire BCrypto set of calls is still undercooked / incomplete.\n\nI actually have some early / basic documentation locally for the Haiku book however.",
      "parentUuid": "c0727fb5_3fe3d06d",
      "revId": "3d39725c379f62ae769cc752aaacf1bca619a1ce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "414b69c9_b3823f6d",
        "filename": "headers/os/crypto/CryptoHash.h",
        "patchSetId": 12
      },
      "lineNbr": 42,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2022-03-09T06:59:44Z",
      "side": 1,
      "message": "Could this method have a const specifier? I think this might also have some downstream effects, but it looks read-only to me.",
      "revId": "3d39725c379f62ae769cc752aaacf1bca619a1ce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a5b39f1_9689e2f0",
        "filename": "headers/os/crypto/CryptoHash.h",
        "patchSetId": 12
      },
      "lineNbr": 42,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-03-09T14:40:18Z",
      "side": 1,
      "message": "Name returns the configured \"pretty\" algorithm name of BCryptoHash.  Indeed I think this could be improved (GetAlgorithm returning algorithm_type)",
      "parentUuid": "414b69c9_b3823f6d",
      "revId": "3d39725c379f62ae769cc752aaacf1bca619a1ce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c771ba15_3499ddf1",
        "filename": "headers/os/crypto/CryptoHash.h",
        "patchSetId": 12
      },
      "lineNbr": 42,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2022-03-09T15:21:59Z",
      "side": 1,
      "message": "I think we have a slight misunderstanding, I was just wondering if the declaration could be \nBString Name() const;\n\nI have no opinion on a more complex API, I think the use case is simple (mostly debugging I would image).",
      "parentUuid": "3a5b39f1_9689e2f0",
      "revId": "3d39725c379f62ae769cc752aaacf1bca619a1ce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5371ee3f_6388e539",
        "filename": "headers/os/crypto/CryptoHash.h",
        "patchSetId": 12
      },
      "lineNbr": 44,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2022-03-09T06:59:44Z",
      "side": 1,
      "message": "Looking at the implementation, the string parameter seems to be an input parameter only, so it should be const. Also it cannot be NULL, so would a reference be better?",
      "revId": "3d39725c379f62ae769cc752aaacf1bca619a1ce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "729ad198_08e14770",
        "filename": "headers/os/crypto/CryptoHash.h",
        "patchSetId": 12
      },
      "lineNbr": 44,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-03-09T14:40:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5371ee3f_6388e539",
      "revId": "3d39725c379f62ae769cc752aaacf1bca619a1ce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a670d709_8c56ed32",
        "filename": "headers/os/crypto/CryptoHash.h",
        "patchSetId": 12
      },
      "lineNbr": 46,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2022-03-09T06:59:44Z",
      "side": 1,
      "message": "Since the file parameter cannot be null, should it be a reference?",
      "revId": "3d39725c379f62ae769cc752aaacf1bca619a1ce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "af2e3a00_89a488fd",
        "filename": "headers/os/crypto/CryptoHash.h",
        "patchSetId": 12
      },
      "lineNbr": 46,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-03-09T14:40:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a670d709_8c56ed32",
      "revId": "3d39725c379f62ae769cc752aaacf1bca619a1ce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3195ecb_1b8ee77e",
        "filename": "headers/os/crypto/CryptoHash.h",
        "patchSetId": 12
      },
      "lineNbr": 49,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2022-03-09T06:59:44Z",
      "side": 1,
      "message": "Since hash cannot be NULL, should this input parameter be a reference instead? And also, could it be a const method?",
      "revId": "3d39725c379f62ae769cc752aaacf1bca619a1ce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "37b6c0fd_10bafb5a",
        "filename": "headers/os/crypto/CryptoHash.h",
        "patchSetId": 12
      },
      "lineNbr": 49,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-03-09T14:40:18Z",
      "side": 1,
      "message": "Done.  hash can\u0027t be const because it is modified by Result.",
      "parentUuid": "c3195ecb_1b8ee77e",
      "revId": "3d39725c379f62ae769cc752aaacf1bca619a1ce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6611175f_838a360c",
        "filename": "headers/os/crypto/CryptoHash.h",
        "patchSetId": 12
      },
      "lineNbr": 52,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2022-03-09T06:59:44Z",
      "side": 1,
      "message": "Could this be a const method?",
      "revId": "3d39725c379f62ae769cc752aaacf1bca619a1ce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c31f68aa_a42b27f2",
        "filename": "headers/os/crypto/CryptoHash.h",
        "patchSetId": 12
      },
      "lineNbr": 52,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-03-09T14:40:18Z",
      "side": 1,
      "message": "probably :-)",
      "parentUuid": "6611175f_838a360c",
      "revId": "3d39725c379f62ae769cc752aaacf1bca619a1ce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65ef1be6_98d17795",
        "filename": "src/kits/crypto/Jamfile",
        "patchSetId": 12
      },
      "lineNbr": 14,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2022-03-09T06:59:44Z",
      "side": 1,
      "message": "Is Crypto.cpp excluded for a reason?",
      "revId": "3d39725c379f62ae769cc752aaacf1bca619a1ce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3f425d38_aff55578",
        "filename": "src/kits/crypto/Jamfile",
        "patchSetId": 12
      },
      "lineNbr": 14,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-03-09T14:40:18Z",
      "side": 1,
      "message": "BCrypto doesn\u0027t do anything yet, just laying the groundwork :-)\n\nBCrpyto is for encryption.  BCryptoHash is for hashing.  BCryptoEncoding will be for things like base64",
      "parentUuid": "65ef1be6_98d17795",
      "revId": "3d39725c379f62ae769cc752aaacf1bca619a1ce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e2940fde_19d8079b",
        "filename": "src/kits/crypto/Jamfile",
        "patchSetId": 12
      },
      "lineNbr": 14,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2022-03-09T14:43:28Z",
      "side": 1,
      "message": "Base64 is in no way whatsoever cryptographic, something like that belongs in support kit or possibly text encoding.",
      "parentUuid": "3f425d38_aff55578",
      "revId": "3d39725c379f62ae769cc752aaacf1bca619a1ce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d58ed8f0_6d87418f",
        "filename": "src/kits/crypto/Jamfile",
        "patchSetId": 12
      },
      "lineNbr": 14,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2022-03-09T14:48:02Z",
      "side": 1,
      "message": "+1 Base64 is a binary format.",
      "parentUuid": "e2940fde_19d8079b",
      "revId": "3d39725c379f62ae769cc752aaacf1bca619a1ce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d6dd563d_7be69ec1",
        "filename": "src/kits/crypto/Jamfile",
        "patchSetId": 12
      },
      "lineNbr": 14,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-03-09T14:51:47Z",
      "side": 1,
      "message": "I know :-)  The point of the crypto kit is honestly to offer various data translations (hashing, encryption, encoding) of our native types (BString, etc) within a single kit.\n\nIf y\u0027all can think of a better name, please let me know.  I\u0027ve been trialing \"Alchemy kit to transmute data via encryption, encoding, hashing\", but support is low 😄\n\n\nAlso.. the support kit provides base64 encoding functions today (which is why this kit doesn\u0027t even try do that yet)",
      "parentUuid": "d58ed8f0_6d87418f",
      "revId": "3d39725c379f62ae769cc752aaacf1bca619a1ce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3c52bd92_f14df6e2",
        "filename": "src/kits/crypto/Jamfile",
        "patchSetId": 12
      },
      "lineNbr": 14,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2022-03-09T14:55:49Z",
      "side": 1,
      "message": "I really don\u0027t think it makes sense to mix in things that aren\u0027t crypto-related, that\u0027d just lead to needless confusion. About the only {en,de}coders that\u0027d make sense to include in this context are ASN.1 and possibly PEM given their heavy use in the various PKCS standards. That said, the cases where you\u0027d be decoding them directly are relatively rare, rather than asking the kit to perform an op for you (e.g. generate certificate, keypair, p12, etc.) with an input or output format of one or the other.",
      "parentUuid": "d6dd563d_7be69ec1",
      "revId": "3d39725c379f62ae769cc752aaacf1bca619a1ce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}