/*
* Copyright 2017-2018, Haiku. All rights reserved.
* Distributed under the terms of the MIT License.
*
* Authors:
*		Adrien Destugues <pulkomandy@pulkomandy.tk>
*/
#include "Lpstyl.h"

#include <GroupView.h>
#include <ListView.h>
#include <Window.h>


class DebugWindow: public BWindow
{
	public:
		DebugWindow()
			: BWindow(BRect(100, 100, 400, 400), "StyleWriter debug",
				B_DOCUMENT_WINDOW, 0)
		{
			BGroupLayout* group = new BGroupLayout(B_VERTICAL);
			SetLayout(group);
			fListView = new BListView("messages");
			AddChild(fListView);
		}

		void MessageReceived(BMessage* message)
		{
			if (message->what == 'DBGI')
			{
				BString text = message->FindString("text");
				fListView->AddItem(new BStringItem(text));
			}

			BWindow::MessageReceived(message);
		}

		void Log(BString description, const unsigned char* data = NULL,
			size_t length = 0)
		{
			for (size_t i = 0; i < length; i++) {
				description << " ";
				description << data[i];
			}

			BMessage message('DBGI');
			message.AddString("text", description);

			PostMessage(&message);
		}

	private:
		BListView* fListView;
};


LpstylDriver::LpstylDriver(BMessage* message, PrinterData* printerData,
	const PrinterCap* printerCap)
	: GraphicsDriver(message, printerData, printerCap)
{
	fDebugWindow = NULL;
}


bool
LpstylDriver::StartDocument()
{
	if (fDebugWindow == NULL)
		fDebugWindow = new DebugWindow();
	fDebugWindow->Show();
	fDebugWindow->Log("-- Start of document --");

	_EjectAndReset();
	_IdentifyPrinter();
	fCanPrintColors = _ColorCartridge();
	return true;
}


bool
LpstylDriver::StartPage()
{
	if (fPrinterType < kStyleWriter2400)
		_Write("nuA", 3);
	else
		_Write('L');
	return true;
}


bool
LpstylDriver::NextBand(BBitmap* bitmap, BPoint* offset)
{
	BString blah;
	blah.SetToFormat("Next band at %f %f", offset->x, offset->y);
	fDebugWindow->Log(blah);

	int page_height = GetPageHeight();

	// The printer expects buffers in CMYK (or just K, if printing greyscale)

	// Advance the cursor
	offset->y += bitmap->Bounds().Height();

	// Have we reached the end of the page yet?
	if (offset->y >= page_height)
	{
		offset->y = -1;
		offset->x = -1;
	}

	return true;
}


bool
LpstylDriver::EndPage(int page)
{
	BString blah;
	blah.SetToFormat("end of page %d", page);
	fDebugWindow->Log(blah);
	return true;
}


bool
LpstylDriver::EndDocument(bool success)
{
	//fDebugWindow->Quit();
	return true;
}


/** Eject the current page (if any) and reset the printer.
 */
void
LpstylDriver::_EjectAndReset(void)
{
	fDebugWindow->Log("Eject and Reset");
	_WriteFFFx('I');
	sleep(2);

	int s1 = 1;

	do {
		for (;;) {
			try {
				s1 = _GetStatus('1');
				break;
			} catch(const TransportException&) {
				continue;
			}
		}

		if (s1 == 1) {
			// Check for stylewriter1, where status 1 doesn't go to 0 on init.
			if (_GetStatus('2') == 0 && _GetStatus('B') == 0xa0)
				break;
		}
	} while (s1 == 1);
}


void
LpstylDriver::_IdentifyPrinter(void)
{
	fDebugWindow->Log("Identify printer");
	_Write('?');

	char smallBuf[32];
	int i = 0;
	for (i = 0; i < 31; i++) {
		smallBuf[i] = _Read();
		if (smallBuf[i] == 0x0D)
			break;
	}
	smallBuf[i] = 0;

	if (strcmp(smallBuf, "IJ10\x0D") == 0)
		fPrinterType = kStyleWriter;
	else if (strcmp(smallBuf, "SW\x0D") == 0)
		fPrinterType = kStyleWriter2;
	else if (strcmp(smallBuf, "SW3\x0D") == 0)
		fPrinterType = kStyleWriter3;
	else if (strcmp(smallBuf, "CS\x0D") == 0) {
		switch (_GetStatus('p'))
		{
			default:
			case 1:
				fPrinterType = kStyleWriter2400;
				break;
			case 2:
				fPrinterType = kStyleWriter2200;
				break;
			case 4:
				fPrinterType = kStyleWriter1500;
				break;
			case 5:
				fPrinterType = kStyleWriter2500;
				break;
		}
	}
}


bool
LpstylDriver::_ColorCartridge()
{
	fDebugWindow->Log("Detect color cartridge");
	_Write('D');
	unsigned char i = _GetStatus('H');
	return i & 0x80;
}


void
LpstylDriver::_Write(char data)
{
	fDebugWindow->Log("--> ", (unsigned char*)&data, 1);
	WriteSpoolChar(data);
}


void
LpstylDriver::_Write(const char* data, size_t length)
{
	fDebugWindow->Log("--> ", (unsigned char*)data, length);
	WriteSpoolData(data, length);
}


char
LpstylDriver::_Read()
{
	char read = ReadSpoolChar();

	fDebugWindow->Log("<-- ", (unsigned char*)&read, 1);

	return read;
}


/** Send a 4-byte command to the printer.
 *
 * These commands can be sent at any time, because their prefix is FFFFFF, a
 * sequence which can't be generated by the data compression algorithm
 */
void
LpstylDriver::_WriteFFFx(char x)
{
	char str[4];
	str[0] = str[1] = str[2] = 0xFF;
	str[3] = x;
	_Write(str, 4);
}


/** Get one of the printer status bytes.
 *
 * There are 3 status registers, 1, 2, and B. Each returns some different
 * information about the printer state.
 */
int
LpstylDriver::_GetStatus(char reg)
{
	fDebugWindow->Log("Read status register", (unsigned char*)&reg, 1);
	_WriteFFFx(reg);
	return _Read();
}
