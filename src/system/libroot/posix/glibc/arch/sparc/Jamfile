SubDir HAIKU_TOP src system libroot posix glibc arch sparc ;

SubDirSysHdrs $(HAIKU_TOP) src system libroot posix glibc include arch sparc ;
SubDirSysHdrs $(HAIKU_TOP) src system libroot posix glibc include arch generic ;
SubDirSysHdrs $(HAIKU_TOP) src system libroot posix glibc include ;
SubDirSysHdrs $(HAIKU_TOP) src system libroot posix glibc libio ;
SubDirSysHdrs $(HAIKU_TOP) src system libroot posix glibc stdlib ;
SubDirSysHdrs $(HAIKU_TOP) src system libroot posix glibc math ;
SubDirSysHdrs $(HAIKU_TOP) src system libroot posix glibc ;

SubDirHdrs $(HAIKU_TOP) src system libroot posix glibc arch generic ;

UsePrivateHeaders libroot ;

if $(OPTIM) = -O0 {
	OPTIM = -O ;
}

SubDirCcFlags -D_GNU_SOURCE -D_IEEE_LIBM -DPIC ;
SubDirAsFlags -DPIC ;

local genericSources =
	cmp.c dbl2mpn.c divrem.c
	mpn2dbl.c mpn2flt.c mpn2ldbl.c
	mul.c mul_n.c
	ldbl2mpn.c
	;

local architectureObject ;
for architectureObject in [ MultiArchSubDirSetup sparc ] {
	on $(architectureObject) {
		local architecture = $(TARGET_PACKAGING_ARCH) ;

		MergeObject <$(architecture)>posix_gnu_arch_$(TARGET_ARCH).o :
			add_n.S
			addmul_1.S

			mul_1.S
			lshift.S rshift.S
			sub_n.S
			submul_1.S

			$(genericSources)
			;

		SEARCH on [ FGristFiles $(genericSources) ]
			= [ FDirName $(HAIKU_TOP) src system libroot posix glibc arch
				generic ] ;
	}
}
