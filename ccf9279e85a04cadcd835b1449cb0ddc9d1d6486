{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "978336df_0f300c73",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2024-01-10T19:10:23Z",
      "side": 1,
      "message": "One more thing, I apologize if this is obvious an so doesn\u0027t need to be stated, but I don\u0027t think it is. If you have assigned B_NO_COMMAND_KEY to a shortcut it does not prevent the shortcut from being triggered when B_COMMAND_KEY (i.e. Alt) is held down, it simply ignores the modifier. So if you have a shortcut that triggers on Control for example, and you have both Control and Command (Alt) held down down, it _will_ trigger the shortcut since B_CONTROL is down. For all other shortcuts, we will not trigger the shortcut _unless_ B_COMMAND_KEY (Alt) is held down. Let\u0027s say you have a shortcut assigned to (B_NO_COMMAND_KEY | B_CONTROL_KEY) + T and you have another shortcut assigned to B_COMMAND_KEY + T. Which one wins if you have both Control and Command held down? The B_NO_COMMAND_KEY, i.e. Control+T shortcuts wins in this case.\n\nIf this were to be a problem we could disallow triggering B_NO_COMMAND_KEY shortcuts when B_COMMAND_KEY (Alt) is held down, but I don\u0027t think this is a problem, it\u0027s merely an idiosyncrasy of the precedence rule set in BWindow that you need to be aware of.",
      "revId": "ccf9279e85a04cadcd835b1449cb0ddc9d1d6486",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a35b0e9_effd9150",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2024-01-11T03:07:45Z",
      "side": 1,
      "message": "Is this also true for say cmd-s and ctrl-cmd-s, that cmd-s would win? If it is the same then this can stay but should be documented, otherwise this should be fixed. Personally I think fixing it everywhere would be nicer if it is but this likely won\u0027t be easy while keeping compatibility.",
      "parentUuid": "978336df_0f300c73",
      "revId": "ccf9279e85a04cadcd835b1449cb0ddc9d1d6486",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee67aaaf_6414cd6b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2024-01-11T04:54:33Z",
      "side": 1,
      "message": "I don\u0027t quite understand your example. What happens depends on what shortcuts are defined, ctrl-s would win over cmd-s if you have both defined in the app and both held, cmd-s loses. It is meant to work much the same way as it already does which is to be permissive. We match the first shortcut we find matching all the criteria even if you have extra modifiers not needed, in other words we\u0027re not strict with modifiers.\n\nBut there is a conflict introduced with this that shortcuts can be defined with command, another modifier, or command with another modifier. Since I check the non-command ones first, that\u0027s the one I go with, otherwise I check the command version. I have to choose which gets overridden one way or the other and effectively I already have. But we could change it to be the other way around with command overriding control instead if that works better.\n\nHowever I\u0027m not sure there is a bug to fix. We should not, we should allow the trigger to proceed with or without command even though that means the non-command version will trigger before the command version, and thus override it. There are more examples where it would hurt to disallow the shortcut with command held down than it would help to not trigger the shortcut, but I\u0027m not completely sure.\n\nConsidering that any non-command shortcuts we want we have to add in after this change, it makes sense that they should override the existing command version.\n\nPlease understand that this whole discussion only applies when you have overlapping modifiers held, so if you have just cmd or just ctrl held there\u0027s no conflict and no overrides. If you have both command and control held down though, then it has to make a decision, should it trigger the command or the control shortcut? If you have a shortcut that requires both command and control  that one is going to win over either cmd or ctrl versions of course.",
      "parentUuid": "5a35b0e9_effd9150",
      "revId": "ccf9279e85a04cadcd835b1449cb0ddc9d1d6486",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69113cb0_34b4b4ab",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2024-01-11T18:20:50Z",
      "side": 1,
      "message": "\u003e If you have both command and control held down though, then it has to make a decision, should it trigger the command or the control shortcut\n\nIMHO it should trigger neither; if there is a shortcut with both that should trigger, but otherwise nothing should be triggered.",
      "parentUuid": "ee67aaaf_6414cd6b",
      "revId": "ccf9279e85a04cadcd835b1449cb0ddc9d1d6486",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9a7f379_47322c5e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1000109
      },
      "writtenOn": "2024-01-12T21:08:30Z",
      "side": 1,
      "message": "\u003e IMHO it should trigger neither; if there is a shortcut with both that should trigger, but otherwise nothing should be triggered.\n\nI also think that the modifiers in the \"allowed modifiers\" list should match exactly (obviously it should ignore cap locks, num lock, etc.) If an extra modifier is pressed the shortcut should not match. This is how other systems work. It might be worth testing BeOS on this because if Haiku is currently more permissive I would think that is a bug. Unless it only happens with this patch, though that is still a bug here.\n\nLong term there should probably be a Hashmap which can quickly map the modifiers plus key to the shortcut.\n\nI believe this patch can be fixed to work like that by masking out `B_NO_COMMAND_KEY` when the shortcut is created and adjusting `PrepareModifiers` to not always tack on `B_COMMAND_KEY`. In the BWindow keyboard code the extra call to `_FindShortcut` with the addition of `| B_NO_COMMAND_KEY` can be removed. I said this in a previous comment but I guess it got lost in all the noise. The general idea is `B_NO_COMMAND_KEY` should just be a flag used when setting up the shortcut.",
      "parentUuid": "69113cb0_34b4b4ab",
      "revId": "ccf9279e85a04cadcd835b1449cb0ddc9d1d6486",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3c695ed8_ff4c444b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1000109
      },
      "writtenOn": "2024-01-12T21:21:36Z",
      "side": 1,
      "message": "One more clarification. Overall the difficulty in understanding and reviewing this code probably indicates it could use a good refactoring. Outside of this change.",
      "revId": "ccf9279e85a04cadcd835b1449cb0ddc9d1d6486",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "90120b14_657ed716",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2024-08-12T20:35:56Z",
      "side": 1,
      "message": "We match modifiers loosely same as mouse clicks, idk if we want to change this.",
      "parentUuid": "69113cb0_34b4b4ab",
      "revId": "ccf9279e85a04cadcd835b1449cb0ddc9d1d6486",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b626155c_42d6d3d3",
        "filename": "src/kits/interface/MenuItem.cpp",
        "patchSetId": 14
      },
      "lineNbr": 76,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2024-01-09T12:14:27Z",
      "side": 1,
      "message": "I would remove B_NO_COMMAND_KEY at this point (with the same change to the identical code in SetShortcut):\n\n    fModifiers \u003d (modifiers \u0026 ~(B_COMMAND_KEY |Â B_NO_COMMAND_KEY));\n\nIf we do this, the modification is contained to BMenuItem constructor and SetShortcut. Everything else works with \"normal\" modifiers and there is no need to change BWindow code. It would keep the change fully contained to BMenuItem, which is simpler, and easier to remove when we do an ABI compatibility break (we can make no-modifier the default and let people specify B_COMMAND_KEY explicitly when they want to, and possibly make it the default value for the constructor argument).\n\nIs there a reason to propagate B_NO_COMMAND_KEY inside BWindow shortcut handling that I\u0027m missing?",
      "revId": "ccf9279e85a04cadcd835b1449cb0ddc9d1d6486",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0b69cd7_52df5bab",
        "filename": "src/kits/interface/MenuItem.cpp",
        "patchSetId": 14
      },
      "lineNbr": 76,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2024-01-09T13:03:46Z",
      "side": 1,
      "message": "The changes to look for a no command shortcut on key press are necessary in BWindow.",
      "parentUuid": "b626155c_42d6d3d3",
      "revId": "ccf9279e85a04cadcd835b1449cb0ddc9d1d6486",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "759d9a10_d7059660",
        "filename": "src/kits/interface/MenuItem.cpp",
        "patchSetId": 14
      },
      "lineNbr": 76,
      "author": {
        "id": 1000109
      },
      "writtenOn": "2024-01-10T16:32:37Z",
      "side": 1,
      "message": "You *do* need the change in BWindow to move the shortcut checking out of the `if` which checks for B_COMMAND_KEY. But if you change this how Adrien suggests (which I have also mentioned) you should not need to reference B_NO_COMMAND_KEY in the BWindow keyboard handling. Though I think you also would need to change `AllowedModifiers` to not always add B_COMMAND_KEY.\n\nBecause this is a \"flag\", not an actual modifier, I think it will make things more sane if it is only referenced when the shortcut is created. Adding it in the keyboard handling only adds confusion. It also doubles the times that shortcuts are being searched.",
      "parentUuid": "a0b69cd7_52df5bab",
      "revId": "ccf9279e85a04cadcd835b1449cb0ddc9d1d6486",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2fdfdfd_d73ec7e1",
        "filename": "src/kits/interface/MenuItem.cpp",
        "patchSetId": 14
      },
      "lineNbr": 76,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2024-01-10T18:35:11Z",
      "side": 1,
      "message": "I\u0027m not trying to be difficult or contrary here but I\u0027m trying to say that Adrian is indeed missing something with his suggestion. B_NO_COMMAND_KEY is not a \"real\" shortcut, there is no B_NO_COMMAND_KEY on your keyboard to press. Here in BWindow we are looking for the shortcut and triggering on KeyDown. This is the only place that shortcuts get triggered an never in BMenuItem. So if you change this, you\u0027ll break the feature and this change can not, or at least should not be moved to BMenuItem since BMenuItem doesn\u0027t check for modifiers in KeyDown and there are two ways to add a shortcut, by adding a BMenuItem with a Shortcut assigned _or_ by adding the shortcut to BWindow (well your BWindow sub-class anyway).\n\nWhether you added a shortcut via BWindow::AddShortcut() or the BMenuItem constructor the shortcut is triggered here in BWindow and nowhere else, never in BMenuItem. BMenuItem only sets the shortcut, same as BWindow does making sure to set either B_NO_COMMAND_KEY or B_COMMAND_KEY.\n\nSo while there may be some confusion here, it absolutely must be implemented this way to work. We must check for B_NO_COMMAND_KEY in BWindow, we must look for a Shortcut with B_NO_COMMAND_KEY before we look for one with B_COMMAND_KEY.\n\nMaybe the shortcut system could be reworked to check in the BMenuItem::KeyDown method instead, but I don\u0027t think that\u0027s a good idea since BMenuItem may or may not be involved, while BWindow always is.\n\nI\u0027m not sure if this is clear from reading the code or not, but we don\u0027t actually assign B_NO_COMMAND_KEY when we set a shortcut. We look it and if it\u0027s there, we make sure that B_COMMAND_KEY is removed, but otherwise we set the shortcut modifiers _without_ B_NO_COMMAND_KEY assigned.\n\nSo when we check this in BWindow a similar thing happens, we tack B_NO_COMMAND_KEY on, but then we immediately remove it along with B_COMMAND_KEY, then look for the shortcut with the rest of the (allowed) modifiers to see if you have one, then if that doesn\u0027t find a shortcut we check to make sure that you have B_COMMAND_KEY held down (i.e. you are holding Alt) and then see if there\u0027s a shortcut.\n\nThis is a bit convoluted but it is necessary for backwards compatibility. The presence of the B_NO_COMMAND_KEY on a shortcut enables you to have a shortcut without B_COMMAND_KEY, in fact you cannot have B_COMMAND_KEY assigned to the shortcut. But B_NO_COMMAND_KEY is \"magic\" i.e. it doesn\u0027t get added.\n\nSo we have to check for a shortcut with B_NO_COMMAND_KEY _first_ then check for a shortcut while making sure you are holding B_COMMAND_KEY _second_. It must happen in that order to work correctly.\n\nI hope the above makes sense and I\u0027m not missing something obvious.",
      "parentUuid": "759d9a10_d7059660",
      "revId": "ccf9279e85a04cadcd835b1449cb0ddc9d1d6486",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33fdb630_6e712e7c",
        "filename": "src/kits/interface/MenuItem.cpp",
        "patchSetId": 14
      },
      "lineNbr": 76,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2024-01-10T19:25:25Z",
      "side": 1,
      "message": "I see now, while everything I said above is true in BWindow, it looks like I messed it up a bit here in BMenuItem. BMenuItem should be calling BWindow::Shortcut::PrepareModifiers() here and then everything should work correctly.",
      "parentUuid": "b2fdfdfd_d73ec7e1",
      "revId": "ccf9279e85a04cadcd835b1449cb0ddc9d1d6486",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46794dca_697aa4ab",
        "filename": "src/kits/interface/MenuItem.cpp",
        "patchSetId": 14
      },
      "lineNbr": 76,
      "author": {
        "id": 1000109
      },
      "writtenOn": "2024-01-12T21:08:30Z",
      "side": 1,
      "message": "\u003e I\u0027m not sure if this is clear from reading the code or not, but we don\u0027t actually assign B_NO_COMMAND_KEY when we set a shortcut. We look it and if it\u0027s there, we make sure that B_COMMAND_KEY is removed, but otherwise we set the shortcut modifiers without B_NO_COMMAND_KEY assigned.\n\nThe code commented on here absolutely keeps B_NO_COMMAND_KEY in the modifiers unless it was changed how Adrien suggested. The only thing masked out is B_COMMAND_KEY.",
      "parentUuid": "33fdb630_6e712e7c",
      "revId": "ccf9279e85a04cadcd835b1449cb0ddc9d1d6486",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e948ce7_fbe3c3f5",
        "filename": "src/kits/interface/MenuItem.cpp",
        "patchSetId": 14
      },
      "lineNbr": 76,
      "author": {
        "id": 1000109
      },
      "writtenOn": "2024-01-12T21:21:36Z",
      "side": 1,
      "message": "To save John some time responding, the above is true but B_NO_COMMAND_KEY is later filtered out in the BWindow::Shortcut constructor since it calls PrepareModifiers. So this code is probably fine except it might cause confusion for a developer to inspect the modifiers in BMenuItem and see that extra flag.",
      "parentUuid": "46794dca_697aa4ab",
      "revId": "ccf9279e85a04cadcd835b1449cb0ddc9d1d6486",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "152d0792_f024aba7",
        "filename": "src/kits/interface/MenuItem.cpp",
        "patchSetId": 14
      },
      "lineNbr": 76,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2024-08-12T20:41:14Z",
      "side": 1,
      "message": "I double-checked this, we do in fact need to pass the B_NO_COMMAND_KEY modifier on to the BWindow for shortcuts without B_COMMAND_KEY to trigger. So unfortunately the code simplification you suggest won\u0027t work.",
      "parentUuid": "9e948ce7_fbe3c3f5",
      "revId": "ccf9279e85a04cadcd835b1449cb0ddc9d1d6486",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6f091c7_3f3e2590",
        "filename": "src/kits/interface/Window.cpp",
        "patchSetId": 14
      },
      "lineNbr": 3734,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2024-01-10T12:37:48Z",
      "side": 1,
      "message": "this is the opposite (with command first, and then without)",
      "revId": "ccf9279e85a04cadcd835b1449cb0ddc9d1d6486",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd03207e_b6fc346b",
        "filename": "src/kits/interface/Window.cpp",
        "patchSetId": 14
      },
      "lineNbr": 3734,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2024-01-10T13:34:49Z",
      "side": 1,
      "message": "I am willing to fix problems hereâ¦ but this does what it says, it tacks B_NO_COMMAND_KEY on since itâs a fake shortcut, you couldnât possibly have pressed the âno commandâ key, looks for a shortcut with it. if it doesnât find a shortcut that way, it will look for a shortcut with B_COMMAND_KEY instead. In this method we are concerned with the modifier keys the user has currently activated.\n\nSide note: I found a bug where if you have Caps Lock on and you push CMD+S to save, it wonât let you push ESC to close the save dialog. But this was also true in Beta4. Somewhere in Tracker weâre not filtering out Caps Lock from modifiers as we should before checking for the esc key to close.",
      "parentUuid": "d6f091c7_3f3e2590",
      "revId": "ccf9279e85a04cadcd835b1449cb0ddc9d1d6486",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1c9b2beb_382dd463",
        "filename": "src/kits/interface/Window.cpp",
        "patchSetId": 14
      },
      "lineNbr": 3734,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2024-01-11T08:11:44Z",
      "side": 1,
      "message": "Sorry, it looks like I was just tired and confused and misread something.",
      "parentUuid": "fd03207e_b6fc346b",
      "revId": "ccf9279e85a04cadcd835b1449cb0ddc9d1d6486",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f12ee11_02d5d2c2",
        "filename": "src/kits/interface/Window.cpp",
        "patchSetId": 14
      },
      "lineNbr": 3734,
      "author": {
        "id": 1000109
      },
      "writtenOn": "2024-01-12T21:08:30Z",
      "side": 1,
      "message": "I still don\u0027t think we need both calls to `_FindShortcut` if `PrepareModifiers` was fixed to just be `return (modifiers \u0026 AllowedModifiers())`, along with masking out B_NO_COMMAND_KEY in the the BMenuItem constructor, as mentioned in another comment.\n\nAgain, I have fixed this before in only a slightly different way and I am quite sure it worked correctly.",
      "parentUuid": "1c9b2beb_382dd463",
      "revId": "ccf9279e85a04cadcd835b1449cb0ddc9d1d6486",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4419324_0483ee9c",
        "filename": "src/kits/interface/Window.cpp",
        "patchSetId": 14
      },
      "lineNbr": 3777,
      "author": {
        "id": 1000109
      },
      "writtenOn": "2024-01-12T21:08:30Z",
      "side": 1,
      "message": "These last 7 lines could just be:\n\n```\n// TODO: convert keys to the encoding of the target view\n\nreturn foundShortcut;\n```\n\nAKA `if (thing) return true; return false;` can always become `return thing;`",
      "revId": "ccf9279e85a04cadcd835b1449cb0ddc9d1d6486",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}