{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ce999d79_e03f748e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 26
      },
      "lineNbr": 0,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2023-12-31T21:33:15Z",
      "side": 1,
      "message": "A couple of issues updating menu items has been fixed.",
      "revId": "c60d00906d3025ec57d37d6c25c21235928e2dce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e708a16_b1728e4f",
        "filename": "src/kits/tracker/FilePanelPriv.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1134,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2024-01-06T15:25:12Z",
      "side": 1,
      "message": "I don\u0027t understand why this and like methods can\u0027t be inside the Shortcuts class itself, only one for all the different menu updates. The only thing it seems to need to know is information like whether we are in Trash or not, and that can be easily passed in. That would save a lot of code, and reduce the church this patch adds.",
      "revId": "c60d00906d3025ec57d37d6c25c21235928e2dce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a79f3df_2415b615",
        "filename": "src/kits/tracker/FilePanelPriv.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1134,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2024-01-06T16:42:48Z",
      "side": 1,
      "message": "It can’t or at least shouldn’t be in TSshortcuts because each container window subclass implements it’s own version of the method, FilePanel being an example of this.",
      "parentUuid": "4e708a16_b1728e4f",
      "revId": "c60d00906d3025ec57d37d6c25c21235928e2dce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a861b8e5_c3688683",
        "filename": "src/kits/tracker/FilePanelPriv.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1134,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2024-01-06T16:46:15Z",
      "side": 1,
      "message": "But *why*? What about this method is actually specific to the FilePanel? It only handles some shortcuts and not others but so what?\n\nswitch() is cheap (very cheap, usually, as it gets compiled to something like a \"jump table\".) Having one big switch() with all possible menu items in it will be very fast, it doesn\u0027t make sense to break things out into specialized update methods just to have smaller switch()es.",
      "parentUuid": "1a79f3df_2415b615",
      "revId": "c60d00906d3025ec57d37d6c25c21235928e2dce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "994f4cf4_c88c72c1",
        "filename": "src/kits/tracker/FilePanelPriv.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1134,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2024-01-06T16:57:47Z",
      "side": 1,
      "message": "Because FilePanel has a different set of menu options than BContainerWindow and so it updates the items it has. Why doesn’t it make sense to break down into specialized update methods? The design is more flexible this way. It’s already very fast. I don’t understand why you want to combine the update method, they are broken out deliberately so that I can override whatever I need to in the future.",
      "parentUuid": "a861b8e5_c3688683",
      "revId": "c60d00906d3025ec57d37d6c25c21235928e2dce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b223167_c37a2253",
        "filename": "src/kits/tracker/FilePanelPriv.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1134,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2024-01-06T17:05:55Z",
      "side": 1,
      "message": "\u003e Because FilePanel has a different set of menu options than BContainerWindow and so it updates the items it has. \n\nRight, but why duplicate code? The point of this change is to consolidate shortcut handlign, no? So, it seems to make sense to combine all these loops/switches into one big one rather than having basically identical code multiple times in multiple classes.\n\n\u003e It’s already very fast.\n\nI know. What I am suggesting will make it ever so infintesimally slower, not faster.\n\n\u003e they are broken out deliberately so that I can override whatever I need to in the future.\n\nBut does anything need to be actually overridden at present? If not, and you don\u0027t have any particular things that you *know* will need to be overridden, why not merge them all now and break out in the future only as-needed?\n\nIf something needs to really be overridden, though, wouldn\u0027t it seem to make more sense to have that menu item not managed by TShortcuts at all?",
      "parentUuid": "994f4cf4_c88c72c1",
      "revId": "c60d00906d3025ec57d37d6c25c21235928e2dce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf067089_0f988117",
        "filename": "src/kits/tracker/FilePanelPriv.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1134,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2024-01-06T17:17:21Z",
      "side": 1,
      "message": "Duplicate code makes it more flexible. Shortcuts are handled differently for example in FilePanel you only get a New Folder, not New \u003e menu. More can be broken out in the future. For example the Printers directory could get its own BContainerWindow subclass that updates the unique shortcuts in that mode like Make Active Printer.\n\nAm I supposed to update every possible menu item that somebody might choose to use? it’s better IMHO to update just the items you need to in each case.",
      "parentUuid": "9b223167_c37a2253",
      "revId": "c60d00906d3025ec57d37d6c25c21235928e2dce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2ff9dcc_25868624",
        "filename": "src/kits/tracker/FilePanelPriv.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1134,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2024-01-06T17:24:41Z",
      "side": 1,
      "message": "\u003e Duplicate code makes it more flexible. \n\nNo, it doesn\u0027t? If the code is duplicated, then it\u0027s just duplicated. When/if we need separate methods, then we can break them out, and then the code will be... different and thus non-duplicate.\n\n\u003e Am I supposed to update every possible menu item that somebody might choose to use? \n\nThe Shortcuts class should have a single method that loops over all menu items, and updates all the ones that TShortcuts itself has methods to create, manage, etc. Obviously any menu items not created/updated by TShortcuts should be ignored. So, yes.",
      "parentUuid": "bf067089_0f988117",
      "revId": "c60d00906d3025ec57d37d6c25c21235928e2dce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18f9b53c_d3cb42f8",
        "filename": "src/kits/tracker/FilePanelPriv.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1134,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2024-01-06T17:26:21Z",
      "side": 1,
      "message": "If TShortcuts has one method which is (say) 200 lines of code to do that, then we need not have (say) 1 method each in 5 other classes which are 75 lines each. Much less code!",
      "parentUuid": "a2ff9dcc_25868624",
      "revId": "c60d00906d3025ec57d37d6c25c21235928e2dce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1be08797_dc0ad76b",
        "filename": "src/kits/tracker/FilePanelPriv.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1134,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2024-01-06T18:32:51Z",
      "side": 1,
      "message": "Yes, we need to have 5 other classes to make it flexible, sorry, but we\u0027re working at different aims, you want to reduce the code size count, I want to make this flexible and extensible. I am not interested in reducing code size for reducing code sizes sake.",
      "parentUuid": "18f9b53c_d3cb42f8",
      "revId": "c60d00906d3025ec57d37d6c25c21235928e2dce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2617479b_fa1b7fe3",
        "filename": "src/kits/tracker/FilePanelPriv.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1134,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2024-01-06T21:10:12Z",
      "side": 1,
      "message": "I don\u0027t understand. What I am suggesting will reduce code size, and whatever \"flexibility\" it loses I don\u0027t see the point of. Why exactly is this flexibility needed? I don\u0027t see it being anywhere used?",
      "parentUuid": "1be08797_dc0ad76b",
      "revId": "c60d00906d3025ec57d37d6c25c21235928e2dce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0c0aa7a_07d15a70",
        "filename": "src/kits/tracker/FilePanelPriv.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1134,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2024-01-06T21:20:21Z",
      "side": 1,
      "message": "You don\u0027t see it being  used by overriding these methods in TFilePanel?",
      "parentUuid": "2617479b_fa1b7fe3",
      "revId": "c60d00906d3025ec57d37d6c25c21235928e2dce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa20b39e_defa57a0",
        "filename": "src/kits/tracker/FilePanelPriv.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1134,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2024-01-06T21:37:44Z",
      "side": 1,
      "message": "I think I see your point now. I could probably call the inherited BContainerWindow method from TFilPanel. That wasn\u0027t true before but since I\u0027ve overloaded the update context menus methods to remove their insides it should theoretically work. I\u0027d have to double check that nothing gets updated that shouldn\u0027t be.",
      "parentUuid": "b0c0aa7a_07d15a70",
      "revId": "c60d00906d3025ec57d37d6c25c21235928e2dce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5e494e2_e469ab15",
        "filename": "src/kits/tracker/FilePanelPriv.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1134,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2024-01-07T06:09:29Z",
      "side": 1,
      "message": "It\u0027s still not exactly what you want but it\u0027s a lot closer. TFilePanel doesn\u0027t need to repeat most of the update logic and the switches have been been removed. It calls the BContainerWindow parent method to do the heavy lifting instead. BContainerWindow is still split out into multiple switches so that it they may be overridden selectively. I\u0027m overriding a few methods below to NOT update stuff that TFilePanel doesn\u0027t have and also to update the New folder item instead of trying to turn it into a New \u003e menu.",
      "parentUuid": "aa20b39e_defa57a0",
      "revId": "c60d00906d3025ec57d37d6c25c21235928e2dce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b7c94062_a8567621",
        "filename": "src/kits/tracker/FilePanelPriv.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1134,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2024-01-13T02:01:18Z",
      "side": 1,
      "message": "Yes, this is a definite improvement.\n\nI still think there\u0027s too much new \"boilerplate\" or other code that could be abstracted, but at least this specific problem is now resolved. (I still haven\u0027t reviewed in full.)",
      "parentUuid": "f5e494e2_e469ab15",
      "revId": "c60d00906d3025ec57d37d6c25c21235928e2dce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e5cc612_623eac25",
        "filename": "src/kits/tracker/FilePanelPriv.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1178,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2024-01-06T15:25:12Z",
      "side": 1,
      "message": "This (and following) seem like dangerous and basically useless optimizations. The CPU cycles saved by this is so small it may as well be nothing (actually depending on caching \u0026 etc. it may even be net negative), and in case anyone ever misses this it\u0027ll just cause problems.",
      "revId": "c60d00906d3025ec57d37d6c25c21235928e2dce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "163834b9_d4b41f21",
        "filename": "src/kits/tracker/FilePanelPriv.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1178,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2024-01-06T16:42:48Z",
      "side": 1,
      "message": "Yeah these list fast forwards maybe dubious and impractical but you wanted groupings this is how I implemented groupings.",
      "parentUuid": "3e5cc612_623eac25",
      "revId": "c60d00906d3025ec57d37d6c25c21235928e2dce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2fde3068_3136cb4f",
        "filename": "src/kits/tracker/FilePanelPriv.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1178,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2024-01-06T16:46:15Z",
      "side": 1,
      "message": "This isn\u0027t the groupings I was asking for. At any rate, there\u0027s absolutely no point for these \"fast-forwards\", they can be dropped without any risk of performance loss. Definitely a premature optimization as it\u0027s not an optimization at all.",
      "parentUuid": "163834b9_d4b41f21",
      "revId": "c60d00906d3025ec57d37d6c25c21235928e2dce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48bcedd2_4312beb6",
        "filename": "src/kits/tracker/FilePanelPriv.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1178,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2024-01-06T16:57:47Z",
      "side": 1,
      "message": "ok I can take these out but I only put them in there in the first place because you wanted me to group consecutive items together so I did.",
      "parentUuid": "2fde3068_3136cb4f",
      "revId": "c60d00906d3025ec57d37d6c25c21235928e2dce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "016cb42a_a0a83072",
        "filename": "src/kits/tracker/FilePanelPriv.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1178,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2024-01-06T17:05:55Z",
      "side": 1,
      "message": "This wasn\u0027t the kind of grouping I meant at all, I meant to have multiple items be created at once from a single Shortcuts class method. Within loops/switches the items should be handled individually.",
      "parentUuid": "48bcedd2_4312beb6",
      "revId": "c60d00906d3025ec57d37d6c25c21235928e2dce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3e1bca9c_69be8f30",
        "filename": "src/kits/tracker/FilePanelPriv.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1178,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2024-01-06T18:32:51Z",
      "side": 1,
      "message": "Well this one is done anyway, dubious FF deleted.",
      "parentUuid": "016cb42a_a0a83072",
      "revId": "c60d00906d3025ec57d37d6c25c21235928e2dce",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}