{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d743eff5_6fe5673c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 22
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2024-05-03T09:11:41Z",
      "side": 1,
      "message": "Ok I think the code is starting to make sense now. There is one formatting problems and two places where small changes are needed.",
      "revId": "f01568f4924b7e50cf558538b856c1d7721d7367",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "907cba81_46841d28",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 22
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2024-05-03T16:43:06Z",
      "side": 1,
      "message": "I wonder: does it really make sense to store the auto-configure state as a flag? Probably it makes sense to have a CONFIGURING flag so that any application can easily detect when an address family \"exists\" but isn\u0027t \"configured\" yet (... or does that not make sense either, because any configured family will have an address set, while any unconfigured family won\u0027t?), but, do we really need a distinction at this level between \"auto-configured\" and \"configured\"? Why not have net_server keep track of that, too?",
      "revId": "f01568f4924b7e50cf558538b856c1d7721d7367",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "337f5458_ffb8b5ba",
        "filename": "headers/posix/net/if.h",
        "patchSetId": 22
      },
      "lineNbr": 84,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-04-24T18:01:11Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n#define IFAF_AUTO_CONFIGURED 0x2000 /* has been automatically configured */\n#define IFAF_CONFIGURING 0x0002 /* auto configuration in progress */\n```",
      "range": {
        "startLine": 83,
        "startChar": 0,
        "endLine": 84,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "f01568f4924b7e50cf558538b856c1d7721d7367",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b65e286a_87b53e15",
        "filename": "src/add-ons/kernel/network/stack/datalink.cpp",
        "patchSetId": 22
      },
      "lineNbr": 876,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-04-24T18:01:11Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\t\t\t\tsizeof(uint32_t));\n```",
      "range": {
        "startLine": 876,
        "startChar": 0,
        "endLine": 876,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "f01568f4924b7e50cf558538b856c1d7721d7367",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f769ad1_2c8f3ed7",
        "filename": "src/add-ons/kernel/network/stack/datalink.cpp",
        "patchSetId": 22
      },
      "lineNbr": 876,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2024-05-03T09:11:41Z",
      "side": 1,
      "message": "incorrect indentation",
      "parentUuid": "b65e286a_87b53e15",
      "range": {
        "startLine": 876,
        "startChar": 0,
        "endLine": 876,
        "endChar": 0
      },
      "revId": "f01568f4924b7e50cf558538b856c1d7721d7367",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67f9e37c_24a7e6fa",
        "filename": "src/preferences/network/InterfaceAddressView.cpp",
        "patchSetId": 22
      },
      "lineNbr": 250,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2024-05-03T09:11:41Z",
      "side": 1,
      "message": "This seems not correct, if the interface is not configuring anymore.\n\nHaving a local-only interface (connected to a network with no internet access), it\u0027s possible that there is simply no gateway to exit the network at all.\n\nI think the simplest way is to move the code inside the check for autoconfiguring.\n\nThere are basically 3 cases:\n\n    There is a GW address: display it\n    There is no GW address:\n        We are in autoconfiguring state: display \"Trying to get...\"\n        We are not in autoconfiguring state: set to NULL (likely a local-only network that doesn\u0027t have a gateway)",
      "revId": "f01568f4924b7e50cf558538b856c1d7721d7367",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e50cfddc_86fb6193",
        "filename": "src/servers/net/NetServer.cpp",
        "patchSetId": 22
      },
      "lineNbr": 431,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2024-05-03T09:11:41Z",
      "side": 1,
      "message": "this is mising up interface and address flags in the same \"flags\" variable, it would be better to track them in two separate variables (intefaceFlags and addressFlags for example) to avoid confusion",
      "revId": "f01568f4924b7e50cf558538b856c1d7721d7367",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}