{
  "comments": [
    {
      "key": {
        "uuid": "8e616188_0008270d",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 5
      },
      "lineNbr": 95,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2020-08-21T19:03:27Z",
      "side": 1,
      "message": "fUpperCases name is meant for member attribute only.",
      "revId": "5b814c67ee6547e388b31f48c72f9d6d49f28a49",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12e91277_fa82acfa",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 5
      },
      "lineNbr": 95,
      "author": {
        "id": 1000183
      },
      "writtenOn": "2020-08-23T08:56:12Z",
      "side": 1,
      "message": "Done.\nI changed it from member attribute to local and forgot to change the name :P",
      "parentUuid": "8e616188_0008270d",
      "revId": "5b814c67ee6547e388b31f48c72f9d6d49f28a49",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b281e911_b82df212",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 5
      },
      "lineNbr": 96,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2020-08-21T19:03:27Z",
      "side": 1,
      "message": "Do you think we really need a new() allocation here ? It can be a normal stack. Also, I noticed that you use many unnecessary heap allocation across the code base, please take your time to check and clean it up.",
      "revId": "5b814c67ee6547e388b31f48c72f9d6d49f28a49",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2726c93_4e87faf0",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 5
      },
      "lineNbr": 96,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2020-08-21T19:16:19Z",
      "side": 1,
      "message": "That depends, how large can the number of extents be? Unless the number is guaranteed to be limited to a relatively small number, allocating on the stack is unwise.",
      "parentUuid": "b281e911_b82df212",
      "revId": "5b814c67ee6547e388b31f48c72f9d6d49f28a49",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0fcd1aa_8d4ecae9",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 5
      },
      "lineNbr": 96,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2020-08-22T07:38:06Z",
      "side": 1,
      "message": "You can use BStackOrHeapArray in that case, which will use the stack for small enough allocations and switch to heap allocation for larger ones. It also handles freeing the memory for you (which seems not done at all here?)",
      "parentUuid": "a2726c93_4e87faf0",
      "revId": "5b814c67ee6547e388b31f48c72f9d6d49f28a49",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "432b9ab1_58a6bb86",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 5
      },
      "lineNbr": 96,
      "author": {
        "id": 1000183
      },
      "writtenOn": "2020-08-23T08:56:12Z",
      "side": 1,
      "message": "I think it can be guaranteed that the number of extents will be pretty high(more than 100 I can say, that\u0027s why it\u0027s a B+Tree). Moreover, each extent takes 16 bytes. It\u0027s just safer to make heap allocation and not have stackoverflow? Nevertheless, I think BStackOrHeapArray sounds good but when does it free memory? Currently I send this array into another function where it gets deleted.",
      "parentUuid": "d0fcd1aa_8d4ecae9",
      "revId": "5b814c67ee6547e388b31f48c72f9d6d49f28a49",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a268dc3_3b9c77a4",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 5
      },
      "lineNbr": 96,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2021-01-17T21:09:44Z",
      "side": 1,
      "message": "The idea of BStackOrHeap array is that it behaves like a stack allocation and automatically frees the memory when it goes out of scope (for example when the function returns). It also switches automatically between stack allocation (when only a small amount of data is needed) to heap allocation (when the data is large).",
      "parentUuid": "432b9ab1_58a6bb86",
      "revId": "5b814c67ee6547e388b31f48c72f9d6d49f28a49",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a490507_ff2889a2",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 5
      },
      "lineNbr": 117,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2020-08-21T19:03:27Z",
      "side": 1,
      "message": "unnecessary new",
      "revId": "5b814c67ee6547e388b31f48c72f9d6d49f28a49",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5aa1acee_b1855fbf",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 5
      },
      "lineNbr": 117,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2020-08-23T07:39:57Z",
      "side": 1,
      "message": "also missing free memory if using new",
      "parentUuid": "2a490507_ff2889a2",
      "revId": "5b814c67ee6547e388b31f48c72f9d6d49f28a49",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f85500e2_3a2ec1a4",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 5
      },
      "lineNbr": 117,
      "author": {
        "id": 1000183
      },
      "writtenOn": "2020-08-23T08:56:12Z",
      "side": 1,
      "message": "Moved to stack memory. I\u0027ll make sure I am making deletions everywhere though.",
      "parentUuid": "5aa1acee_b1855fbf",
      "revId": "5b814c67ee6547e388b31f48c72f9d6d49f28a49",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9afec806_3c4d1bec",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 5
      },
      "lineNbr": 150,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2020-08-23T07:39:57Z",
      "side": 1,
      "message": "unused variable after new assignment",
      "revId": "5b814c67ee6547e388b31f48c72f9d6d49f28a49",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25087dc2_8f355edf",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 5
      },
      "lineNbr": 150,
      "author": {
        "id": 1000183
      },
      "writtenOn": "2020-08-23T08:56:12Z",
      "side": 1,
      "message": "I don\u0027t understand but see if this works.",
      "parentUuid": "9afec806_3c4d1bec",
      "revId": "5b814c67ee6547e388b31f48c72f9d6d49f28a49",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ccb6e5f9_f2241b7c",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 5
      },
      "lineNbr": 150,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2020-08-25T12:28:21Z",
      "side": 1,
      "message": "What is the purpose of levelsInTree after reassigning it to 0 ? There is no code using it below, so this line is useless.",
      "parentUuid": "25087dc2_8f355edf",
      "revId": "5b814c67ee6547e388b31f48c72f9d6d49f28a49",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    }
  ]
}