{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "81ce0899_b9b1eaf1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-03-27T20:11:57Z",
      "side": 1,
      "message": "-2 because I am pretty sure that read_pages should not be implemented, and something should be done using the pre-existing io hook instead.",
      "revId": "431dd410e52e59a7f026596e5b513f9c02a1d057",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5345374e_53abaad7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000391
      },
      "writtenOn": "2023-03-28T12:47:04Z",
      "side": 1,
      "message": "It seems that",
      "parentUuid": "81ce0899_b9b1eaf1",
      "revId": "431dd410e52e59a7f026596e5b513f9c02a1d057",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "438a7a71_e3cae67b",
        "filename": "src/add-ons/kernel/file_systems/userlandfs/server/fuse/FUSEVolume.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1732,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-03-27T18:28:43Z",
      "side": 1,
      "message": "This function, and a bunch of other machinery surrounding it, exists for a long time, and it seems to be used for Haiku-native filesystem addons. So, how did that work without a read_pages implementation before? Do we not really need read_pages?",
      "revId": "431dd410e52e59a7f026596e5b513f9c02a1d057",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f84d53d_f10dbd00",
        "filename": "src/add-ons/kernel/file_systems/userlandfs/server/fuse/FUSEVolume.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1732,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2023-03-27T18:45:54Z",
      "side": 1,
      "message": "mmap will not work without implementing read_pages etc. or setting custom VMCache with read_pages like in ramfs. read_pages etc. hooks are used by VMVNodeCache implementation.",
      "parentUuid": "438a7a71_e3cae67b",
      "revId": "431dd410e52e59a7f026596e5b513f9c02a1d057",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc31c87c_fd09c8ac",
        "filename": "src/add-ons/kernel/file_systems/userlandfs/server/fuse/FUSEVolume.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1732,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-03-27T18:49:50Z",
      "side": 1,
      "message": "So then what was all the file_cache machinery in userlandfs for, before now?",
      "parentUuid": "8f84d53d_f10dbd00",
      "revId": "431dd410e52e59a7f026596e5b513f9c02a1d057",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6c2e84a_8531b639",
        "filename": "src/add-ons/kernel/file_systems/userlandfs/server/fuse/FUSEVolume.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1732,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2023-03-27T19:05:26Z",
      "side": 1,
      "message": "I am not sure, but the fact is mmap() is not working on files exposed by userlandfs without applying this patch.",
      "parentUuid": "cc31c87c_fd09c8ac",
      "revId": "431dd410e52e59a7f026596e5b513f9c02a1d057",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "270c6214_5c95db6e",
        "filename": "src/add-ons/kernel/file_systems/userlandfs/server/fuse/FUSEVolume.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1732,
      "author": {
        "id": 1000391
      },
      "writtenOn": "2023-03-27T20:07:48Z",
      "side": 1,
      "message": "\u003e So then what was all the file_cache machinery in userlandfs for, before now?\n\nIt\u0027s for userland filesystems that use the Haiku API to interact with the Haiku file cache system.\n\n\u003e So, how did that work without a read_pages implementation before?\n\nIt might work for Haiku-native filesystems on userlandfs because it actively sets data into the file cache.\n\n`mmap` after a chain of library and system calls gets to `_vm_map_file` (https://xref.landonf.org/source/xref/haiku/src/system/kernel/vm/vm.cpp#2010), which then tries to find a file cache object (https://xref.landonf.org/source/xref/haiku/src/system/kernel/vm/vm.cpp#2118). The third parameter being `false` means that it will only work if a file cache already exists.\n\nOn FUSE, there is no mechanism exposed to create Haiku file caches, so this patch creates one when it is needed (when `open` is called). By default, a `VMVnodeCache` is created (https://xref.landonf.org/source/xref/haiku/src/system/kernel/fs/vfs.cpp#4769), \nand this implementation uses `read_pages` to fetch its data (https://xref.landonf.org/source/xref/haiku/src/system/kernel/cache/vnode_store.cpp#51).",
      "parentUuid": "e6c2e84a_8531b639",
      "revId": "431dd410e52e59a7f026596e5b513f9c02a1d057",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f18cd17e_0ffd5abd",
        "filename": "src/add-ons/kernel/file_systems/userlandfs/server/fuse/FUSEVolume.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1732,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-03-27T20:11:25Z",
      "side": 1,
      "message": "I am familiar with these APIs to a certain degree: the file_cache is a \"pull\" based system, i.e. it pulls data from the underlying FS as needed, it doesn\u0027t have data \"pushed\" into it.\n\nLooking at the code, I think the way this is supposed to work for userlandfs is that read_pages happens via the I/O hook (asynchronously). Thus, the original comment that read_pages is \"obsolete\" is correct, and an implementation of it should not be needed here at all since the \"io\" hook is indeed implemented. So, what\u0027s going on there?",
      "parentUuid": "270c6214_5c95db6e",
      "revId": "431dd410e52e59a7f026596e5b513f9c02a1d057",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f06e6c1b_099b75c5",
        "filename": "src/add-ons/kernel/file_systems/userlandfs/server/fuse/FUSEVolume.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1732,
      "author": {
        "id": 1000391
      },
      "writtenOn": "2023-03-28T12:47:04Z",
      "side": 1,
      "message": "It seems somehow that simply setting the file cache this way requires `read_pages` to be implemented. Without it, the kernel would simply panic on a missing call to `read_pages`.",
      "parentUuid": "f18cd17e_0ffd5abd",
      "revId": "431dd410e52e59a7f026596e5b513f9c02a1d057",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a2a6307_f3ce3d5e",
        "filename": "src/add-ons/kernel/file_systems/userlandfs/server/fuse/FUSEVolume.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1732,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-03-28T15:31:42Z",
      "side": 1,
      "message": "This was discussed on IRC. I am pretty sure read_pages calls are supposed to be serviced via the IO hook if it exists and is implemented (which it is.) That would explain how this works already for other Haiku-native filesystems, but not for FUSE which does not handle the IO hook.",
      "parentUuid": "f06e6c1b_099b75c5",
      "revId": "431dd410e52e59a7f026596e5b513f9c02a1d057",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}