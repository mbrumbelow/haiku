{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c72e70c4_cdb8cc74",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000670
      },
      "writtenOn": "2025-01-26T10:07:15Z",
      "side": 1,
      "message": "This change implements cleanup and improvements that John Scipione and Maximo Castaneda suggested while implementing strikeout, but I thought it\u0027s better to split that into a separate commit.\nIt doesn\u0027t have any functional differences.",
      "revId": "406967853b6e0a6836b4056196139a17e3c018b5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c73cd767_5d45b4be",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2025-01-26T21:49:45Z",
      "side": 1,
      "message": "I asked for you to something like this when you were working on strikeout, this is exactly the kind of change I was looking for.",
      "revId": "406967853b6e0a6836b4056196139a17e3c018b5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c8a081a7_fc2cf1f2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2025-01-27T13:28:38Z",
      "side": 1,
      "message": "I\u0027m not sure I like the flags field. Within the class, fDryRun etc. are less verbosive and as distinct. It\u0027s only the call itself that is improved, but if it\u0027s only called in a single case, I don\u0027t really see the benefit when you just can define the dryRun variable beforehand. IOW, I would get rid of the flags field entirely, again.",
      "revId": "406967853b6e0a6836b4056196139a17e3c018b5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d572e1fb_13d26035",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2025-01-27T13:29:28Z",
      "side": 1,
      "message": "Changing score to have a discussion about this, before someone just presses submit :-)",
      "revId": "406967853b6e0a6836b4056196139a17e3c018b5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1719f06c_951f481e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2025-01-27T13:34:18Z",
      "side": 1,
      "message": "The point is that when you want to add another flag you donâ€™t have to modify the method, you add another variable to the flags bitmap and pass it in. nipos added a strikeout flag, but next time it might be overline or blockout and instead of adding yet another bool parameter to the method you add another line to the bitmap and the method signature stays the same.",
      "revId": "406967853b6e0a6836b4056196139a17e3c018b5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "053a3f0f_b2c72980",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2025-01-27T14:56:33Z",
      "side": 1,
      "message": "the -1 doesn\u0027t prevent this. so setting to -2 for now. (that doesn\u0027t mean I disagree with the chamnge as such though)",
      "parentUuid": "d572e1fb_13d26035",
      "revId": "406967853b6e0a6836b4056196139a17e3c018b5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b6162454_1ea64ddc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2025-01-28T06:53:38Z",
      "side": 1,
      "message": "What about removing the font face flags from there completely, and just pass the BFont::Face() flags directly to the method, leaving \u0027dryRun\u0027, and \u0027antiAliased\u0027 as options (that I could more easily see combined as flags, if needed).",
      "parentUuid": "1719f06c_951f481e",
      "revId": "406967853b6e0a6836b4056196139a17e3c018b5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "264abe23_28330c9f",
        "filename": "src/servers/app/drawing/Painter/AGGTextRenderer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2025-01-26T14:14:48Z",
      "side": 1,
      "message": "these seem quite verbose, maybe they can be made local to the class and have names like kStrikeOut or so, though i gues kSomething is weong since this is an enum. The coding guidelines don\u0027t say much for this case.\n\nWaiting to see what another dev sais here.",
      "revId": "406967853b6e0a6836b4056196139a17e3c018b5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c95000c1_d292dd33",
        "filename": "src/servers/app/drawing/Painter/AGGTextRenderer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2025-01-26T21:55:12Z",
      "side": 1,
      "message": "What I\u0027ve started doing is putting the enum inside the class. To use the enum values you have to write for example AGGTextRenderer::STRING_RENDERER_DRY_RUN. However that is only for public enums that are exported in a header. This is only defined in the class file so the scope creep is not important here.",
      "parentUuid": "264abe23_28330c9f",
      "revId": "406967853b6e0a6836b4056196139a17e3c018b5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7a6ac1e_fa1bbe96",
        "filename": "src/servers/app/drawing/Painter/AGGTextRenderer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2025-01-27T14:54:39Z",
      "side": 1,
      "message": "I don\u0027t mind the flags field as such, I do mind the extremely verbose variable names.\n\nIt is my understanding that variables from the Be api are written in the THIS_CASE style, but new sttuff we introduce should instead be thisCase (so camel case)\n\nNaming these kDryRun, kAntiAliiased, kUnderline and such would make the code more readable in my opinion. That we are, in that code, in the renderer is known and should not be repeated for any ops. and \"flags \u0026 kUnderline\" makes this clear to me what is beeing asked.\n\nYour example of having to write AGGTextRenderer::STRING_RENDERER_DRY_RUN seems even worse for code readability.\n\nSeeing as we are in a .cpp file here that should not be included (or leak symbols) it\u0027s probably fine to declare these with the kNames, and omit the context of \"we are in the string rendering code\" from each constants name.",
      "parentUuid": "c95000c1_d292dd33",
      "revId": "406967853b6e0a6836b4056196139a17e3c018b5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82ec8c8a_28c07c31",
        "filename": "src/servers/app/drawing/Painter/AGGTextRenderer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-01-27T17:14:48Z",
      "side": 1,
      "message": "We still use UPPER_CASE when introducing new public enums. For private ones it\u0027s fine to use something else I suppose. But \"k\" should only be used for global constants.\n\nI think putting it inside AGGTextRenderer makes sense but without a prefix. So then you\u0027d write `AGGTextRenderer::DryRun` outside the class and just `DryRun` inside it.",
      "parentUuid": "a7a6ac1e_fa1bbe96",
      "revId": "406967853b6e0a6836b4056196139a17e3c018b5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41d82fa6_81e2b708",
        "filename": "src/servers/app/drawing/Painter/AGGTextRenderer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2025-01-27T23:38:40Z",
      "side": 1,
      "message": "I understand your complaint better now. k is for local constants so kDryRun, kSubpixelAntiAliased, kUnderscore, etc. would be acceptable here. If you\u0027re intending to export these variable to global namespace someday the ALL_UPPERCASE_WITH_UNDERSCORES style makes sense but then you\u0027d also need a B_ in front.",
      "parentUuid": "82ec8c8a_28c07c31",
      "revId": "406967853b6e0a6836b4056196139a17e3c018b5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e71ea336_f63f3198",
        "filename": "src/servers/app/drawing/Painter/AGGTextRenderer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2025-01-28T06:53:38Z",
      "side": 1,
      "message": "Constants should always have the \u0027k\u0027 prefix. The only exception are public constant names where we use upper case and the \u0027B_\u0027 prefix. So it would be AGGTextRenderer::kDryRun, anything else would not be following our style guide.\n\nIn any case, as I already said, I would reuse the existing face flags in its own variable. If the flags remain, they should be moved into AGGTextRenderer, and get the \u0027k\u0027 prefix without the STRING_RENDERER prefix.",
      "parentUuid": "41d82fa6_81e2b708",
      "revId": "406967853b6e0a6836b4056196139a17e3c018b5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a7c4d4b_63f8b3bd",
        "filename": "src/servers/app/drawing/Painter/AGGTextRenderer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1000223
      },
      "writtenOn": "2025-03-12T11:53:02Z",
      "side": 1,
      "message": "Underscore and strikeout are only used in one place and they only depend on the font, which is also accessed in that place. You may use `(fRenderer.fFont.Face() \u0026 B_UNDERSCORE_FACE) !\u003d 0` instead of `fUnderscore`, likewise for `fStrikeout`.\n\n`fSubpixelAntiAliased` can be computed in the constructor as `gSubpixelAntialiasing \u0026\u0026 fRenderer.Antialiasing()`.\n\nWith that the only flag left is `dryRun`, and the problem of defining and naming a flags field is kicked to the future, an unlikely one as long as the new flags only depend on the font.",
      "parentUuid": "e71ea336_f63f3198",
      "revId": "406967853b6e0a6836b4056196139a17e3c018b5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1f97a74_e977cb3f",
        "filename": "src/servers/app/drawing/Painter/AGGTextRenderer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1000670
      },
      "writtenOn": "2025-03-15T10:42:36Z",
      "side": 1,
      "message": "Thanks for listing the exact changes I have to make.Knowing what exactly to do helps a lot.I hope it looks good now.",
      "parentUuid": "9a7c4d4b_63f8b3bd",
      "revId": "406967853b6e0a6836b4056196139a17e3c018b5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b80b45d0_bf345fe8",
        "filename": "src/servers/app/drawing/Painter/AGGTextRenderer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-03-17T18:11:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c1f97a74_e977cb3f",
      "revId": "406967853b6e0a6836b4056196139a17e3c018b5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "632f9eb2_0edd85e9",
        "filename": "src/servers/app/drawing/Painter/AGGTextRenderer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-01-26T10:08:42Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tSTRING_RENDERER_DRY_RUN \u003d 0x0001,\n\tSTRING_RENDERER_SUBPIXEL_ANTI_ALIASED \u003d 0x0002,\n\tSTRING_RENDERER_UNDERSCORE \u003d 0x0004,\n\tSTRING_RENDERER_STRIKEOUT \u003d 0x0008\n```",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 34,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "406967853b6e0a6836b4056196139a17e3c018b5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d437f9ee_fabaa95e",
        "filename": "src/servers/app/drawing/Painter/AGGTextRenderer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 346,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2025-01-26T14:14:48Z",
      "side": 1,
      "message": "This could be passed to the function instead, this scales with the font *size* but that may not be what is wanted. For example if in the future strikeout and underline can respect font weights (especially for variable fonts)",
      "revId": "406967853b6e0a6836b4056196139a17e3c018b5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8220a77_f9d7304c",
        "filename": "src/servers/app/drawing/Painter/AGGTextRenderer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 346,
      "author": {
        "id": 1000223
      },
      "writtenOn": "2025-03-12T11:53:02Z",
      "side": 1,
      "message": "Which may also be computed here instead of in the callers. No hard opinion about it, though.",
      "parentUuid": "d437f9ee_fabaa95e",
      "revId": "406967853b6e0a6836b4056196139a17e3c018b5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d9e5592d_cdc00cab",
        "filename": "src/servers/app/drawing/Painter/AGGTextRenderer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 346,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-03-17T18:11:08Z",
      "side": 1,
      "message": "This is just a refactor change, which just copies this code from where it\u0027s duplicated. Let\u0027s leave this for now and change it in later commits if we need/want to.",
      "parentUuid": "d8220a77_f9d7304c",
      "revId": "406967853b6e0a6836b4056196139a17e3c018b5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}