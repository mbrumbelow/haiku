{
  "comments": [
    {
      "key": {
        "uuid": "1da5de33_2b09d763",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 13
      },
      "lineNbr": 232,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2021-01-16T17:07:37Z",
      "side": 1,
      "message": "why not \"else\"? And parenthesis are missing, since the if-body is multi-line.",
      "revId": "134fcc056954e9ec32c86bf96b29a7ca93029822",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e79884b1_2882ff4a",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 13
      },
      "lineNbr": 232,
      "author": {
        "id": 1000287
      },
      "writtenOn": "2021-06-26T08:33:59Z",
      "side": 1,
      "message": "Done\nNot \u0027else\u0027, according to the guidelines, we should avoid \u0027else\u0027, right?\nParenthesis added.",
      "parentUuid": "1da5de33_2b09d763",
      "revId": "134fcc056954e9ec32c86bf96b29a7ca93029822",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d201005_ab93b28d",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 13
      },
      "lineNbr": 285,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2021-01-16T17:07:37Z",
      "side": 1,
      "message": "If this method is called more than once, it would leak \"fExtents\", no?",
      "revId": "134fcc056954e9ec32c86bf96b29a7ca93029822",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "effd3f7a_2ebbab05",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 13
      },
      "lineNbr": 285,
      "author": {
        "id": 1000287
      },
      "writtenOn": "2021-06-26T15:03:07Z",
      "side": 1,
      "message": "It makes me confused. \nObiviously, if this method is called more than once, it would leak.\nSo to forbid this, we can use AutoDeleter, so how about other methods, should I also do this for them?",
      "parentUuid": "4d201005_ab93b28d",
      "revId": "134fcc056954e9ec32c86bf96b29a7ca93029822",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "505b302c_962ad861",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 13
      },
      "lineNbr": 285,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2021-06-26T15:09:49Z",
      "side": 1,
      "message": "A simple thing to do is:\n\ndelete fExtents;\nfExtents \u003d new(...);\n\nAnother option, if the size of fExtents is never going to change for a single inode:\n\nif (fExtents \u003d\u003d NULL)\n    fExtents \u003d new(...);\n\nOr maybe, just allocate fExtents in the constructor (guaranteeing it is only done once in the object lifetime), instead of doing it later in various methods (other \"read\" methods also allocate it currently, making it difficult to track its lifetime). In general, allocating everything in the constructor and deleting everything in the destructor makes it easy to check that there are no memory leaks. Having allocations done all over the places in various methods make things complicated to follow, and in this case, I think there is no reason for this extra complexity (unless I\u0027m missing something).",
      "parentUuid": "effd3f7a_2ebbab05",
      "revId": "134fcc056954e9ec32c86bf96b29a7ca93029822",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a0ef779_450809b2",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 13
      },
      "lineNbr": 285,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2021-06-26T22:54:06Z",
      "side": 1,
      "message": "Good case for using ObjectDeleter. Just set it to new pointer and it will automatically delete old object.",
      "parentUuid": "505b302c_962ad861",
      "revId": "134fcc056954e9ec32c86bf96b29a7ca93029822",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82b1c116_37308cf8",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 13
      },
      "lineNbr": 285,
      "author": {
        "id": 1000183
      },
      "writtenOn": "2021-06-27T08:44:00Z",
      "side": 1,
      "message": "Okay. I don\u0027t think this should be called twice? The goal is to fill up fExtents. If that is filled, we shouldn\u0027t come here. We should make a check in ReadExtents(). If fExtents !\u003d NULL, return something like B_OK.",
      "parentUuid": "5a0ef779_450809b2",
      "revId": "134fcc056954e9ec32c86bf96b29a7ca93029822",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9fee74a4_e190d3a8",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 13
      },
      "lineNbr": 285,
      "author": {
        "id": 1000287
      },
      "writtenOn": "2021-06-27T15:05:54Z",
      "side": 1,
      "message": "Done\n\nThank you all!\n\nI tried to allocate it in the constructor, but I don\u0027t know why it failed test (use xfs_shell to get files).\n\nHowever, this one works,\ndelete fExtents;\nfExtents \u003d new(...);\nSo I used it.",
      "parentUuid": "5a0ef779_450809b2",
      "revId": "134fcc056954e9ec32c86bf96b29a7ca93029822",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1aecf2f9_fad253b0",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 13
      },
      "lineNbr": 286,
      "author": {
        "id": 1000183
      },
      "writtenOn": "2021-06-27T08:44:00Z",
      "side": 1,
      "message": "I think it would be better to have this in stack instead of heap. This is a very small object that\u0027ll be used just once here.",
      "range": {
        "startLine": 286,
        "startChar": 18,
        "endLine": 286,
        "endChar": 22
      },
      "revId": "134fcc056954e9ec32c86bf96b29a7ca93029822",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "873ed7ec_4683ead3",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 13
      },
      "lineNbr": 286,
      "author": {
        "id": 1000287
      },
      "writtenOn": "2021-06-27T15:05:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1aecf2f9_fad253b0",
      "range": {
        "startLine": 286,
        "startChar": 18,
        "endLine": 286,
        "endChar": 22
      },
      "revId": "134fcc056954e9ec32c86bf96b29a7ca93029822",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d4e9c35d_ec8bdef2",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 13
      },
      "lineNbr": 307,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2021-01-16T17:07:37Z",
      "side": 1,
      "message": "\"leftmost\"",
      "revId": "134fcc056954e9ec32c86bf96b29a7ca93029822",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5a653fc_840f999c",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 13
      },
      "lineNbr": 307,
      "author": {
        "id": 1000287
      },
      "writtenOn": "2021-06-26T08:33:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d4e9c35d_ec8bdef2",
      "revId": "134fcc056954e9ec32c86bf96b29a7ca93029822",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b2b07da9_ff421b9c",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 13
      },
      "lineNbr": 328,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2021-01-16T17:07:37Z",
      "side": 1,
      "message": "These two assignments are done 3 times after line 308. Isn\u0027t there a way to formulate the code in such a way that it is done only once? At least 308 and 309 can simply be removed without any change in semantics.",
      "revId": "134fcc056954e9ec32c86bf96b29a7ca93029822",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d41b285_201d57c8",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 13
      },
      "lineNbr": 328,
      "author": {
        "id": 1000287
      },
      "writtenOn": "2021-06-26T15:03:07Z",
      "side": 1,
      "message": "Done\nI think it could be like this: line 325 - 328 can be simply deleted, since we have got values of them in the \u0027while\u0027 loop.",
      "parentUuid": "b2b07da9_ff421b9c",
      "revId": "134fcc056954e9ec32c86bf96b29a7ca93029822",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "515af411_ff094a8c",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 13
      },
      "lineNbr": 328,
      "author": {
        "id": 1000183
      },
      "writtenOn": "2021-06-27T08:44:00Z",
      "side": 1,
      "message": "I don\u0027t think this is right. levelsInTree can be 1. Moreover, when we are iterating down the tree and the levelsInTree becomes one, inside the while loop we don\u0027t recalculate fileSystemBlockNo and readPos. We should be doing that right?",
      "parentUuid": "4d41b285_201d57c8",
      "revId": "134fcc056954e9ec32c86bf96b29a7ca93029822",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc68caf5_ed2edeb7",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 13
      },
      "lineNbr": 328,
      "author": {
        "id": 1000287
      },
      "writtenOn": "2021-06-27T15:05:54Z",
      "side": 1,
      "message": "Done\nYes, it is a bug. So how about this now？",
      "parentUuid": "515af411_ff094a8c",
      "revId": "134fcc056954e9ec32c86bf96b29a7ca93029822",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e61af7fb_89b14a23",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 13
      },
      "lineNbr": 331,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2021-01-16T17:07:37Z",
      "side": 1,
      "message": "Not sure if using the stack for something which is at least in theory \"variable\", is a good idea.",
      "revId": "134fcc056954e9ec32c86bf96b29a7ca93029822",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45499f93_bfa70837",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 13
      },
      "lineNbr": 331,
      "author": {
        "id": 1000287
      },
      "writtenOn": "2021-06-26T15:03:07Z",
      "side": 1,
      "message": "I think it was allocated on the stack may be it would not be so big? In this way, if stack size is enough we should keep it here.\n\nBut in my mind, I prefer use heap now. Because I am not sure whether it is really can be keep in stack. But if we use heap, we can confirm it is safe at least.\n\nLater, we can do something to make sure we allocate each variable in a certain way, stack/heap/StackOrHeap.",
      "parentUuid": "e61af7fb_89b14a23",
      "revId": "134fcc056954e9ec32c86bf96b29a7ca93029822",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fbc1b365_4ebe4379",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 13
      },
      "lineNbr": 331,
      "author": {
        "id": 1000183
      },
      "writtenOn": "2021-06-27T08:44:00Z",
      "side": 1,
      "message": "Directory block size cannot be more that 65536 bytes in size. This should be okay on the stack.\nPlease checkout the docs.",
      "parentUuid": "45499f93_bfa70837",
      "revId": "134fcc056954e9ec32c86bf96b29a7ca93029822",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7036ecbe_81079504",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 13
      },
      "lineNbr": 331,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2021-06-27T08:51:10Z",
      "side": 1,
      "message": "64K is a lot for the stack. In userland threads, the default size is 256K so it would be 1/4 of the stack. In kernel threads, the stack is only 12 to 16K (it depends on the CPU architecture) and this would simply not fit in the stack at all.\n\nYou need to be very conservative about stack usage for code that is meant to run in the kernel.",
      "parentUuid": "fbc1b365_4ebe4379",
      "revId": "134fcc056954e9ec32c86bf96b29a7ca93029822",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1731ffbf_4e96f717",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 13
      },
      "lineNbr": 331,
      "author": {
        "id": 1000183
      },
      "writtenOn": "2021-06-27T09:49:26Z",
      "side": 1,
      "message": "Interesting. Wasn\u0027t aware of this.\nSince the kernel stack size is variable, it probably isn\u0027t a good idea to use BStackOrHeap? We do need to define a stack size there right.",
      "parentUuid": "7036ecbe_81079504",
      "revId": "134fcc056954e9ec32c86bf96b29a7ca93029822",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0670835_37d15d63",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 13
      },
      "lineNbr": 331,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2021-06-27T09:58:31Z",
      "side": 1,
      "message": "Just always use the heap for large things, it\u0027s the easiest way. With ObjectDeleter it isn\u0027t so much of a problem.\n\nOr, for better performance, pre-allocate all needed buffers directly in the Inode object as fields.\n\nAnyway, I think the best course of action is:\n1) Fix the obvious problems (memory leaks, etc) in these patches and get them merged\n2) Evaluate the status of the XFS support: what works? what doesn\u0027t? How are performances? (in fs_shell, then in userlandfs, then running in kernel)\n3) Fix identified performance problems and crashes, as separate patches.\n\nProbably the write support will require some other architecture changes and different ways to manage the memory anyway.",
      "parentUuid": "1731ffbf_4e96f717",
      "revId": "134fcc056954e9ec32c86bf96b29a7ca93029822",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f410391a_bc148467",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 13
      },
      "lineNbr": 331,
      "author": {
        "id": 1000287
      },
      "writtenOn": "2021-06-27T15:05:54Z",
      "side": 1,
      "message": "Done\nI used heap here.",
      "parentUuid": "45499f93_bfa70837",
      "revId": "134fcc056954e9ec32c86bf96b29a7ca93029822",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aeaf702a_faf6c4e3",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 13
      },
      "lineNbr": 372,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2021-01-16T17:07:37Z",
      "side": 1,
      "message": "This method seems to have parts which could be split up into separate methods. It seems too long to me.",
      "revId": "134fcc056954e9ec32c86bf96b29a7ca93029822",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47fbab38_e00c2ea1",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 13
      },
      "lineNbr": 372,
      "author": {
        "id": 1000287
      },
      "writtenOn": "2021-06-28T16:51:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aeaf702a_faf6c4e3",
      "revId": "134fcc056954e9ec32c86bf96b29a7ca93029822",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6c8bd583_554df552",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 13
      },
      "lineNbr": 431,
      "author": {
        "id": 1000024
      },
      "writtenOn": "2021-01-16T17:07:37Z",
      "side": 1,
      "message": "Why is the allocation check removed?",
      "revId": "134fcc056954e9ec32c86bf96b29a7ca93029822",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2fc488d0_53ae9430",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 13
      },
      "lineNbr": 431,
      "author": {
        "id": 1000287
      },
      "writtenOn": "2021-06-26T08:33:59Z",
      "side": 1,
      "message": "Done\nAlso don\u0027t know why it was removed, I think it is needed.",
      "parentUuid": "6c8bd583_554df552",
      "revId": "134fcc056954e9ec32c86bf96b29a7ca93029822",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": false
    }
  ]
}