{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "46099d3d_ff85ab9b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-03-29T22:52:01Z",
      "side": 1,
      "message": "So.  We provide the kernel linker scripts on most if not all architectures.\nWhy do we want to depend on the built-in gcc spec linker script for riscv64?\n\nI\u0027m a bit concerned about changes to the built-in spec between gcc versions leading to breakages of our kernel booting.\n\n\nThen again, the counter to this is how our arm port broke due to the arm ini/fini_array change.  Our linker script was using the older standard, and gcc in 8 started doing ini/fini_array instead of ctors/dtors.",
      "revId": "49f7cbe25a2aa19d855eab89769ca8c74e96dcb6",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7c0d7f7a_730fba81",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2022-03-29T23:03:22Z",
      "side": 1,
      "message": "Linker script concept itself is a hack. It makes build process fragile. If it can be avoided it is the best to do so. It is also possible to drop linker script for x86[_64] but it need more work.",
      "revId": "49f7cbe25a2aa19d855eab89769ca8c74e96dcb6",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "71e20ac5_d165a5c4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2022-03-30T08:22:13Z",
      "side": 1,
      "message": "this makes future changes difficult for no obvious reason.",
      "revId": "49f7cbe25a2aa19d855eab89769ca8c74e96dcb6",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "423cb60d_6a81c4df",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2022-03-30T19:34:15Z",
      "side": 1,
      "message": "What future changes do you mean? I think that letting linker do its job without altering by linker script is better suited to future changes of compiler and linker. Linker script is not really needed for kernel on any architecture. Linker script may be needed only for boot loaders that use RAW format. Kernel is proper ELF executable. Haiku has an advantage of using own boot loader to load kernel so it allow complex kernel loading operations and preparations (relocations etc.). It is already work fine on riscv64.\n\nx86[_64] need nore work for support code patching. Code patching table section can be created with the same method as crti.o/crtn.o.",
      "parentUuid": "71e20ac5_d165a5c4",
      "revId": "49f7cbe25a2aa19d855eab89769ca8c74e96dcb6",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8a4f5984_0ee1a204",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2022-03-30T19:34:15Z",
      "side": 1,
      "message": "ctors vs init_array is defined during compiling, not linking. Linker is following information provided by compiler in object files. If linker script is not used, linker gracefully handle all combinations and potential future changes.",
      "parentUuid": "46099d3d_ff85ab9b",
      "revId": "49f7cbe25a2aa19d855eab89769ca8c74e96dcb6",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "87ef2ba2_5d429449",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2022-03-31T05:59:46Z",
      "side": 1,
      "message": "I don\u0027t see any advantages. Yeah it\u0027s easier to drop anything that could be difficult to understand for lld. But I don\u0027t understand why we should care the burden now and in the future.",
      "parentUuid": "423cb60d_6a81c4df",
      "revId": "49f7cbe25a2aa19d855eab89769ca8c74e96dcb6",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e44df2fa_ea49d36b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2022-03-31T09:48:02Z",
      "side": 1,
      "message": "What to you mean by \"burden\"? I think that linker scripts is a burden because it is hard to maintain and a few people knows how to write them in detail. It may need changed fo future compiler/linker versions. There were already troubles with kernel liker scripts in the past solved by copying linker script from another architecture.\n\nEliminating linker scripts will let linker do its job automatically and don\u0027t bother Haiku developers.",
      "parentUuid": "87ef2ba2_5d429449",
      "revId": "49f7cbe25a2aa19d855eab89769ca8c74e96dcb6",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}