{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d68170db_b9e265bc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000217
      },
      "writtenOn": "2023-01-18T07:13:11Z",
      "side": 1,
      "message": "Would it just make more sense to use BAutolock *inside* the member functions for the font manager classes?  Looks like GlobalFontManager::GetRevision does that already.  ",
      "revId": "192a8aa42d94f281e36c1e857cf8e8406b966fa8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c4e8d729_b5b290bb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000223
      },
      "writtenOn": "2023-01-18T12:29:48Z",
      "side": 1,
      "message": "Yes, but as it is now, you still need locking from the callers. (And I think there were corner cases of insufficient locking even before the addition of user fonts, but I\u0027ve not yet proved it and that\u0027s another issue)\n\nSimple example: if you want to be really strict with the MAX_USER_FONTS limit, you have to keep the manager locked between the check and the font addition, lest another thread comes in between and both fonts get added. Not a really good example as the check should probably be done in the add font methods, and I guess it doesn\u0027t really matter if a few fonts squeeze in in that narrow window, but it shows how just locking inside the font manager is not (currently) enough.\n\nAnother case is when you get a family or style. Those are pointers to objects that might disappear, so you better have the manager locked until you finish with them. Maybe this can be solved using BReferences throughout? At least FontStyle is BReferenceable.",
      "parentUuid": "d68170db_b9e265bc",
      "revId": "192a8aa42d94f281e36c1e857cf8e8406b966fa8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3547ac3b_425a5290",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000223
      },
      "writtenOn": "2023-01-18T12:29:48Z",
      "side": 1,
      "message": "You may want to do to FontManagerBase::GetStyle(const char* familyName... what you\u0027ve done to FontManagerBase::GetFamily(const char* name), there\u0027s a duplicate GetStyle(styleName).",
      "revId": "192a8aa42d94f281e36c1e857cf8e8406b966fa8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "671e6498_eb0a5fea",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000223
      },
      "writtenOn": "2023-01-18T15:42:46Z",
      "side": 1,
      "message": "The GlobalFontManager also has a broken loop in the destructor.\nSorry I didn\u0027t notice before.",
      "revId": "192a8aa42d94f281e36c1e857cf8e8406b966fa8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fbab5448_aa7e8bfe",
        "filename": "src/servers/app/ServerApp.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1650,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2023-01-18T05:54:33Z",
      "side": 1,
      "message": "Locking here isn\u0027t required, to be moved at the place of fAppFontManager-\u003eLock();",
      "revId": "192a8aa42d94f281e36c1e857cf8e8406b966fa8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8345da53_cdfd79e4",
        "filename": "src/servers/app/ServerApp.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1955,
      "author": {
        "id": 1000223
      },
      "writtenOn": "2023-01-17T19:38:44Z",
      "side": 1,
      "message": "You want to keep the font manager locked until you finish with the returned familiy (or style, in the other cases below), so this won\u0027t do. We\u0027ll have to either:\n- Politely decline BAutolock help.\n- Preventively lock both font managers, which you probably don\u0027t want, and make sure there\u0027s no possibility of deadlock anywhere (which there would be now, having extended the life of the lock in add from file).\n- Factor out the message building (and then BAutolock wouldn\u0027t be of much help). Something like:\n\tgFontManager-\u003eLock();\n\tStuff* stuff \u003d gFontManager-\u003eGetStuff();\n\tif (stuff !\u003d NULL)\n\t\t_DoStuff(stuff);\n\tgFontManager-\u003eUnlock();\n\tif (stuff \u003d\u003d NULL) {\n\t\tfAppFontManager-\u003eLock();\n\t\t_DoStuff(fAppFontManager-\u003eGetStuff());\n\t\tfAppFontManager-\u003eUnlock();\n\t}\n\tfLink.Flush();\n- Let BAutolock grow a SetTo method that unlocks its current item and locks the new one, so that something like this would do exactly what we need:\n\tBAutolock locker(gFontManager);\n\tStuff* stuff \u003d gFontManager-\u003eGetStuff();\n\tif (stuff \u003d\u003d NULL) {\n\t\tlocker.SetTo(fAppFontManager);\n\t\tstuff \u003d fAppFontManager-\u003eGetStuff();\n\t}\n\t// rest of magic\n- Something else.",
      "revId": "192a8aa42d94f281e36c1e857cf8e8406b966fa8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa46c9ef_ec99a3e5",
        "filename": "src/servers/app/ServerApp.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1955,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-01-17T19:46:10Z",
      "side": 1,
      "message": "Friendly FYI:\n\nheaders/private/shared/AutoLocker.h supports the mentioned SetTo() functionality, among a few other quality-of-life improvements.",
      "parentUuid": "8345da53_cdfd79e4",
      "revId": "192a8aa42d94f281e36c1e857cf8e8406b966fa8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c8dbf4c9_0247efd9",
        "filename": "src/servers/app/ServerApp.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1955,
      "author": {
        "id": 1000217
      },
      "writtenOn": "2023-01-18T07:13:11Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "aa46c9ef_ec99a3e5",
      "revId": "192a8aa42d94f281e36c1e857cf8e8406b966fa8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "191b8768_ebce1d68",
        "filename": "src/servers/app/ServerApp.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1955,
      "author": {
        "id": 1000217
      },
      "writtenOn": "2023-01-18T07:13:11Z",
      "side": 1,
      "message": "AutoLocker seems to need the same type for both locks - so I tried using the base class like this:\n\nAutoLocker\u003cFontManagerBase\u003e fontLock(gFontManager);\n\nFontFamily* family \u003d gFontManager-\u003eFamilyAt(index);\nif (family \u003d\u003d NULL) {\n\tfontLock.SetTo(fAppFontManager, false);\n\n\tfamily \u003d fAppFontManager-\u003eFamilyAt(index);\n}\n\n...and it exploded the app_server.",
      "parentUuid": "aa46c9ef_ec99a3e5",
      "revId": "192a8aa42d94f281e36c1e857cf8e8406b966fa8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24d17012_d07b44a9",
        "filename": "src/servers/app/ServerApp.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1955,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-01-19T14:27:51Z",
      "side": 1,
      "message": "Marking it as unresolved until a new patch is uploaded, since the current one indeed results in unlocking too early.\n\nIt looks like the simplest solution here is to keep the code as it was in these functions, and accept that autolock don\u0027t work so well when juggling multiple locks.",
      "parentUuid": "c8dbf4c9_0247efd9",
      "revId": "192a8aa42d94f281e36c1e857cf8e8406b966fa8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab214336_fe7068bf",
        "filename": "src/servers/app/font/FontManager.cpp",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-01-17T04:47:11Z",
      "side": 1,
      "message": "This won\u0027t work. It was correct before; or you can use `TakeItem` (do we have that?)",
      "revId": "192a8aa42d94f281e36c1e857cf8e8406b966fa8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8243801_9e2c4250",
        "filename": "src/servers/app/font/FontManager.cpp",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-01-19T14:27:51Z",
      "side": 1,
      "message": "There is a RemoveItem, but using it here would just make things slower for no reason.\n\nCan\u0027t the list simply be set in \"owning\" mode so it takes care of deleting the items automatically?",
      "parentUuid": "ab214336_fe7068bf",
      "revId": "192a8aa42d94f281e36c1e857cf8e8406b966fa8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "381ec984_cf497133",
        "filename": "src/servers/app/font/FontManager.cpp",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-01-19T14:27:51Z",
      "side": 1,
      "message": "if this method does nothing it can be completely removed",
      "revId": "192a8aa42d94f281e36c1e857cf8e8406b966fa8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}