{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "5c56c613_f1f51a24",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2024-01-04T09:04:26Z",
      "side": 1,
      "message": "There is already a key for moving to start of line, pos1.\n\nthis should be cmd-left and cmd-right. not ctrl.",
      "revId": "b83ef2381dbc5a85c2edf5e67b1f6112fff8df3b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3804ed12_df6d4cf7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2024-01-04T10:07:11Z",
      "side": 1,
      "message": "I agree, I don\u0027t understand why control/alt here instead of command.\n\nI think BTextView shortcuts should not use the command key, they can use the control, option and shift keys instead, leaving the command key free for application shortcuts. Or indeed use the dedicated home/end keys for going at the start or end of the line.",
      "parentUuid": "5c56c613_f1f51a24",
      "revId": "b83ef2381dbc5a85c2edf5e67b1f6112fff8df3b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55ac9743_7dcfb409",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2024-01-04T15:53:55Z",
      "side": 1,
      "message": "I understand that you don\u0027t understand what I\u0027m trying to accomplish here. I\u0027ve tried my best to explain it but I must have done a bad job. This fits in to the overall Shortcut paradigm I\u0027m trying to accomplish. BTextView shortcuts must use Cmd for line-wise operations. This Web+ change however is optional. It is for internal consistency. For example Ctrl+Tab is used for switcher, the opposite of Windows\u0027s Alt+Tab. If we follow this paradigm to its logical conclusion this is where we end up. The alternative paradigm is to do Shortcuts like the Mac and reuse the same Command/Alt key for everything. That\u0027s also a valid way to go, but I\u0027m leaning towards the Windows with Ctrl and Alt swapped paradigm instead.",
      "parentUuid": "3804ed12_df6d4cf7",
      "revId": "b83ef2381dbc5a85c2edf5e67b1f6112fff8df3b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b138bd21_956efb4e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2024-01-04T16:27:34Z",
      "side": 1,
      "message": "\"like windows but ctrl alt swapped\" is a terrible choice, windows is a terribly OS to copy. Ctrl-tab for switcher is a good example, is it a terribly shortcut and causes me hand pain. And the only reason it is used is \"windows doesn\u0027t use this\" It should be cmd-tab , ctrl-tab can stay as an alternative for people who grew acustom to this.\n\nShift-ctrl instead of ctrl would ve great for BTextView to indicate \"on this line\" instead if \"on this word\". I agree we should not habe this conflict in webpositive.",
      "parentUuid": "55ac9743_7dcfb409",
      "revId": "b83ef2381dbc5a85c2edf5e67b1f6112fff8df3b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d63d5bb_c46c6290",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2024-01-04T17:21:54Z",
      "side": 1,
      "message": "\"\u0027like windows but ctrl alt swapped\u0027 is a terrible choice, Windows is a terribly OS to copy.\"\n\nSays you, but there are reasons that Windows is doing the things it is doing and there are reasons that Haiku should and is mostly consistent with the expectations of Windows users once Ctrl/Alt are swapped despite your prejudice against Windows and Windows users.\n\nPreviously I would have agreed with you and been on your side of this fence in the past because I want Haiku to behave as the Mac does, but in this case, there is discrepancy between the way Mac and Windows works, and Haiku should in my opinion go down the Windows route with Ctrl/Alt swapped over the Mac route of using Cmd everywhere ignoring conflicts way of doing things.\n\nIf we were to go with the Mac route instead, we should change the Switcher shortcut from Ctrl to Alt. But there is some wisdom to the current choice that you are overlooking, and you\u0027re overlooking it in this patch as well. That wisdom has to do with meeting the expectations of Windows users at least half-way while providing a consistent Shortcut paradigm.",
      "parentUuid": "b138bd21_956efb4e",
      "revId": "b83ef2381dbc5a85c2edf5e67b1f6112fff8df3b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "acc099f3_1c88fc0f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2024-01-04T19:34:40Z",
      "side": 1,
      "message": "I\u0027m sure. Yet, I do not accept an of your arguments.\nYou can\u0027t just claim that evidence exists, or reasons exist, then refuse to state those and then call me prejudiced. I\u0027ve been a mac user for over three months now, I can adjust to these shortcuts. Before I\u0027ve only ever used Windows, then Linux (also FreeBSD but same UX), and now Haiku for years. My point of view comes from someone developing Haiku for years, I\u0027ve been with Haiku since shortly after beta1, and I do not see what I\u0027ve done to get such disrespect in code reviews from you.\n\nI am perfectly happy to discuss arguments on their merit on their own, to listen to your side etc. But I am done with your combatative style of argumentation, dismissing the other sides validity by claiming they are ignorant, don\u0027t know what they talk about, claim are willfully ignoring arguments or evidence you\u0027ve never brought up. etc.\n\nIt doesn\u0027t do to just claim \"there is wisdow\" or \"there are reason\".\n\nThis also extends to the other change where I\u0027ve mostly tried to reason with you to explain to you where the disconnect comes from why all the other developers seem to disagree on your preference, even outlining alternatives only for you to ignore them and even claim they are uneccesary because the other change exists. (Or strawmanning like claiming that I\u0027ve said that it is fundamentally \"right\" to use delete, and not a preference, and then attacking me based on it while i\u0027ve never made such a claim) Which makes no sesnse at all, since nobody even agree to it, if you want to discuss options that atleast shows you are willing to compromise or consider alternate options that would achieve the same end goal: You beeing happy with your system, me beeing happy, and us beeing able to productively contribute to the same system.\n\nLast change you even seemed to argue that 7078 was intentional design, not a bug, and impossible to fix. Yet here you are proposing a change based on the exact same fix.\n\nAnd now arguing in the completely oposite direction, no longer with your \"everything needs to use cmd because BeOS knew everything\" (this quote is of course exagarated) but instead claiming we should copy Windows of all things.... by doing the exact oposite of what windows does.... yeah makes sense.\n\nTL;DR: Please actually discuss changes in reviews instead of trying to strongarm them in.",
      "parentUuid": "2d63d5bb_c46c6290",
      "revId": "b83ef2381dbc5a85c2edf5e67b1f6112fff8df3b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51698718_6444850a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2024-01-04T20:03:34Z",
      "side": 1,
      "message": "I apologize if I have offended, this was not my intent. I am also perfectly willing to discuss changes. I explain my reasoning. I didn’t mean any disrespect, just that you clearly are biased against Windows and you clearly have a different point of view. I’m trying to fix all the problems in the best way. Yes I am highly opinionated yes I will push back because I’m trying to make everything work consistently and I have a vision and it seems like everybody is against me when I’m only trying to help. My combative style may be tinged by how my changes tend to be received unfairly, and are either disallowed or reverted even though they are perfectly good changes.\n\nYes I said that #7078 was a design decision and not a bug, but I acknowledge that not everybody feels that way. Please don’t think I am attacking you personally. There is certainly room for disagreement and I won’t necessarily get my way and the system will be made worse as it has already that but that’s ok. I didn’t say it was impossible to fix, just that it was hard to fix, and boy was it ever hard to fix.\n\nWith 7078 fixed it allows us to be a bit more flexible with our shortcuts. Sorry if I’ve come off a bit strong here, it’s only because I’ve been treated so poorly and now I’m a bit defensive. You are not the reason for this, I shouldn’t take it out on you. But my changes are being held back by negative reviews and the system is suffering for it.",
      "parentUuid": "acc099f3_1c88fc0f",
      "revId": "b83ef2381dbc5a85c2edf5e67b1f6112fff8df3b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "639c53c7_5b5d9d27",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2024-01-04T21:03:08Z",
      "side": 1,
      "message": "I am biased against Windows, yes. But if windows does something right I will acknowledge it, and that is fine.\n\nWhat I am against is copying the system completely, wether that is Windows, MacOS or BeOS, we can arrive at our own conclusions of what we think is nice.\n\nIn this case especially designing for the case of users picking the \"switch ctrl and alt\" option seems really wrong to me, I enjoy using the normal way with cmd and I also enjoy that it is the same as macos in this case.\n\nI do not agree with changing this shortcut here. Testing this now I can see that macos does similarily in the way you propose. :)\nHowever, this introduces another problem: that is the shortcut meaning changing when the input bar is focused or not.\n\nBut, on the other hand macos\u0027s solution could would work here too. Use cmd-left for the input bar *when it is in focus* and for previous page next page when it is not.\n\nAnd the other option that I see is using ctrl-shift left/right for start/end of line.\n\nI accept your apology as it is given, thank you.",
      "parentUuid": "51698718_6444850a",
      "revId": "b83ef2381dbc5a85c2edf5e67b1f6112fff8df3b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ead209c_87c23752",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2024-01-04T21:19:43Z",
      "side": 1,
      "message": "I\u0027m trying to implement a vision here, which is, what Be would have done were Be still around to do it today. Sometimes this vision is at odds with other people\u0027s vision and sometimes I accidentally step into a hornet\u0027s nest of controversy especially lately with these shortcut changes lately.\n\nThis unfortunately may also be one of those changes. I\u0027m was expecting an even worse reaction to this change but I never really know for sure until I create the PR. If you hate it that\u0027s ok, it only means that our visions for Haiku are not aligned.\n\nI realize that Be\u0027s vision is a subjective yard stick so I\u0027ll try to better explain what that means to me. It essentially means a continuation of the Classic Mac OS, scratch that, actually more like Pink/Taligent/Copland i.e. the next evolutionary step past the Classic Mac OS which eventually became Mac OS X (and almost became BeOS but that\u0027s another story) but with elements of Windows, Amiga, and some unique changes sprinkled on top.\n\nIf you ever wondered where the tabs in BeOS come from take a look at seemingly the only Pink/Taligent OS screenshot (besides variants) available on the Internet:\n\nhttp://www.roughlydrafted.com/RD/Q4.06/36A61A87-064B-470D-8870-736DD59CEF48_files/pink.png\n\nClearly window tabs were inspired by that failed operating system, which did at least produce ICU which we use in Haiku today as the basis of our locale framework even if Taligent never saw a release.\n\nI have what Be actually produced to go off of, I have what we\u0027ve produced to go off of, I have Windows, I have Mac OS X, I have Linux to go off of.\n\nPlease do not say things like \"\u0027like Windows but ctrl alt swapped\u0027 is a terrible choice, Windows is a terribly OS to copy.\" if you don\u0027t want to set me off.\n\nI have respect for all 3 operating systems: Mac OS X, Windows, and Linux as well as BeOS and Haiku, and I don\u0027t appreciate you denigrating Windows like that. I could have said that better the first time, but that\u0027s what I meant.\n\nIn order to fulfill my vision, I need Windows not to be dismissed and at least be allowed to be seen as a reasonable option to pull ideas from when they are good. Same goes for Classic Mac OS, Mac OS X, macOS, Linux and even BeOS where I\u0027ve also pulled inspiration from. See the auto-scroll feature for a prominent example of where I\u0027ve pulled inspiration from BeOS.\n\nFor this change in particular, Windows and Windows users must be considered for it to make sense. I have recently learned that among current Haiku developers the idea of making changes to attract Windows users tends not to be seen as worthwhile, but I am still of the opinion that it is a good idea to make changes where appropriate to attract and cater to Windows users, as Be did in BeOS and ultimately would have done more of in the future. Same goes for macOS and Linux users, only where appropriate of course.\n\nTo make sense of this change, you have to look at how Shortcuts work on Windows. On Windows you use Ctrl as your shortcut almost everywhere just as on Haiku we use Command/Alt as our shortcut almost everywhere, there are 3 prominent exceptions to this on Windows: for the \"Task Switcher\" i.e. Alt+Tab, for Back and Forward in web browsers especially but not limited to in Edge, also Chrome and others and thirdly in the Command Prompt where ctrl+C is taken.\n\nIn Haiku we typically use Alt instead of Ctrl but do what Windows does except Alt instead of Ctrl. This was done by Be for two purposes. One, it eliminates the problem with excpetion #3, Ctrl+C works fine in Terminal, and Two, perhaps more importantly, it emulates the layout of a Mac keyboard on a PC keyboard by using Alt, the key physically in the place of Command on a Mac keyboard, instead of Control.\n\nFor Windows users, the idea in BeOS was that they would go into what we call \"Windows/Linux\" mode in Keymap, and that swaps Ctrl+Alt and then the system would return to back to more-or-less the way they expect it to work. Not in Terminal you use Alt+C instead of Ctrl+C there, but in other places\n\nFor the first exception, Swticher, BeOS and Haiku went with Ctrl+Tab, so that checks out, it will become Alt+Tab in \"Windows/Linux\" mode.\n\nThe one exception left besides Terminal, which was always going to be a bit weird, even on Windows Command Prompt that\u0027s true, is the shortcuts for Back and Forward in the web browser.\n\nThis change makes the shortcuts align with the opposite of on Windows with respect to Ctrl/Alt. Is this appropriate, is it better in this case to use Alt instead like any other shortcut? I would argue no, it is not better, because Alt conflicts with the line-wise keyboard navigation, control doesn\u0027t, and that\u0027s probably *why* back/forward use Alt and not control on Windows.\n\nOn macOS back and forward in browsers use Cmd instead, and this is and has been a problem in macOS for a long time. In macOS they had to go in disable the back and forward buttons when you\u0027re on a text view so that you don\u0027t accidentally trigger back and lose work.\n\nSo I have to say, perhaps somewhat shockingly, that in this case the Windows way is better, and we should copy it.\n\nIf you disagree with that, and thus disagree with the premise of this PS, then that is fine, but in that case we really should change the Switcher shortcut from Ctrl to Alt, because it makes no sense unless this PS does too.\n\nThanks for listening.",
      "parentUuid": "51698718_6444850a",
      "revId": "b83ef2381dbc5a85c2edf5e67b1f6112fff8df3b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e6a545d_8efc850d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2024-01-04T21:37:04Z",
      "side": 1,
      "message": "Yes, I think we should change the switcher from ctrl to alt.\nHowever, I also agree that it makes sense to allow motion memory to persist where possible. But this is always a tradeoff: We can\u0027t have both motion memory for macos and for windows stay intact at the same time, and the expectation that this happens for windows only if you pick some config option makes this even harder.\n(For motion memory, for the odd haiku user that wants to keep this, ctrl alt should be a second option. Perhaps the \"windows mode\" should do more than \"just swap these keys\", perhaps by the input server sending messages for keypresses indicating an action instead of the keys, and remapping them)\n\nI do like for example alt-left/alt-right for back/forward precisely because I\u0027ve used this in windows. In macos I almost never use this, despite it beeing the same shortcut again, because this works much much better in macos applications with scroll gestures (Which are an awesome feature and I wonder if they can\u0027t be adapted).\n\nIt beeing the same shortcut in both systems also means to me that it should ideally be the same, and not reversed only because we have an config option for this.\n\n\u003e In macOS they had to go in disable the back and forward buttons when you\u0027re on a text view so that you don\u0027t accidentally trigger back and lose work.\n\nIt\u0027s actually the same shortcut as you are proposing for textviews as macos does, so it\u0027s not disabled... just used differently. Keeping this shortcut here and adding it in BTextView would work exactly the same as in macos.\n\nI would advocate, still, however to use ctrl and ctrl-shift for wordwise and linewise navigation respectively. Precisely because we use cmd for application shortcuts primarily. : )\n\nAs for Windows beeing a good design for the shortcuts, my problem here is that I don\u0027t want to live with the opposite of what windows does. The twitcher is a perfect example too, it is alt-tab on macos, it is alt-tab on windows, it is alt-tab on linux... but beause of the \"opposite of windows\" we now pick ctrl-tab for it which makes no sense to me and just hurts to use for my left hand.\n\nSo yes, we can totally draw inspiration from windows, macos, linux, etc. when it makes sense, but \"it was done in windows\", on it\u0027s own is not an argument. That was my main point that I wanted to make.",
      "parentUuid": "7ead209c_87c23752",
      "revId": "b83ef2381dbc5a85c2edf5e67b1f6112fff8df3b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78cbc170_b336868f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2024-01-05T06:50:09Z",
      "side": 1,
      "message": "\u003e Yes, I think we should change the switcher from ctrl to alt.\n\nOf course that would move away with what Be was trying to achieve, even so, yes, that would be the other option. Ctrl+Tab is a bit weird but I\u0027ve gotten used to it. I wouldn\u0027t be terribly upset if switcher was changed to Alt+Tab, but like I said, I understand why the shortcut is the way it is.\n\n\u003e It\u0027s actually the same shortcut as you are proposing for textviews as macos does, so it\u0027s not disabled... just used differently. Keeping this shortcut here and adding it in BTextView would work exactly the same as in macos.\n\nThere\u0027s a key difference. We\u0027re not disabling Back/Forward shortcuts when you\u0027re focused on a BTextView, we disable the BTextView shortcuts instead. This means that you are free to trigger the Back/Forward shortcuts, potentially losing your work due to accidental key presses.\n\nThis was also true in the past on Mac OS X but has since been rectified by browsers to disable the back and forward shortcuts when you\u0027re on a text view.\n\n\u003e I would advocate, still, however to use ctrl and ctrl-shift for wordwise and linewise navigation respectively. Precisely because we use cmd for application shortcuts primarily. :)\n\nI am strongly against that. Back/forward shortcuts are one thing, but using Cmd vs Control for line-wise vs. word-wise shortcuts is another. Line-wise actions should be triggered by Alt unless you\u0027re in Windows/Linux mode, then they are triggered by Ctrl. Alt is the Haiku/Mac way, Ctrl is the Windows way, this is controlled by the keymap setting. I don\u0027t want to use Windows-style word-wise shortcuts in regular Haiku mode, plus you\u0027d break then break expectations in Win/Linux mode. No you haven\u0027t thought this idea through.\n\n\u003e As for Windows being a good design for the shortcuts, my problem here is that I don\u0027t want to live with the opposite of what windows does. The twitcher is a perfect example too, it is alt-tab on macos, it is alt-tab on windows, it is alt-tab on linux... but because of the \"opposite of windows\" we now pick ctrl-tab for it which makes no sense to me and just hurts to use for my left hand.\n\nOk fair enough on this point. I can understand you don\u0027t like opposite of what Windows does, you want it to work the Mac way not the Windows way, I can certainly understand that.\n\n\u003e So yes, we can totally draw inspiration from windows, macos, linux, etc. when it makes sense, but \"it was done in windows\", on it\u0027s own is not an argument. That was my main point that I wanted to make.\n\nSure, it\u0027s not just because Windows does it that way, there are other legitimate reasons here for this choice.",
      "parentUuid": "1e6a545d_8efc850d",
      "revId": "b83ef2381dbc5a85c2edf5e67b1f6112fff8df3b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e52d3897_3265e43a",
        "filename": "src/apps/webpositive/BrowserWindow.cpp",
        "patchSetId": 7
      },
      "lineNbr": 491,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2024-01-04T07:19:34Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tfHistoryMenu-\u003eAddItem(fBackMenuItem \u003d new BMenuItem(B_TRANSLATE(\"Back\"), new BMessage(GO_BACK),\n\t\t\t\t\t\t\t  B_LEFT_ARROW, B_NO_COMMAND_KEY | B_CONTROL_KEY));\n\tfHistoryMenu-\u003eAddItem(\n\t\tfForwardMenuItem \u003d new BMenuItem(B_TRANSLATE(\"Forward\"), new BMessage(GO_FORWARD),\n\t\t\tB_RIGHT_ARROW, B_NO_COMMAND_KEY | B_CONTROL_KEY));\n```",
      "range": {
        "startLine": 487,
        "startChar": 0,
        "endLine": 491,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "b83ef2381dbc5a85c2edf5e67b1f6112fff8df3b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8b07b227_472181c5",
        "filename": "src/kits/interface/Window.cpp",
        "patchSetId": 7
      },
      "lineNbr": 285,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2024-01-04T07:19:34Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\treturn B_SHIFT_KEY | B_CONTROL_KEY | B_OPTION_KEY | B_COMMAND_KEY | B_NO_COMMAND_KEY\n\t\t| B_MENU_KEY;\n```",
      "range": {
        "startLine": 283,
        "startChar": 0,
        "endLine": 285,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "b83ef2381dbc5a85c2edf5e67b1f6112fff8df3b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}