{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "db59dfc9_5859dbb5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2024-01-09T17:03:53Z",
      "side": 1,
      "message": "Tested on real hardware, speed goes from 2MB/s to 16MB/s",
      "revId": "bfbe0bd71b8a9f809b7447036093d6b915e8a7fa",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d38c5350_39a04f13",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2024-01-09T17:16:49Z",
      "side": 1,
      "message": "I think the way this logic is implemented (and given the current state of the code) this just adds confusion to the logic. I intend to refactor a lot of the send/receive logic shortly, and can work on this in the process. I think there\u0027s a way to add this which is much cleaner, fixing the TODOs at the same time.",
      "revId": "bfbe0bd71b8a9f809b7447036093d6b915e8a7fa",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "64d778c0_5c28df7a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2024-01-09T18:11:37Z",
      "side": 1,
      "message": "Well, I understand you wrote this already 10 days ago. Given the small size of the patch and the real benefit for the enduser, this would help nightly users anyway. Why would I have to wait when updating packages if applying this patch fixes it?",
      "parentUuid": "d38c5350_39a04f13",
      "revId": "bfbe0bd71b8a9f809b7447036093d6b915e8a7fa",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ca1f38e8_c4e2d822",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2024-01-09T18:41:03Z",
      "side": 1,
      "message": "On systems with low memory (512MB or less; and yes, we do have users on systems like that still) this could cause serious problems. I think the checks for available memory may be more necessary than one realizes, especially if there\u0027s a dozen+ TCP sessions open at once.",
      "parentUuid": "64d778c0_5c28df7a",
      "revId": "bfbe0bd71b8a9f809b7447036093d6b915e8a7fa",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "87ccc905_d039aa47",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2024-01-09T19:46:46Z",
      "side": 1,
      "message": "I thought about this more and I think there\u0027s another reason to avoid merging this just yet: SACK. If our SACK implementation isn\u0027t working right, then we have to fall back to full retransmissions every time. In environments with even small (\u003c\u003d1%) packet loss, that can mean tons of data is retransmitted which, with a smaller window size, it wouldn\u0027t be. Honestly I wonder if such large window sizes should be used without SACK at all, but I haven\u0027t looked at the RFCs here.",
      "parentUuid": "ca1f38e8_c4e2d822",
      "revId": "bfbe0bd71b8a9f809b7447036093d6b915e8a7fa",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a3ff10f_3ee9e729",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2024-01-10T12:35:52Z",
      "side": 1,
      "message": "Your \"I will refactor this later, please do not merge\" comments are a bit annoying. Then you end up doing a refactor that ignores the changes, and they have to be rebased on your work.\n\nLet\u0027s do it in the other way instead: we merge this first, and you try to not break it when refactoring.\n\nWhat with the \"if SACK is\u0027t working\"? There has been no bugs for a while about SACK (there were some, but they were fixed. Now everyone looks suspiciously at SACK without any basis). Also, I don\u0027t see how this could happen, SACK isn\u0027t supposed to add any retransmissions. It\u0027s just an indication that the retransmissions can omit certain packets that were already received.\n\nAnyway, the SACK option cannot possibly lead to more retransmissions, the only thing it allows the sender to do is temporarily delay re-sending the packets for which there was a selective ACK (not even cancel them, because the received is allowed to \"change its mind\", that is, flush its reception window of these pending selectively acknowledged packets).",
      "parentUuid": "87ccc905_d039aa47",
      "revId": "bfbe0bd71b8a9f809b7447036093d6b915e8a7fa",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b800b10a_009c1d79",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2024-01-10T17:13:49Z",
      "side": 1,
      "message": "\u003e Then you end up doing a refactor that ignores the changes, and they have to be rebased on your work.\n\nWell, at least in the case of the VFS change, I intended to rebase the other change myself. I should have gotten to that yesterday but didn\u0027t. I will do that shortly.\n\n\u003e we merge this first, and you try to not break it when refactoring.\n\nAnd the memory usage concerns I noted above?\n\n\u003e Anyway, the SACK option cannot possibly lead to more retransmissions\n\nIt seems I was not clear. I don\u0027t mean that SACK will lead to more retransmissions, I mean it will lead to less. When I tested with small amounts of packet loss in the TCP shell, SACK was not used at all, as far as I could see (and axeld saw the same it appears.)\n\nSuppose without SACK that one side sent 64K of data, a full window\u0027s worth. The first or second packet in this set was \"lost\"; so the receiving TCP on Haiku sends a duplicate ACK as soon as it sees the out-of-order packet. The server then retransmits all 64K of data.\n\nBut if we increase the window size to (say) 1MB, and a packet at the beginning of the window is lost, now we have to retransmit 1MB. (Or 512KB, or ...) That could seriously degrade connection speeds, due to all the retransmitted data.",
      "parentUuid": "2a3ff10f_3ee9e729",
      "revId": "bfbe0bd71b8a9f809b7447036093d6b915e8a7fa",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}