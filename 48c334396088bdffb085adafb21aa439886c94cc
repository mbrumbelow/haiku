{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4a295c0b_ec6d1e4d",
        "filename": "headers/private/kernel/fs/fd.h",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2024-07-12T22:31:53Z",
      "side": 0,
      "message": "IMO, instead of reusing \"cookie\" for these, it would be better to just add another void* to this union.",
      "revId": "48c334396088bdffb085adafb21aa439886c94cc",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe61ebc9_fe884d41",
        "filename": "headers/private/kernel/fs/fd.h",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2024-07-12T22:33:51Z",
      "side": 0,
      "message": "Socket and event queue conceptually matches \"cookie\" field because it are bound to each file descriptor instance, not file.",
      "parentUuid": "4a295c0b_ec6d1e4d",
      "revId": "48c334396088bdffb085adafb21aa439886c94cc",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f925e6e_16defb8a",
        "filename": "headers/private/kernel/fs/fd.h",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2024-07-12T22:45:29Z",
      "side": 0,
      "message": "At least in the case of event_queue there\u0027s no definite necessity for that to be the case. I haven\u0027t looked at the socket structures but I\u0027d imagine something similar is true there. So it seems to make more sense to keep it separate from the cookie field.",
      "parentUuid": "fe61ebc9_fe884d41",
      "revId": "48c334396088bdffb085adafb21aa439886c94cc",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8dec68da_2d336ca3",
        "filename": "headers/private/kernel/fs/fd.h",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2024-07-12T22:50:31Z",
      "side": 0,
      "message": "2 pointers will be never needed for anonymous FDs, \"cookie\" is a right here.\n\nFor named files, mount/vnode union represent thing to be open (file, directory, volume) and \"cookie\" represent opened file descriptor instance (each open syscall create new one).\n\nFor anonymous files there is nothing to open so union is always NULL.",
      "parentUuid": "2f925e6e_16defb8a",
      "revId": "48c334396088bdffb085adafb21aa439886c94cc",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c7b0904_d1957dbf",
        "filename": "headers/private/kernel/fs/fd.h",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2024-07-12T22:55:56Z",
      "side": 0,
      "message": "If we ever plan to make possible to create named event_queue, it will be handled in a same way as FIFO and will have a vnode.",
      "parentUuid": "8dec68da_2d336ca3",
      "revId": "48c334396088bdffb085adafb21aa439886c94cc",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c16e6870_1b428edd",
        "filename": "headers/private/kernel/fs/fd.h",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2024-07-12T23:44:51Z",
      "side": 0,
      "message": "The point is that the structure has two pointers at present: the one in \"u\" and the \"cookie\". Before this commit, \"u\" will always be set, and \"cookie\" might refer to additional data related to this FD\u0027s usage of it. Now, \"u\" will sometimes not be set, and \"cookie\" might contain the actually important structure.\n\nI thus think it makes much more sense to store the pointer in \"u\" even in this case. Since we will always have two pointers here, this change affects source code only, so it\u0027s not even a loss of efficiency.",
      "parentUuid": "4c7b0904_d1957dbf",
      "revId": "48c334396088bdffb085adafb21aa439886c94cc",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1da967e2_3eafd9a7",
        "filename": "headers/private/kernel/fs/fd.h",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2024-07-12T23:49:47Z",
      "side": 0,
      "message": "What is the problem with that? u \u003d\u003d NULL \u003d\u003e anonymous file, u !\u003d NULL \u003d\u003e named file. Pointer to internal file descriptor object should be never referenced directly outside of implementation of specific file descriptor type. External code should not care what is set in \"u\" and \"cookie\".",
      "parentUuid": "c16e6870_1b428edd",
      "revId": "48c334396088bdffb085adafb21aa439886c94cc",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02ba4b5d_36c17e59",
        "filename": "headers/private/kernel/fs/fd.h",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2024-07-13T00:30:10Z",
      "side": 0,
      "message": "It would be also more messy and confusing to add void* field to union because it become ambiguous where to put object pointer: to u or cookie. With current patch version it is obvious: only \"vnode\" and \"mount\" are going to \"u\", everything else go to \"cookie\".",
      "parentUuid": "1da967e2_3eafd9a7",
      "revId": "48c334396088bdffb085adafb21aa439886c94cc",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a08eaea0_73490481",
        "filename": "headers/private/kernel/fs/fd.h",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2024-07-13T00:53:20Z",
      "side": 0,
      "message": "I don\u0027t think it would be more messy or confusing, because the primary pointer would go into \"u\" and the secondary into \"cookie\" no matter what.",
      "parentUuid": "02ba4b5d_36c17e59",
      "revId": "48c334396088bdffb085adafb21aa439886c94cc",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a8014a0_d4cfb742",
        "filename": "headers/private/kernel/fs/fd.h",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2024-07-13T00:58:32Z",
      "side": 0,
      "message": "There are no such things as primary and secondary pointers (POSIX or UNUX-like OSes also have no such concept). There are file pointer and opened file descriptor instance pointer. If it will be 2 void* pointers in struct, it will of course be more confusing what to use. In current patch version \"u\" is intended only for internal VFS use and drivers/kernel add-ons should not touch that.",
      "parentUuid": "a08eaea0_73490481",
      "revId": "48c334396088bdffb085adafb21aa439886c94cc",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6896ad35_aef00d74",
        "filename": "headers/private/kernel/fs/fd.h",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2024-07-22T22:15:04Z",
      "side": 0,
      "message": "We might also add ports to be openable as FDs. In that case we definitely would have a \"cookie\" object to represent e.g. permissions this FD had on the port. So we want to have more than just vnode/mount in here.\n\nCan we at least restore event_queue and net_socket objects, even if we don\u0027t add a void*?",
      "parentUuid": "0a8014a0_d4cfb742",
      "revId": "48c334396088bdffb085adafb21aa439886c94cc",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}