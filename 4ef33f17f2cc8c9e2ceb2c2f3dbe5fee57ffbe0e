{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1c48b67b_363e1a72",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2023-07-10T06:18:18Z",
      "side": 1,
      "message": "Can we switch to constexpr constants for modern GCC and stick with the enum/#define for older compilers?\n\nThere may be downsides to introducing new potentially common names in the global namespace.",
      "revId": "4ef33f17f2cc8c9e2ceb2c2f3dbe5fee57ffbe0e",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "373daf87_23007409",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000391
      },
      "writtenOn": "2023-07-10T06:44:29Z",
      "side": 1,
      "message": "I am trying to convert them to `enum` but issues with overload resolution require usage of normal `const` variables instead, unless some modifications to the API is done.",
      "parentUuid": "1c48b67b_363e1a72",
      "revId": "4ef33f17f2cc8c9e2ceb2c2f3dbe5fee57ffbe0e",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53cbb7f8_97dfd006",
        "filename": "headers/os/interface/View.h",
        "patchSetId": 2
      },
      "lineNbr": 126,
      "author": {
        "id": 1000391
      },
      "writtenOn": "2023-07-10T00:45:57Z",
      "side": 1,
      "message": "Makes more sense to turn this into an enumeration.\n\nHowever, this causes some problems when calling overloaded APIs taking a `uint32 resizeMask` parameter. The values would require conversion from the special enumeration type into uint32. This makes the overload potentially ambiguous with the one taking a `bool` parameter, unless the consuming code is updated to use an explicit cast to `uint32`.",
      "range": {
        "startLine": 111,
        "startChar": 0,
        "endLine": 126,
        "endChar": 63
      },
      "revId": "4ef33f17f2cc8c9e2ceb2c2f3dbe5fee57ffbe0e",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c918e8d4_6a7cdc60",
        "filename": "headers/os/interface/View.h",
        "patchSetId": 2
      },
      "lineNbr": 126,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-07-10T02:18:19Z",
      "side": 1,
      "message": "Why not just have the parameter be changed to be the resize_mask type?\n\nYou will need to check the symbol mangling to be sure that doesn\u0027t break ABI (but even if it does there are workarounds.) Note that you can specify enum type if necessary: e.g. \"enum something : uint32\".",
      "parentUuid": "53cbb7f8_97dfd006",
      "range": {
        "startLine": 111,
        "startChar": 0,
        "endLine": 126,
        "endChar": 63
      },
      "revId": "4ef33f17f2cc8c9e2ceb2c2f3dbe5fee57ffbe0e",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aad5bfb9_76909cbe",
        "filename": "headers/os/interface/View.h",
        "patchSetId": 2
      },
      "lineNbr": 126,
      "author": {
        "id": 1000391
      },
      "writtenOn": "2023-07-10T02:53:10Z",
      "side": 1,
      "message": "\u003e Note that you can specify enum type if necessary: e.g. \"enum something : uint32\".\n\nI am aware of such syntax, but this is a C++11 feature.\n\n\u003e there are workarounds\n\nWhat are the workarounds? I cannot think of any other than re-exporting the old symbol as an alias (while hiding the prototype from the headers).",
      "parentUuid": "c918e8d4_6a7cdc60",
      "range": {
        "startLine": 111,
        "startChar": 0,
        "endLine": 126,
        "endChar": 63
      },
      "revId": "4ef33f17f2cc8c9e2ceb2c2f3dbe5fee57ffbe0e",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f296c291_a4b74cc7",
        "filename": "headers/os/interface/View.h",
        "patchSetId": 2
      },
      "lineNbr": 126,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-07-10T02:59:42Z",
      "side": 1,
      "message": "Ah, I wasn\u0027t aware that\u0027s C++11-only.\n\nYes, that workaround. We do that already in a bunch of places, actually.",
      "parentUuid": "aad5bfb9_76909cbe",
      "range": {
        "startLine": 111,
        "startChar": 0,
        "endLine": 126,
        "endChar": 63
      },
      "revId": "4ef33f17f2cc8c9e2ceb2c2f3dbe5fee57ffbe0e",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88ccae74_5faae059",
        "filename": "headers/os/interface/View.h",
        "patchSetId": 2
      },
      "lineNbr": 126,
      "author": {
        "id": 1000391
      },
      "writtenOn": "2023-07-10T05:20:48Z",
      "side": 1,
      "message": "\u003e Why not just have the parameter be changed to be the resize_mask type?\n\nIn that case, `enum` members will have the `resize_mask` type and will fit the modified overload. However, for mask/flag types, when several members are `or`ed to each other, the result will become its underlying integer type (`int`, `uint32`,...).\n\nWe either have to explicitly define a `operator|` function, maintain two overloads, or force every consumer to do an explicit cast every time that function is called. Which solution is acceptable?",
      "parentUuid": "f296c291_a4b74cc7",
      "range": {
        "startLine": 111,
        "startChar": 0,
        "endLine": 126,
        "endChar": 63
      },
      "revId": "4ef33f17f2cc8c9e2ceb2c2f3dbe5fee57ffbe0e",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "882a00cb_98ae7e48",
        "filename": "headers/os/interface/View.h",
        "patchSetId": 2
      },
      "lineNbr": 126,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-07-10T05:32:39Z",
      "side": 1,
      "message": "Does operator| solution work with GCC2? If so that seems fine?\n\nOtherwise I guess this can stay asis.",
      "parentUuid": "88ccae74_5faae059",
      "range": {
        "startLine": 111,
        "startChar": 0,
        "endLine": 126,
        "endChar": 63
      },
      "revId": "4ef33f17f2cc8c9e2ceb2c2f3dbe5fee57ffbe0e",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a379e08_eb6e6cc1",
        "filename": "headers/os/interface/View.h",
        "patchSetId": 2
      },
      "lineNbr": 126,
      "author": {
        "id": 1000391
      },
      "writtenOn": "2023-07-10T08:02:57Z",
      "side": 1,
      "message": "The API involved is the constructor of `BView`. The flags are passed around all classes in the hierarchy.\n\nTherefore, changing the type of the parameter would affect more than 200 files around the Haiku source tree.\n\nI think keeping these values as enums and then adding a few casts where needed should work. Or, if source compatibility must be preserved at all costs, leave them as constant integers.",
      "parentUuid": "882a00cb_98ae7e48",
      "range": {
        "startLine": 111,
        "startChar": 0,
        "endLine": 126,
        "endChar": 63
      },
      "revId": "4ef33f17f2cc8c9e2ceb2c2f3dbe5fee57ffbe0e",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af2b870b_1bcc1025",
        "filename": "headers/os/interface/View.h",
        "patchSetId": 2
      },
      "lineNbr": 126,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-07-10T15:48:12Z",
      "side": 1,
      "message": "Why not add an operator| rather than the casts?",
      "parentUuid": "9a379e08_eb6e6cc1",
      "range": {
        "startLine": 111,
        "startChar": 0,
        "endLine": 126,
        "endChar": 63
      },
      "revId": "4ef33f17f2cc8c9e2ceb2c2f3dbe5fee57ffbe0e",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b2fb01a_66df8af5",
        "filename": "headers/os/interface/View.h",
        "patchSetId": 2
      },
      "lineNbr": 126,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-07-10T20:38:20Z",
      "side": 1,
      "message": "I did a quick test for ABI, changing the parameter from an int to a named enum, and indeed this is an ABI-breaking change. This is the difference with gcc-11, haven\u0027t tested gcc2 yet.\n\nTestA(const char*, unsigned int flags): _ZN5TestAC1EPKcj\nTestB(const char*, view_flags flags): _ZN5TestBC1EPKc10view_flags\n\nI guess a workaround would be a forwarding constructor of uint32 to named enum?",
      "parentUuid": "af2b870b_1bcc1025",
      "range": {
        "startLine": 111,
        "startChar": 0,
        "endLine": 126,
        "endChar": 63
      },
      "revId": "4ef33f17f2cc8c9e2ceb2c2f3dbe5fee57ffbe0e",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}