{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c31bb579_06f094dd",
        "filename": "src/system/runtime_loader/elf_symbol_lookup.cpp",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-07-18T04:49:11Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\t|| (lookupInfo.type \u003d\u003d B_SYMBOL_TYPE_DATA \u0026\u0026 type !\u003d STT_OBJECT \u0026\u0026 type !\u003d STT_FUNC)) {\n```",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 90,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "c41036ded2866eb21f37b84782648a0cd8330b2b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "224f031f_72bde005",
        "filename": "src/system/runtime_loader/elf_symbol_lookup.cpp",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-07-18T04:49:11Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\tif ((versionID \u0026 VER_NDX_FLAG_HIDDEN) \u003d\u003d 0 \u0026\u0026 versionIndex \u003d\u003d VER_NDX_GLOBAL\n\t\t\t\u0026\u0026 (lookupInfo.flags \u0026 LOOKUP_FLAG_DEFAULT_VERSION) \u003d\u003d 0) {\n```",
      "range": {
        "startLine": 142,
        "startChar": 0,
        "endLine": 145,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "c41036ded2866eb21f37b84782648a0cd8330b2b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6cdc0a1b_b329c36e",
        "filename": "src/system/runtime_loader/elf_symbol_lookup.cpp",
        "patchSetId": 1
      },
      "lineNbr": 190,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2024-07-23T18:10:52Z",
      "side": 1,
      "message": "Nitpick, since we pass allowLocal into this function it will always be true or false when we call match_symbol, so rather see it handled here instead of passed into each call. \nMaybe have a match_global and a match_local and make allowLocal const",
      "revId": "c41036ded2866eb21f37b84782648a0cd8330b2b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e512f3f6_ac3193e7",
        "filename": "src/system/runtime_loader/elf_symbol_lookup.cpp",
        "patchSetId": 1
      },
      "lineNbr": 190,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2024-07-23T18:33:07Z",
      "side": 1,
      "message": "But the match_symbol logic will be common across find_symbol_sysv and find_symbol_gnu so it doesn\u0027t make sense to handle it here.",
      "parentUuid": "6cdc0a1b_b329c36e",
      "revId": "c41036ded2866eb21f37b84782648a0cd8330b2b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "adce9983_aa42ae80",
        "filename": "src/system/runtime_loader/elf_symbol_lookup.cpp",
        "patchSetId": 1
      },
      "lineNbr": 190,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2024-07-23T18:49:20Z",
      "side": 1,
      "message": "I\u0027m not fond of leaf functions that have different modes. A function should do one thing and do it well. In this case we need to check the mode inside the for loop in each iteration.",
      "parentUuid": "e512f3f6_ac3193e7",
      "revId": "c41036ded2866eb21f37b84782648a0cd8330b2b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d522cfc_a9ac9fbb",
        "filename": "src/system/runtime_loader/elf_symbol_lookup.cpp",
        "patchSetId": 1
      },
      "lineNbr": 190,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2024-07-23T18:55:21Z",
      "side": 1,
      "message": "I\u0027m confused. The function does one thing (matches symbols) and \"does it well\". It needs to know whether local symbols should be matched or not. What\u0027s the problem here?",
      "parentUuid": "adce9983_aa42ae80",
      "revId": "c41036ded2866eb21f37b84782648a0cd8330b2b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03833805_0f82456b",
        "filename": "src/system/runtime_loader/elf_symbol_lookup.cpp",
        "patchSetId": 1
      },
      "lineNbr": 190,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2024-07-23T19:20:05Z",
      "side": 1,
      "message": "We to do a global match or match all, and it is the same on each match_symbol processed. I think it is cleaner doing something like match_all_symbols() and match_global_symbols() so the intent is clear.",
      "parentUuid": "2d522cfc_a9ac9fbb",
      "revId": "c41036ded2866eb21f37b84782648a0cd8330b2b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3354b07_8ca5a189",
        "filename": "src/system/runtime_loader/elf_symbol_lookup.cpp",
        "patchSetId": 1
      },
      "lineNbr": 190,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2024-07-23T19:40:10Z",
      "side": 1,
      "message": "I still don\u0027t understand what you are asking here.\n\nThis function looks for a symbol in the image. The symbol may be a \"local\" one, which generally (e.g. symbol resolution purposes) we don\u0027t care about and don\u0027t want to return. So, when \"allowLocal\" is false, if the only symbol this function finds is a local one, it will return nothing. But if \"allowLocal\" is true, then we will return local symbols, too.\n\nWhy would it make sense to have a different function for this? It is exactly the same logic with one decision different at the very end.",
      "parentUuid": "03833805_0f82456b",
      "revId": "c41036ded2866eb21f37b84782648a0cd8330b2b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "192a291a_44d35c6a",
        "filename": "src/system/runtime_loader/elf_symbol_lookup.cpp",
        "patchSetId": 1
      },
      "lineNbr": 190,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2024-07-23T20:16:49Z",
      "side": 1,
      "message": "It comes down to style I guess. You pass more arguments, and it control logic which could be handled before the call. Plus when debugging the name actually tells what it does.\nThis makes even more sense if you add more flags that changes logic, which usually happens in coming change. \n\nAlso I like clean API\u0027s that does what is expected and has few arguments. It\u0027s only a nitpick so do what you like with it.",
      "parentUuid": "b3354b07_8ca5a189",
      "revId": "c41036ded2866eb21f37b84782648a0cd8330b2b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9e1bd28a_60fe8bf0",
        "filename": "src/system/runtime_loader/elf_symbol_lookup.cpp",
        "patchSetId": 1
      },
      "lineNbr": 199,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-07-18T04:49:11Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\tsymIndex \u003d HASHCHAINS(image)[symIndex]) {\n```",
      "range": {
        "startLine": 199,
        "startChar": 0,
        "endLine": 199,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "c41036ded2866eb21f37b84782648a0cd8330b2b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}