{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "07e913aa_d3773ea4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2023-02-12T10:38:47Z",
      "side": 1,
      "message": "Unless you know this can\u0027t fail this seems wrong.",
      "revId": "40e7918ea4c7bac276c39eb767ce2b37891b74ab",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f77423ed_8c6e797d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000173
      },
      "writtenOn": "2023-02-12T10:46:46Z",
      "side": 1,
      "message": "\u003e Unless you know this can\u0027t fail this seems wrong.\n\nI would\u0027ve expected that err would have no effect as err is not being returned. I would expect there\u0027s no functional change, I even tried checking whether this would get optimized away by the compiler itself by rebuilding this, just to be extra sure, and this seemed to be the case. What did I miss? Was the original implementation incorrect to begin with, should err be returned if it\u0027s not equal to B_OK?",
      "parentUuid": "07e913aa_d3773ea4",
      "revId": "40e7918ea4c7bac276c39eb767ce2b37891b74ab",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60e8dbfb_1ebcb992",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2023-02-12T10:51:44Z",
      "side": 1,
      "message": "If it\u0027s optimized anyway what is the justification for removing this?\nIf an issue turns up in this code there is an obvious err variable you can check, if you remove it you loose the info that these calls can fail.",
      "parentUuid": "f77423ed_8c6e797d",
      "revId": "40e7918ea4c7bac276c39eb767ce2b37891b74ab",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "926c22f8_8cb3115e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000173
      },
      "writtenOn": "2023-02-12T11:02:17Z",
      "side": 1,
      "message": "It still seems off to me that we just have a warning-inducing err variable laying around and we don\u0027t use it. We do that very, very often, and this case seems like an exception. Maybe that\u0027s the case because we call the CurrentRoster function *now*, again, just to be sure, but it seems a bit superfluous to do that if we reach the else block.\n\nDo you think this patch could be improved in that regard?",
      "parentUuid": "60e8dbfb_1ebcb992",
      "revId": "40e7918ea4c7bac276c39eb767ce2b37891b74ab",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "498d29ab_662acb8c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2023-02-12T11:17:04Z",
      "side": 1,
      "message": "it starts the remote node once and then the fNode if I understand this correctly.\n\nIt might make sense to fail early if the remote node can\u0027t be started, but I am not too knowledgeable about this code specifically.",
      "parentUuid": "926c22f8_8cb3115e",
      "revId": "40e7918ea4c7bac276c39eb767ce2b37891b74ab",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00bd756c_240a02b5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-02-14T11:57:11Z",
      "side": 1,
      "message": "\u003e Unless you know this can\u0027t fail this seems wrong.\n\n\"this is wrong\" is not an helpful code review at all. It led to this discussion being defensive and agressive from both sides, instead of being useful and constructive.\n\n\u003e If it\u0027s optimized anyway what is the justification for removing this?\n\nDead code makes things harder to understand. Either we handle errors, or we don\u0027t.\n\n\u003e If an issue turns up in this code there is an obvious err variable you can check\n\nSo we should check it. Not declare it, set it and then completely ignore it.\n\nSo, what do we want to do in this function if one of the nodes fails? There are two options:\n\n- Try to continue anyway. Maybe you will have the audio and no video, or the video and no audio. I guess this was the intent here\n- Fail at the first error and return the code from this function\n\nIf we want to keep the first case, we should just add a comment explaining that\u0027s what we\u0027re doing: starting as much of the outputs as possible, and ignoring errors for the ones that don\u0027t work.\n\nIf we want to switch to the other option, we should have an error variable and do something with it.",
      "parentUuid": "498d29ab_662acb8c",
      "revId": "40e7918ea4c7bac276c39eb767ce2b37891b74ab",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d33c8c03_28be9957",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2023-02-14T14:25:58Z",
      "side": 1,
      "message": "\u003e \"this is wrong\" is not an helpful code review at all. It led to this discussion being defensive and agressive from both sides, instead of being useful and constructive.\n\nI didn\u0027t say that, and I honestly fail to see how either responses was defensive or agressi e. :/ \n\n\u003e So we should check it. Not declare it, set it and then completely ignore it.\n\ni ment in the \"ticket about broken functionality\", not the \"an error is raised\" way anyhow.\n\nWebkit had such an error code I\u0027ve recently added a use to check the error code, I think it is usefull to design with errorchecking in mind even if the error isn\u0027t used in that iteration of the code.",
      "parentUuid": "00bd756c_240a02b5",
      "revId": "40e7918ea4c7bac276c39eb767ce2b37891b74ab",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cf16ae02_74c05f03",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000173
      },
      "writtenOn": "2023-02-25T00:36:06Z",
      "side": 1,
      "message": "I thought about checking whether err is equal to B_OK and then continuing, I think I just reinvented the wheel and realized that this is why the author did not do anything with the err variable. I don\u0027t think that failing completely if one iteration goes wrong would improve the quality of the software.\n\nI think that doing this to \"suppress the warning\" and improve readability, as well as a comment explaining this, would make the most sense. Does this idea resonate with you both?",
      "revId": "40e7918ea4c7bac276c39eb767ce2b37891b74ab",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}