{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e2752e3f_523578ba",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000391
      },
      "writtenOn": "2023-05-30T00:51:32Z",
      "side": 1,
      "message": "A real-world use case for this feature is investigating the `si_addr` field on a `SIGSEGV` event to hunt down errors in memory mapping. For example, this trace helped me to find a bug in Haiku\u0027s `cut_area` implementation:\n\n    [  2025] map_file(\"libcoreclr.so mmap area\", [0x0], B_RANDOMIZED_ANY_ADDRESS, 0x4000001000, B_OVERCOMMITTING_AREA, 0x1, true, 0xffffffff, 0x0) \u003d 0x6f62 ([0x1396081d000]) (61 us)\n    [  2025] set_memory_protection(0x13963401000, 0x10000, B_READ_AREA|B_WRITE_AREA) \u003d 0x0 No error (208 us)\n    [  2025] map_file(\"libcoreclr.so mmap area\", [0x13963000000], B_EXACT_ADDRESS, 0x1000, B_OVERCOMMITTING_AREA, 0x1, true, 0xffffffff, 0x0) \u003d 0x70aa ([0x13963000000]) (747 us)\n    [  2025] --- SIGSEGV (Segmentation violation) {si_signo\u003dSIGSEGV, si_code\u003dSEGV_ACCERR, si_errno\u003d0x80001301, si_pid\u003d2025, si_uid\u003d0, si_addr\u003d0x13963407cb8, si_value\u003d(nil)} ---",
      "revId": "c70e8a0516417da84b84fb44bb2b2e9cc54c16e2",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1f93aafc_e2d59fad",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-05-30T01:40:07Z",
      "side": 1,
      "message": "IMHO we should probably move signal printing to a separate file at this point.\n\nAlso this does break debugger ABI. I don\u0027t think that\u0027s a problem at the moment?",
      "revId": "c70e8a0516417da84b84fb44bb2b2e9cc54c16e2",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6a2bf212_e210f7d1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000391
      },
      "writtenOn": "2023-05-30T02:50:30Z",
      "side": 1,
      "message": "I am aware of the consequences of adding the struct member at that position. However, it seems that there are no significant third-party users of the debugger API (probably except the already broken GDB port and some projects trying to emulate Haiku). Adding the info member at that position just seems to make more sense.",
      "parentUuid": "1f93aafc_e2d59fad",
      "revId": "c70e8a0516417da84b84fb44bb2b2e9cc54c16e2",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3306fbcb_81ba4b51",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-05-30T03:49:56Z",
      "side": 1,
      "message": "OK.\n\nCan we get the signal-related functions moved to a separate file in the \"strace\" directory?",
      "parentUuid": "6a2bf212_e210f7d1",
      "revId": "c70e8a0516417da84b84fb44bb2b2e9cc54c16e2",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1fd47f5d_eafd64e2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000391
      },
      "writtenOn": "2023-05-30T04:17:44Z",
      "side": 1,
      "message": "They use `print_to_string` which is in strace.cpp.",
      "parentUuid": "3306fbcb_81ba4b51",
      "revId": "c70e8a0516417da84b84fb44bb2b2e9cc54c16e2",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af49d555_82a081a6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-05-30T04:24:50Z",
      "side": 1,
      "message": "The other files use std::string and +\u003d for the same purpose, you can just do the same I think.",
      "parentUuid": "1fd47f5d_eafd64e2",
      "revId": "c70e8a0516417da84b84fb44bb2b2e9cc54c16e2",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dec2c5b3_b6478275",
        "filename": "src/bin/debug/strace/strace.cpp",
        "patchSetId": 1
      },
      "lineNbr": 526,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-05-30T01:40:07Z",
      "side": 1,
      "message": "you can use a macro for this whole function: #define CASE(X) case X: return #X;",
      "revId": "c70e8a0516417da84b84fb44bb2b2e9cc54c16e2",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7a8f40a0_6a15b54c",
        "filename": "src/bin/debug/strace/strace.cpp",
        "patchSetId": 1
      },
      "lineNbr": 526,
      "author": {
        "id": 1000391
      },
      "writtenOn": "2023-05-30T02:50:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dec2c5b3_b6478275",
      "revId": "c70e8a0516417da84b84fb44bb2b2e9cc54c16e2",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}