{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5cf944cf_78dacf3c",
        "filename": "docs/user/netservices/HttpSession.dox",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2021-09-15T06:53:12Z",
      "side": 1,
      "message": "I still don\u0027t agree with the use of BHttpSession for storing these things.\n\nIt should be named BHttpContext as in the previous iterations of the API.\n\nThe idea of a \"session\", for example for cookies, is very specific, and session cookies are non-persistent and never saved to disk. So, using BHttpSession as a name here is confusing.",
      "revId": "2b104d3cc1e3ccd11805ae0bd7854f74a0e923b6",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf4ce0dc_fa41805c",
        "filename": "docs/user/netservices/HttpSession.dox",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2021-09-18T07:15:56Z",
      "side": 1,
      "message": "The new way HTTP requests will be scheduled and executed will be on two separate threads (a control and a data thread). As part of the scheduling, the number of concurrent overall requests and the number of concurrent requests to a single server will be limited, much like libsoup. For now, this executor is named a HttpSession. It made sense to me to have the HttpSession own a CookieJar, a list of additionally accepted certificates and auth information.\n\nThe session name seemed apt because (1) it was not used in the old kit other than the patches on Gerrit and (2) all requests scheduled in a session share the same context, but when the session ends, the requests ends and the context disappears (unless it is stored in a persistent storage).\n\nAre you issues with the naming? Or with the design itself?",
      "parentUuid": "5cf944cf_78dacf3c",
      "revId": "2b104d3cc1e3ccd11805ae0bd7854f74a0e923b6",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84982127_343e9a09",
        "filename": "docs/user/netservices/HttpSession.dox",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2021-12-19T09:08:31Z",
      "side": 1,
      "message": "Any more thoughts on BHttpSession versus BHttpContext? I still prefer BHttpSession, but it is really a semantic preference. Running a request as part of a session rather than running it with a context feels better metaphorically. Especially when we are going to add support for HTTP2 or 3 where connections are really being kept open like a session.",
      "parentUuid": "bf4ce0dc_fa41805c",
      "revId": "2b104d3cc1e3ccd11805ae0bd7854f74a0e923b6",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cdfb91f_462eadc2",
        "filename": "docs/user/netservices/HttpSession.dox",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2021-12-19T09:28:38Z",
      "side": 1,
      "message": "My point is \"session\" already has a specific meaning in http (for example there are \"session cookies\"). The current BHttpContext manages both session cookies, and persistant cookies.\n\nBecause of this I would avoid the name \"HTTP session\" unless it very closely match the notion used in the http specifications and RFCs.\n\nThis doesn\u0027t mean we shouldn\u0027t use the name, just make sure we are very clear about the parts that will overlive the session (like persistant cookies) and how these are managed: are they automatically saved when the session is destroyed? Does the user need to more directly manipulate the cookie jar?",
      "parentUuid": "84982127_343e9a09",
      "revId": "2b104d3cc1e3ccd11805ae0bd7854f74a0e923b6",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db8ade35_e65aff23",
        "filename": "docs/user/netservices/HttpSession.dox",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2021-12-19T13:02:43Z",
      "side": 1,
      "message": "It is mostly a design question I have not figured out. There are HTTP requests, which for all intents and purposes are singletons. But these requests are executed in a context. This context consists of:\n - Cookies\n - Authentication information\n - Http 1+ Keepalive\n - Http 1.1 Persistent connections\n - Http 2+3 request multiplexing\n - Non-protocol properties of the way requests are build and connected to stay performant, e.g. a max number of parallel requests in total and/or per server. \n\nThe \u0027session\u0027 design models modern browser design where the browser has a standard browsing mode and private windows or tabs. All standard browsing requests would go through a shared context that has all the elements above. When the web browser exits, it will store the cookies and/or authentication information in a persistent storage and load it on next instances. A private browsing window/tab would have its own private context that does not share any of the information above.\n\nWhat the current design does not allow for is to share parts of the context between multiple contexts, for example sharing a cookie store between several contexts. That obviously is a limitation, but in top of my mind I cannot currently imagine what kind of usage patterns that would limit.\n\nHaving said that, I see how the use of the word session would potentially confuse an API user, so I am now leaning towards \u0027BHttpContext\u0027 objects as the point where one would run their requests.",
      "parentUuid": "8cdfb91f_462eadc2",
      "revId": "2b104d3cc1e3ccd11805ae0bd7854f74a0e923b6",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b23407a3_8cfb2b64",
        "filename": "docs/user/netservices/HttpSession.dox",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2021-12-22T08:13:49Z",
      "side": 1,
      "message": "I have given it more thought, and I have also floated some alternatives on IRC yesterday (BHttpScheduler, BHttpRunner). I think I am going back to BHttpSession as the best way of encapsulating what it does. \n\nThe description of BHttpSession is: Schedules and runs one or more BHttpRequests within a shared context of cookies and authentication credentials.\n\nI also refer to [Apple\u0027s URLSession](https://developer.apple.com/documentation/foundation/urlsession) and [libsoup\u0027s SoupSession](https://libsoup.org/libsoup-3.0/ch01s02.html#id-1.2.2.3.3).\n\nI will dive more into the question of persistent cookies and persistent cookie jars when I work on BCookieJar.",
      "parentUuid": "db8ade35_e65aff23",
      "revId": "2b104d3cc1e3ccd11805ae0bd7854f74a0e923b6",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a932c3a_dae39db1",
        "filename": "docs/user/netservices/HttpSession.dox",
        "patchSetId": 1
      },
      "lineNbr": 136,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2021-09-15T06:53:12Z",
      "side": 1,
      "message": "Why not use the copy constructor to achieve the same?",
      "revId": "2b104d3cc1e3ccd11805ae0bd7854f74a0e923b6",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e3f3197c_3f5d9cda",
        "filename": "docs/user/netservices/HttpSession.dox",
        "patchSetId": 1
      },
      "lineNbr": 136,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2021-09-18T07:15:56Z",
      "side": 1,
      "message": "Yeah this does not make any sense.",
      "parentUuid": "9a932c3a_dae39db1",
      "revId": "2b104d3cc1e3ccd11805ae0bd7854f74a0e923b6",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca763309_ae6f6de2",
        "filename": "headers/private/netservices2/NetServicesDefs.h",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2021-09-15T06:53:12Z",
      "side": 1,
      "message": "I think that exceptions should all inherit from a base class (std::exception or a custom one, maybe one specific to each kit).\n\nThe reason for this is the ability to do a general \"catch all exceptions\" case in an useful way.\n\nTypically code would look like this\n\ntry {\n    // do something\n} catch (const unsupported_protocol_exception\u0026 e) {\n    BAlert(B_TRANSLATE(\"Unsupported protocol\"));\n} catch (const Exception\u0026 e) {\n    BAlert(B_TRANSLATE(\"Something unexpected happened: %s\", e.what));\n}\n\nWithout a common base class, the second catch clause has no info at all to give, which will lead to a very uninformative error message, even worse than the strerror based ones we have now.",
      "revId": "2b104d3cc1e3ccd11805ae0bd7854f74a0e923b6",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd1acaf7_54dbc627",
        "filename": "headers/private/netservices2/NetServicesDefs.h",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2021-09-15T14:57:45Z",
      "side": 1,
      "message": "Seconded.",
      "parentUuid": "ca763309_ae6f6de2",
      "revId": "2b104d3cc1e3ccd11805ae0bd7854f74a0e923b6",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b83cd2ce_29e82e7e",
        "filename": "headers/private/netservices2/NetServicesDefs.h",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2021-09-18T07:15:56Z",
      "side": 1,
      "message": "I will post an update with a base type/interface for objects (BError) with support for Origin and Messages, and a standard derived BRuntimeError and BSystemError.",
      "parentUuid": "fd1acaf7_54dbc627",
      "revId": "2b104d3cc1e3ccd11805ae0bd7854f74a0e923b6",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "79ef0c0b_f4bd812e",
        "filename": "headers/private/netservices2/NetServicesDefs.h",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2021-12-19T09:08:31Z",
      "side": 1,
      "message": "The library now contains a BError base class in ErrorsExt.h/cpp.",
      "parentUuid": "b83cd2ce_29e82e7e",
      "revId": "2b104d3cc1e3ccd11805ae0bd7854f74a0e923b6",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}