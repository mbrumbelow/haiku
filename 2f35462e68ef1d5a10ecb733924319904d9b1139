{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8f0cf0e2_0684813c",
        "filename": "src/system/kernel/arch/arm64/VMSAv8TranslationMap.cpp",
        "patchSetId": 1
      },
      "lineNbr": 6,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-25T06:51:46Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (insert after):\n```c++\n#include \u003carray\u003e\n```",
      "range": {
        "startLine": 6,
        "startChar": 0,
        "endLine": 6,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "2f35462e68ef1d5a10ecb733924319904d9b1139",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1578f857_8ae023fd",
        "filename": "src/system/kernel/arch/arm64/VMSAv8TranslationMap.cpp",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-25T06:51:46Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` is to remove this line/these lines.",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 11,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "2f35462e68ef1d5a10ecb733924319904d9b1139",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2772f3e8_f35d6157",
        "filename": "src/system/kernel/arch/arm64/VMSAv8TranslationMap.cpp",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2024-08-25T19:22:47Z",
      "side": 1,
      "message": "Can we just use B_COUNT_OF rather than std::size?",
      "revId": "2f35462e68ef1d5a10ecb733924319904d9b1139",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d74ae999_ee9e49a1",
        "filename": "src/system/kernel/arch/arm64/VMSAv8TranslationMap.cpp",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2024-08-25T19:22:47Z",
      "side": 1,
      "message": "Is 256 a magic value, or an arbitrarily chosen one? If it\u0027s a hardware limit then it belongs in a constant.",
      "revId": "2f35462e68ef1d5a10ecb733924319904d9b1139",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "57a97f1e_af4d0709",
        "filename": "src/system/kernel/arch/arm64/VMSAv8TranslationMap.cpp",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-25T06:51:46Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\nVMSAv8TranslationMap::VMSAv8TranslationMap(bool kernel, phys_addr_t pageTable, int pageBits,\n\tint vaBits, int minBlockLevel)\n```",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 39,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "2f35462e68ef1d5a10ecb733924319904d9b1139",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "64d6b130_7ff65801",
        "filename": "src/system/kernel/arch/arm64/VMSAv8TranslationMap.cpp",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-25T06:51:46Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\nVMSAv8TranslationMap::SwitchUserMap(VMSAv8TranslationMap* from, VMSAv8TranslationMap* to)\n```",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 76,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "2f35462e68ef1d5a10ecb733924319904d9b1139",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5e177111_89e52727",
        "filename": "src/system/kernel/arch/arm64/VMSAv8TranslationMap.cpp",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-25T06:51:46Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tif (!from-\u003efIsKernel)\n```",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 80,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "2f35462e68ef1d5a10ecb733924319904d9b1139",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b4219034_0c8b2a8b",
        "filename": "src/system/kernel/arch/arm64/VMSAv8TranslationMap.cpp",
        "patchSetId": 1
      },
      "lineNbr": 82,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-25T06:51:46Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` is to remove this line/these lines.",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 82,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "2f35462e68ef1d5a10ecb733924319904d9b1139",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20307141_f4a91395",
        "filename": "src/system/kernel/arch/arm64/VMSAv8TranslationMap.cpp",
        "patchSetId": 1
      },
      "lineNbr": 112,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2024-08-25T19:22:47Z",
      "side": 1,
      "message": "Isn\u0027t there some better way to do this? Can\u0027t we use the team ID of the address space this map belongs to, to try and pick the ASID (team_id % max_asid or whatever), rather than iterating like this? Or at least store a \"last used ASID\" and then look for the first open slot starting from there.",
      "revId": "2f35462e68ef1d5a10ecb733924319904d9b1139",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9300984f_2a3f0b90",
        "filename": "src/system/kernel/arch/arm64/VMSAv8TranslationMap.cpp",
        "patchSetId": 1
      },
      "lineNbr": 120,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-25T06:51:46Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\t\tasm(\"tlbi aside1is, %0\" ::\"r\"(i \u003c\u003c 48));\n```",
      "range": {
        "startLine": 120,
        "startChar": 0,
        "endLine": 120,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "2f35462e68ef1d5a10ecb733924319904d9b1139",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}