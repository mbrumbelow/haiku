{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0adda5b9_6903e263",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2024-01-13T17:38:44Z",
      "side": 1,
      "message": "Any chance this could be done semi-automatically?",
      "revId": "7a93b3f6eb77772c21a1c2d97583d48f0f96787a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a6c6f305_7f281385",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2024-01-14T07:53:19Z",
      "side": 1,
      "message": "Added a question/note about C++ style casts.\n\nI will likely ask the wider community for a stance on whether there needs to be a space after a C-style cast or not. This is one of the settings of clang-format, and we can choose a default for the haiku-format tool.",
      "revId": "7a93b3f6eb77772c21a1c2d97583d48f0f96787a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a687e006_f6426cc5",
        "filename": "headers/private/media/experimental/AdapterIO.h",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2024-01-14T07:43:04Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\t\tstatus_t FlushBefore(off_t position);\n```",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 65,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "7a93b3f6eb77772c21a1c2d97583d48f0f96787a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb8b3596_2e939940",
        "filename": "headers/private/media/experimental/AdapterIO.h",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2024-01-14T07:53:19Z",
      "side": 1,
      "message": "This note can be ignored (it is the known header reformatting issue)",
      "parentUuid": "a687e006_f6426cc5",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 65,
        "endChar": 0
      },
      "revId": "7a93b3f6eb77772c21a1c2d97583d48f0f96787a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c5d749c_a1e4cef8",
        "filename": "src/kits/media/experimental/AdapterIO.cpp",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2024-01-14T07:43:04Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\tif (relative \u003e (off_t) oldLength)\n```",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 56,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "7a93b3f6eb77772c21a1c2d97583d48f0f96787a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a5d522b_1db6c274",
        "filename": "src/kits/media/experimental/AdapterIO.cpp",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2024-01-14T07:53:19Z",
      "side": 1,
      "message": "This (and following) three notes initially raised the question about what do casts look like, but in fact our coding guidelines prefer us to use C++-style casts. Would that be preferred in this case?",
      "parentUuid": "6c5d749c_a1e4cef8",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 56,
        "endChar": 0
      },
      "revId": "7a93b3f6eb77772c21a1c2d97583d48f0f96787a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ffd83fe5_f2fa980d",
        "filename": "src/kits/media/experimental/AdapterIO.cpp",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2024-01-14T07:43:04Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\tstatus_t status\n\t\t\t\u003d buffer-\u003eWriteAt(0, (void*) ((addr_t) oldBuffer + relative), oldLength - relative);\n```",
      "range": {
        "startLine": 58,
        "startChar": 0,
        "endLine": 59,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "7a93b3f6eb77772c21a1c2d97583d48f0f96787a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b9893a73_60907d5c",
        "filename": "src/kits/media/experimental/AdapterIO.cpp",
        "patchSetId": 1
      },
      "lineNbr": 210,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2024-01-14T07:43:04Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tconst BPositionIO* Buffer() const { return fBuffer; }\n```",
      "range": {
        "startLine": 207,
        "startChar": 0,
        "endLine": 210,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "7a93b3f6eb77772c21a1c2d97583d48f0f96787a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3327dd3d_cd0bc5ce",
        "filename": "src/kits/media/experimental/AdapterIO.cpp",
        "patchSetId": 1
      },
      "lineNbr": 416,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2024-01-14T07:43:04Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tBMallocIO* oldBuffer \u003d (BMallocIO*) fBuffer-\u003eBuffer();\n```",
      "range": {
        "startLine": 416,
        "startChar": 0,
        "endLine": 416,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "7a93b3f6eb77772c21a1c2d97583d48f0f96787a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}