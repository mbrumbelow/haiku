{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b1609f38_93ad34b9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-04-17T08:31:09Z",
      "side": 1,
      "message": "You should also fix the commit message, for example do something like this:\n\n    xfs: fix build with trace enabled, improve error checks\n    \n    - Remove trace referencing a non existing variable\n    - Instead of an assert, just log an error for XFS v5 filesystems and don\u0027t try to mount them\n\nWe use this format because several tools (including Gerrit used here for code review) will only show the first line. So we try to put info about what the commit changes there, as much as possible (of course you often can\u0027t fit everything in a single line). In the Gerrit overview your commit currently just reads \"XFS filesystem\" which isn\u0027t great.",
      "revId": "ce9494ef2fb0a6dfb0e0c316a72062b5c1219bc1",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af16f285_f974fab2",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 3
      },
      "lineNbr": 304,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2022-04-15T16:50:16Z",
      "side": 1,
      "message": "commenting isn\u0027t fixing. maybe using a B_PRI macro would fix it.",
      "revId": "ce9494ef2fb0a6dfb0e0c316a72062b5c1219bc1",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be4de54e_1a4b8b79",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 3
      },
      "lineNbr": 304,
      "author": {
        "id": 1000372
      },
      "writtenOn": "2022-04-16T02:49:59Z",
      "side": 1,
      "message": "Apologies for that, I will keep that in mind.\n\nNow regarding using B_PRI macro can you elaborate more on how to use that?\nFrom what I get till now is we are accessing fRoot before initialising it, so how does B_PRI fixes it?\nOnly other occurrences of it is in B_PRIdINO and B_PRIdOFF.",
      "parentUuid": "af16f285_f974fab2",
      "revId": "ce9494ef2fb0a6dfb0e0c316a72062b5c1219bc1",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a878718_5fd6e829",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 3
      },
      "lineNbr": 304,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-04-17T08:22:19Z",
      "side": 1,
      "message": "Hello,\n\nThe B_PRI macros are used to print Haiku specific types like int32, int64, etc.\nThey work similarly to the C99 \"PRI\" macros for int32_t, int64_t, etc.\n\nFor example to trace an int32 value you would do this:\n\n\n    int32 value \u003d something();\n    TRACE(\"Value: %\" B_PRId32, value);\n\nThese macros expand to things like \"d\" or \"ld\" depending on which CPU architecture you are targetting, because the int32 type is defined differently on some of them.\n\nSince TRACEs are not always enabled and tested on all systems, quite ofthen the macros and format strings are not correctly matched with the type of the argument, resulting in compiler warnings or errors.\n\nB_PRIdINO and B_PRIdOFF are used for printing ino_t and off_t types respectively.\n\nIn this case, if I see things right, the Inode class does not even have a member named fRoot. Is that right? If so, there is no reason to keep this commented out, it can simply be deleted. The commit message could explain that (this trace is trying to print something that doesn\u0027t exist), then everyone will understand why it is removed.",
      "parentUuid": "be4de54e_1a4b8b79",
      "revId": "ce9494ef2fb0a6dfb0e0c316a72062b5c1219bc1",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}