{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7a9d010a_7532f4d4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-05-05T19:37:43Z",
      "side": 1,
      "message": "I don\u0027t think we should use up the last bits just to do this. Using symbol versioning with this structure may not be sufficient because if other libraries pass it around between them and applications, then changing it will also break those libraries\u0027 ABI, not just libroot\u0027s ABI. So we should not take up such bits arbitrarily.\n\nIf POSIX really requires these flags, then let\u0027s leave them as 0, and Wine or other applications can check `#if CS5 \u003d\u003d 0`. If POSIX doesn\u0027t, then let\u0027s delete them altogether. But I don\u0027t think we should take up bitspace for them simply because one application uses them in a strange way.",
      "revId": "bb15c91017419625390cce64d88d214e5e917762",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb632458_27f65a94",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2025-05-05T20:37:36Z",
      "side": 1,
      "message": "It\u0027s hardly a \"strange\" way. It checks them, and sets the width accordingly. That is the one thing these things are good for. I don\u0027t see why it is somehow bad that they use a switch case for this. You\u0027d get the same problem with any other library or application that supports systems that have 5 or 6 width here.\n\nThis has another annoying side-effect, if you\u0027d actually request something with CS5 or CS\u0026 this will get through but silently become a CS7 instead, that to me is just *literally* broken. No matter if you want to support this or not.\n\nPosix should have a feature flag, or remove these. But it doesn\u0027t. We implement the rest, and we should implement this properly or not at all.\n\nHow is it any better to let implementations check for this value instead?",
      "parentUuid": "7a9d010a_7532f4d4",
      "revId": "bb15c91017419625390cce64d88d214e5e917762",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "739cad15_b2a03c90",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-05-05T21:02:19Z",
      "side": 1,
      "message": "The fact is that nothing else but Wine seems to use the switch (we have lots of ncurses applications and TUI tools but they don\u0027t seem to.) So patching Haiku just to make Wine slightly happier, especially if it uses up the last free bit here, seems overkill.\n\nIn POSIX, it says:\n\n\u003e The implementation shall support the functionality associated with the symbols CS7, CS8, CSTOPB, PARODD, and PARENB.\n\ni.e. there\u0027s no requirement to support CS5 or CS6.\n\nFurthermore, the standard for `tcsetattr` states:\n\n\u003e The tcsetattr() function shall return successfully if it was able to perform any of the requested actions, even if some of the requested actions could not be performed. It shall set all the attributes that the implementation supports as requested and leave all the attributes not supported by the implementation unchanged.\n\nSo returning error if CS5 or CS6 is set is actually wrong according to the spec, it should fall back to a supported width anyway. Thus there isn\u0027t any value to having specific values for these defined.",
      "parentUuid": "bb632458_27f65a94",
      "revId": "bb15c91017419625390cce64d88d214e5e917762",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "220b0e57_ea916bb0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2025-05-05T22:23:24Z",
      "side": 1,
      "message": "Okay. In any case, we would need something better than some heuristic wine can use to disable this.\n\nPerhaps we can have our own feature flag for this if posix does not have one. Isn there a precedent for this in our codebase?",
      "parentUuid": "739cad15_b2a03c90",
      "revId": "bb15c91017419625390cce64d88d214e5e917762",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9151ffd3_8bfdb51a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-05-06T02:50:48Z",
      "side": 1,
      "message": "Why do we need something better than \"some heuristic\"? What\u0027s wrong with `#if defined(CS5) \u0026\u0026 CS5 !\u003d CS6 \u0026\u0026 ...`? Clunky, maybe, but it works. Alternatively, you can just disable the warning on Haiku...",
      "parentUuid": "220b0e57_ea916bb0",
      "revId": "bb15c91017419625390cce64d88d214e5e917762",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b32d137f_9c657c5d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2025-05-08T15:39:44Z",
      "side": 1,
      "message": "Because we shpuld follow posix and not ask projects for some ridicilous workarounds?\n\nThese vars beeing the same is wrong. Simple as that.",
      "parentUuid": "9151ffd3_8bfdb51a",
      "revId": "bb15c91017419625390cce64d88d214e5e917762",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97848c47_1e1d0c33",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2025-05-15T09:17:20Z",
      "side": 1,
      "message": "\u003e Because we shpuld follow posix and not ask projects for some ridicilous workarounds?\n\nAs already discussed, POSIX does not require these constants to have different values, and also explicitly does not require us to correctly implement them (it does require us to define them, that\u0027s all, and it is very clear about that).\n\nSo, the argument about POSIX support is not valid here. You have already argued that this is \"following the letter and not the spirit\" of the spec, but that argument isn\u0027t acceptable. The specification is what\u0027s written in the specification, there is no \"spirit\".\n\nSo, you have to find another way to justfiy this. The argument that CS5 and CS6 are silently converted to CS7, instead of returning errors, is a valid one, for example, but as waddlesplash says, POSIX doesn\u0027t agree on that. You can bring that complaint to POSIX and have them fix the next version of the spec.\n\n\u003e we have lots of ncurses applications and TUI tools but they don\u0027t seem to\n\nThese flags are for serial port management, not for pseudo-ttys. So you are looking at the wrong place here. Tools like minicom, gtkterm, ... and any other that uses serial ports will surely want to use these flags in some way. TUI apps have no reason to do so.\n\n\u003e Using symbol versioning with this structure may not be sufficient because if other libraries pass it around between them and applications\n\nI am confused by this argument. We use symbol versioning for struct stat, which is very similar and just as likely to suffer from the same problem. And that appears to not cause a lot of problems.\n\n\u003e These vars beeing the same is wrong. Simple as that.\n\nIt is actually allowed by POSIX. So there is nothing \"wrong\" here. It is annoying, maybe, but it is not wrong.",
      "parentUuid": "b32d137f_9c657c5d",
      "revId": "bb15c91017419625390cce64d88d214e5e917762",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32f5563f_5105544c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000886
      },
      "writtenOn": "2025-05-19T12:50:49Z",
      "side": 1,
      "message": "Hello! I\u0027m interested in Haiku support from Wine too.\n\nIf tcgetattr() returns 0 for CSIZE, how should we interpret this value? Is the serial port in CS5? CS6? CS7?\n\nShould we hard-code that 0 means CS7 in Haiku, not CS5 or CS6 (which are equally 0)?",
      "parentUuid": "9151ffd3_8bfdb51a",
      "revId": "bb15c91017419625390cce64d88d214e5e917762",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b8196cc_89cdd4ba",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-05-19T15:15:45Z",
      "side": 1,
      "message": "\u003e We use symbol versioning for struct stat, which is very similar and just as likely to suffer from the same problem. And that appears to not cause a lot of problems.\n\nThe symbol versioning for struct stat is for BeOS vs. Haiku, so the problem I noted is only potentially an issue if Haiku binaries are linked to BeOS-built binaries, which isn\u0027t too likely anymore. This on the other hand would be symbol versioning for Haiku vs. later Haiku, which is much more risky.\n\nMaybe the right thing to do here is to just not define CS5 and CS6. This violates POSIX, but it would expose problems more easily. Or, maybe, we can not define them only if `_DEFAULT_SOURCE` is set, since we do other non-POSIX things when that\u0027s enabled?",
      "parentUuid": "32f5563f_5105544c",
      "revId": "bb15c91017419625390cce64d88d214e5e917762",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92a945d6_68f27924",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2025-05-20T14:51:58Z",
      "side": 1,
      "message": "\u003e The symbol versioning for struct stat is for BeOS vs. Haiku, so the problem I noted is only potentially an issue if Haiku binaries are linked to BeOS-built binaries\n\nThis is the struct termios from BeOS. We have never changed the meaning of existing bits in it until now. I know because I spent quite some effort trying to fit things in here in unconventional ways (for custom baudrates support) bacause there\u0027s not enough space.\n\nSince there is no R1 release yet, it is still time to introduce symbol versioning here, and have an Haiku specific version of this struct. It would make things a lot cleaner for sure.\n\nIf the symbol versioning is done right, this should not be a problem. The case where it would break seems sufficiently unlikely (wrappers around serial ports usually don\u0027t expose termios strutures directly to applications, since that would not make sense on Windows for example). We can simply rebuild things if anything breaks (it wouldn\u0027t be the first time, and I\u0027d say the current work on updating glibc is causing quite a lot of temporary breakage as well, without it being considered such a big problem).\n\n\u003e Or, maybe, we can not define them only if _DEFAULT_SOURCE is set, since we do other non-POSIX things when that\u0027s enabled?\n\nThat\u0027s an option too.\n\n\u003e Should we hard-code that 0 means CS7 in Haiku, not CS5 or CS6 (which are equally 0)?\n\nYes, currently there is no support for 5 and 6 bit serial ports, so that\u0027s safe to do.\n\nIndeed the most logical thing to do (not define CS5 and CS6 at all) goes against POSIX. I guess they wanted to make really sure the code would compile, even in cases where it wouldn\u0027t work? So it may be worth reporting an issue to them. I\u0027ll see about doing that.",
      "parentUuid": "4b8196cc_89cdd4ba",
      "revId": "bb15c91017419625390cce64d88d214e5e917762",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "abb8e358_02367222",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000886
      },
      "writtenOn": "2025-05-20T15:19:04Z",
      "side": 1,
      "message": "\u003e \u003e Should we hard-code that 0 means CS7 in Haiku, not CS5 or CS6 (which are equally 0)?\n\u003e \n\u003e Yes, currently there is no support for 5 and 6 bit serial ports, so that\u0027s safe to do.\n\nI see, thanks for clarifying.\n\nFWIW if I had to add my two cents, such Haiku-specific hack sounds non-POSIX which would be harder to justify Wine upstream. Let me explain:\n\nIf CS5 \u003d\u003d CS6 \u003d\u003d CS7, then (c_cflag \u0026 CSIZE) would equal CS5 *as well as* CS6 and CS7. A POSIX-compliant interpretation is that the serial port is simultaneously 5-bit, 6-bit, *and* 7-bit. I guess that might be physically possible under some unconventional definition of a \"serial port,\" but the Win32 API cannot represent that, so Wine must either give up or use Haiku-specific logic to disambiguate it to mean 7-bit.\n\nGiven all this, I somewhat feel like adding the unused MSB to CSIZE is the way to go, especially since I think POSIX is very unlikely to add more bits to CSIZE (the RS-232 and Unix TTY disciplines are effectively a frozen technology from decades ago).",
      "parentUuid": "92a945d6_68f27924",
      "revId": "bb15c91017419625390cce64d88d214e5e917762",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}