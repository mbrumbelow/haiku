{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7a9d010a_7532f4d4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-05-05T19:37:43Z",
      "side": 1,
      "message": "I don\u0027t think we should use up the last bits just to do this. Using symbol versioning with this structure may not be sufficient because if other libraries pass it around between them and applications, then changing it will also break those libraries\u0027 ABI, not just libroot\u0027s ABI. So we should not take up such bits arbitrarily.\n\nIf POSIX really requires these flags, then let\u0027s leave them as 0, and Wine or other applications can check `#if CS5 \u003d\u003d 0`. If POSIX doesn\u0027t, then let\u0027s delete them altogether. But I don\u0027t think we should take up bitspace for them simply because one application uses them in a strange way.",
      "revId": "bb15c91017419625390cce64d88d214e5e917762",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb632458_27f65a94",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2025-05-05T20:37:36Z",
      "side": 1,
      "message": "It\u0027s hardly a \"strange\" way. It checks them, and sets the width accordingly. That is the one thing these things are good for. I don\u0027t see why it is somehow bad that they use a switch case for this. You\u0027d get the same problem with any other library or application that supports systems that have 5 or 6 width here.\n\nThis has another annoying side-effect, if you\u0027d actually request something with CS5 or CS\u0026 this will get through but silently become a CS7 instead, that to me is just *literally* broken. No matter if you want to support this or not.\n\nPosix should have a feature flag, or remove these. But it doesn\u0027t. We implement the rest, and we should implement this properly or not at all.\n\nHow is it any better to let implementations check for this value instead?",
      "parentUuid": "7a9d010a_7532f4d4",
      "revId": "bb15c91017419625390cce64d88d214e5e917762",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "739cad15_b2a03c90",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-05-05T21:02:19Z",
      "side": 1,
      "message": "The fact is that nothing else but Wine seems to use the switch (we have lots of ncurses applications and TUI tools but they don\u0027t seem to.) So patching Haiku just to make Wine slightly happier, especially if it uses up the last free bit here, seems overkill.\n\nIn POSIX, it says:\n\n\u003e The implementation shall support the functionality associated with the symbols CS7, CS8, CSTOPB, PARODD, and PARENB.\n\ni.e. there\u0027s no requirement to support CS5 or CS6.\n\nFurthermore, the standard for `tcsetattr` states:\n\n\u003e The tcsetattr() function shall return successfully if it was able to perform any of the requested actions, even if some of the requested actions could not be performed. It shall set all the attributes that the implementation supports as requested and leave all the attributes not supported by the implementation unchanged.\n\nSo returning error if CS5 or CS6 is set is actually wrong according to the spec, it should fall back to a supported width anyway. Thus there isn\u0027t any value to having specific values for these defined.",
      "parentUuid": "bb632458_27f65a94",
      "revId": "bb15c91017419625390cce64d88d214e5e917762",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "220b0e57_ea916bb0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2025-05-05T22:23:24Z",
      "side": 1,
      "message": "Okay. In any case, we would need something better than some heuristic wine can use to disable this.\n\nPerhaps we can have our own feature flag for this if posix does not have one. Isn there a precedent for this in our codebase?",
      "parentUuid": "739cad15_b2a03c90",
      "revId": "bb15c91017419625390cce64d88d214e5e917762",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9151ffd3_8bfdb51a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-05-06T02:50:48Z",
      "side": 1,
      "message": "Why do we need something better than \"some heuristic\"? What\u0027s wrong with `#if defined(CS5) \u0026\u0026 CS5 !\u003d CS6 \u0026\u0026 ...`? Clunky, maybe, but it works. Alternatively, you can just disable the warning on Haiku...",
      "parentUuid": "220b0e57_ea916bb0",
      "revId": "bb15c91017419625390cce64d88d214e5e917762",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b32d137f_9c657c5d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2025-05-08T15:39:44Z",
      "side": 1,
      "message": "Because we shpuld follow posix and not ask projects for some ridicilous workarounds?\n\nThese vars beeing the same is wrong. Simple as that.",
      "parentUuid": "9151ffd3_8bfdb51a",
      "revId": "bb15c91017419625390cce64d88d214e5e917762",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}