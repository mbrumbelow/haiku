{
  "comments": [
    {
      "key": {
        "uuid": "67cba67d_39a46cfc",
        "filename": "headers/private/system/arch/riscv64/arch_cpu_defs.h",
        "patchSetId": 1
      },
      "lineNbr": 115,
      "author": {
        "id": 1000281
      },
      "writtenOn": "2021-08-04T22:15:44Z",
      "side": 1,
      "message": "Why do you have M-mode stuff in your kernel? Operating systems should never be going anywhere near M-mode, that is reserved for platform firmware, with operating systems confined to S-mode (and above).",
      "revId": "a1db95548ebc03c1e45d7b2ee5ba25a15cbacda8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d491217d_540bb3b3",
        "filename": "headers/private/system/arch/riscv64/arch_cpu_defs.h",
        "patchSetId": 1
      },
      "lineNbr": 115,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2021-08-04T22:41:19Z",
      "side": 1,
      "message": "It is used in bare-metal boot loader haiku_loader.riscv that starts from machine mode. It is used in TinyEMU and QEMU virtual machines. It need to setup PMP to allow supervisor mode code to access memory.",
      "parentUuid": "67cba67d_39a46cfc",
      "revId": "a1db95548ebc03c1e45d7b2ee5ba25a15cbacda8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e7a1c11_7ef16b9a",
        "filename": "headers/private/system/arch/riscv64/arch_cpu_defs.h",
        "patchSetId": 1
      },
      "lineNbr": 115,
      "author": {
        "id": 1000281
      },
      "writtenOn": "2021-08-04T22:50:23Z",
      "side": 1,
      "message": "Well, don\u0027t. That is not how RISC-V is designed. M-mode is for firmware. S-mode is for operating systems, including operating system boot loaders. BBL, OpenSBI or U-Boot SPL should be the only thing that touches M-mode. M-mode is the equivalent of EL3 on Arm and the various SMM etc modes of X86, not ring 0.",
      "parentUuid": "d491217d_540bb3b3",
      "revId": "a1db95548ebc03c1e45d7b2ee5ba25a15cbacda8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a31827a4_0fe72842",
        "filename": "headers/private/system/arch/riscv64/arch_cpu_defs.h",
        "patchSetId": 1
      },
      "lineNbr": 115,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2021-08-04T23:06:08Z",
      "side": 1,
      "message": "I want to have lightweight firmware that can be used in virtual machines. u-boot and UEFI are bloated and slows down boot. It also hard to compile and maintain under Haiku. I do all development under Haiku, no Linux.\n\nBare metal boot loader also helps to learn how RISC-V and hardware initialization works.\n\nBare metal boot loader is currently not used on real hardware, only in emulators.",
      "parentUuid": "4e7a1c11_7ef16b9a",
      "revId": "a1db95548ebc03c1e45d7b2ee5ba25a15cbacda8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0710197e_fb94f208",
        "filename": "headers/private/system/arch/riscv64/arch_cpu_defs.h",
        "patchSetId": 1
      },
      "lineNbr": 115,
      "author": {
        "id": 1000281
      },
      "writtenOn": "2021-08-04T23:10:39Z",
      "side": 1,
      "message": "So use OpenSBI; QEMU even ships with pre-built blobs. It boots instantly and follows the exact same boot API as bare metal (a0 and a1 are the hart ID and DTB), except your kernel starts in S-mode with the hardware pre-programmed for you. And this works on real hardware too if you have an appropriate OpenSBI build (which U-Boot bundles in its SPL, and runs before jumping to the full U-Boot implementation).\n\nAnd writing your own for fun, fine, but that doesn\u0027t belong in an upstream OS, it adds code complexity that results in maintenance burden for something that shouldn\u0027t exist.",
      "parentUuid": "a31827a4_0fe72842",
      "revId": "a1db95548ebc03c1e45d7b2ee5ba25a15cbacda8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9bbb5f03_80634ba6",
        "filename": "headers/private/system/arch/riscv64/arch_cpu_defs.h",
        "patchSetId": 1
      },
      "lineNbr": 115,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-08-06T17:33:45Z",
      "side": 1,
      "message": "I agree with this, however it seems fine for a first iteration.  This is introducing the very first RV64 code into our kernel.  Iteration and refinement are fine for a brand new architecture.",
      "parentUuid": "0710197e_fb94f208",
      "revId": "a1db95548ebc03c1e45d7b2ee5ba25a15cbacda8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": false
    }
  ]
}