{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "43ab14c2_9ed994cb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2024-09-03T06:43:53Z",
      "side": 1,
      "message": "It seems 256 is the maximum value (PAGE_SIZE / 16). I see in FreeBSD the virtio block driver configure this value per queue when allocating, based on the device config, while other drivers disables it.\nSee the second parameter for VQ_ALLOC_INFO_INIT, https://github.com/search?q\u003drepo%3Afreebsd%2Ffreebsd-src%20VQ_ALLOC_INFO_INIT\u0026type\u003dcode\nSo it\u0027s more about not wasting memory for each queue with indirect descriptor enabled in config.",
      "revId": "4275ee1a7d9c8be90cbf8f047fff9e185f54b1df",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4d24202_5812afa7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2024-09-03T13:08:23Z",
      "side": 1,
      "message": "Why is the maximum 256? The spec at https://docs.oasis-open.org/virtio/virtio/v1.2/csd01/virtio-v1.2-csd01.pdf says: \"the maximum queue size is 32768 (the highest power of 2 which fits in 16 bits)\" and for indirect descriptors the driver requirements simply state: \"A driver MUST NOT create a descriptor chain longer than the Queue Size of the device.\"\n\nThis implies to me, that there is no maximum beyond what the device advertises after reset. It is wasteful to allocate these queues bigger than needed of course. Do indirect descriptors need to be used at all? Given the direct queue size of 256, that should already be enough and we don\u0027t do parallel requests right now anyway.\n\nSo which way shall this go? Make the indirect size configurable via parameter to virtio_alloc_queues? Or make the total number of descriptors needed configurable and then VirtioQueue can decide how many direct/indirect descriptors to allocate to fit that?\n\nLooking at this some more, it also seems like the two maximums are not coming from the same place. One is the seg_max number in virtio_blk configuration space while the other is the queue size of the virtqueue. So, should virtio_block really set the DMAResource restriction based on the minimum of both of these?",
      "parentUuid": "43ab14c2_9ed994cb",
      "revId": "4275ee1a7d9c8be90cbf8f047fff9e185f54b1df",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5b7e4e6_e8e568f1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000017
      },
      "writtenOn": "2024-09-03T23:02:16Z",
      "side": 1,
      "message": "I see the maximum is 256 in FreeBSD. I have added a new change that allows to request an explicit size for queues in virtio_alloc_queues() that is used for virtio_block and virtio_scsi: https://review.haiku-os.org/c/haiku/+/8220\n\nWith that, the VirtioQueue class is basically free to provide this count in any way it sees fit. In FreeBSD there is a fallback to not use indirect descriptors when the vector count that comes in doesn\u0027t fit the indirect descriptor count or when they were not allocated at all. The same could be done here and then the indirect descriptor count could be set back to 128. I would question the usefulness of the indirect descriptors as a whole though and maybe just disable the feature altogether.\n\nThe reason why virtio_block was affected by this but not virtio_scsi appears to be that virtio_scsi does not advertise support for indirect descriptors (at least not in QEMU, not even in the current version 9).",
      "parentUuid": "b4d24202_5812afa7",
      "revId": "4275ee1a7d9c8be90cbf8f047fff9e185f54b1df",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ab3eb64_a627ee92",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2024-09-04T17:13:44Z",
      "side": 1,
      "message": "korli: Anything else needed here?",
      "parentUuid": "f5b7e4e6_e8e568f1",
      "revId": "4275ee1a7d9c8be90cbf8f047fff9e185f54b1df",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "19a85e97_6eaf3b8f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2024-09-05T06:49:16Z",
      "side": 1,
      "message": "No, explicit size for queues make things different for each driver.",
      "parentUuid": "2ab3eb64_a627ee92",
      "revId": "4275ee1a7d9c8be90cbf8f047fff9e185f54b1df",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12b80606_3974ecb2",
        "filename": "src/add-ons/kernel/bus_managers/virtio/VirtioQueue.cpp",
        "patchSetId": 1
      },
      "lineNbr": 173,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2024-09-03T08:16:42Z",
      "side": 1,
      "message": "min_c(256, fRingSize) would be more correct",
      "revId": "4275ee1a7d9c8be90cbf8f047fff9e185f54b1df",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "08811396_b9b170c1",
        "filename": "src/add-ons/kernel/bus_managers/virtio/VirtioQueue.cpp",
        "patchSetId": 1
      },
      "lineNbr": 173,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2024-09-05T06:50:56Z",
      "side": 1,
      "message": "the queue size is the maximum allowed in current specs.",
      "parentUuid": "12b80606_3974ecb2",
      "revId": "4275ee1a7d9c8be90cbf8f047fff9e185f54b1df",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Build-Check",
        "description": {
          "value": "Builds OK on all architectures"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-label:Verified\u003d-1"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-label:Verified=-1"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Verified=-1"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "4275ee1a7d9c8be90cbf8f047fff9e185f54b1df",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}