{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "60c7a3ee_99189013",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 1000217
      },
      "writtenOn": "2022-12-05T06:19:40Z",
      "side": 1,
      "message": "Finally updated per comment below; made FontManager class into FontManagerBase, and then a GlobalFontManager and AppFontManager inherit from it. C\u0026C welcome.",
      "revId": "a20487af7f5a4184fa6f837627ef67a94f6be5b9",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ad5a0b92_75321cc4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2022-12-05T18:02:42Z",
      "side": 1,
      "message": "Indeed I like this version much better! But some work still needed.",
      "revId": "a20487af7f5a4184fa6f837627ef67a94f6be5b9",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa495842_d3fc8550",
        "filename": "src/servers/app/font/AppFontManager.cpp",
        "patchSetId": 19
      },
      "lineNbr": 45,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2022-12-05T18:02:42Z",
      "side": 1,
      "message": "appears to be duplicated, likely should be a static member of FontManagerBase and thus shared",
      "revId": "a20487af7f5a4184fa6f837627ef67a94f6be5b9",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d8e67d9a_ca27b5f7",
        "filename": "src/servers/app/font/AppFontManager.cpp",
        "patchSetId": 19
      },
      "lineNbr": 45,
      "author": {
        "id": 1000217
      },
      "writtenOn": "2022-12-05T21:29:36Z",
      "side": 1,
      "message": "Fixed - I meant to do that before I submitted.",
      "parentUuid": "fa495842_d3fc8550",
      "revId": "a20487af7f5a4184fa6f837627ef67a94f6be5b9",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db795c8f_64a1048f",
        "filename": "src/servers/app/font/FontCacheEntry.cpp",
        "patchSetId": 19
      },
      "lineNbr": 164,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2022-12-05T18:02:42Z",
      "side": 1,
      "message": "This will not work if the area in question is not owned or cloned by the app_server already. The memory semantics of the AddFont API are not well defined either.\n\nWhat does FreeType do when calling Init() with a memory object instead of a file object? Does it copy the memory, or use it in-place? If the latter, then we should 1) temporarily clone the area, 2) malloc() a new object to store the font data in and copy it, 3) delete our cloned area, 4) init FreeType etc. If the former, then we can do something similar but we have no need to allocate our own buffer.",
      "revId": "a20487af7f5a4184fa6f837627ef67a94f6be5b9",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b784af3d_c5f4e0dd",
        "filename": "src/servers/app/font/FontCacheEntry.cpp",
        "patchSetId": 19
      },
      "lineNbr": 164,
      "author": {
        "id": 1000217
      },
      "writtenOn": "2022-12-05T21:29:36Z",
      "side": 1,
      "message": "FreeType only references it.  I know this review is large; if you look at the ServerApp code, the first thing it does is clone the memory. see ServerApp.cpp: 1653.\n\nNot sure what you mean that the \u0027memory semantics of the AddFont API are not well defined either\u0027 - can you elaborate?",
      "parentUuid": "db795c8f_64a1048f",
      "revId": "a20487af7f5a4184fa6f837627ef67a94f6be5b9",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "549be86a_fea15438",
        "filename": "src/servers/app/font/FontCacheEntry.cpp",
        "patchSetId": 19
      },
      "lineNbr": 164,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2022-12-06T19:49:11Z",
      "side": 1,
      "message": "I mean I wasn\u0027t immediately sure if it assumes ownership of the passed buffers or not.\n\nI guess I wonder if app_server really should clone the whole area permanently or just allocate a buffer for the font itself, owned by the FontStyle object, which it frees when it goes out of scope.\n\nOtherwise, we will be using a lot of areas when a few would do (e.g. what if something passes the same area twice with two offsets? Right now we have no way to clone the area only once, so we\u0027ll use up extra amounts of address space!) So, using a malloc()\u0027d buffer is probably better.\n\nThen the API gets much simplified too, because it can be changed to pass a fixed buffer and only a temporary area need be created to transfer it efficiently to app_server.\n\nI think we should get some feedback from other developers, though, about this.",
      "parentUuid": "b784af3d_c5f4e0dd",
      "revId": "a20487af7f5a4184fa6f837627ef67a94f6be5b9",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a67fe94_3a8e5f68",
        "filename": "src/servers/app/font/FontStyle.h",
        "patchSetId": 19
      },
      "lineNbr": 145,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2022-12-05T18:02:42Z",
      "side": 1,
      "message": "As noted above we should not be using the specified areas directly for a variety of reasons.",
      "revId": "a20487af7f5a4184fa6f837627ef67a94f6be5b9",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0e4e863d_5ee5ef18",
        "filename": "src/servers/app/font/FontStyle.h",
        "patchSetId": 19
      },
      "lineNbr": 145,
      "author": {
        "id": 1000217
      },
      "writtenOn": "2022-12-05T21:29:36Z",
      "side": 1,
      "message": "Yep, all of these references are to a cloned copy of the area, and it gets cleaned up when the object destructs.",
      "parentUuid": "3a67fe94_3a8e5f68",
      "revId": "a20487af7f5a4184fa6f837627ef67a94f6be5b9",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e2c6170_bb3dad5a",
        "filename": "src/servers/app/font/FontStyle.h",
        "patchSetId": 19
      },
      "lineNbr": 151,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2022-12-05T18:02:42Z",
      "side": 1,
      "message": "Locking semantics of this class now seem a poorly defined. Previously there was one FontManager and most FontStyle objects were accessed through it and locked/used only when that class\u0027 locks were. Now, however, we can have FontStyles whose FontFamily is in the global font manager but the Style is in an App font manager. How is locking \u0026 concurrent access handled here?",
      "revId": "a20487af7f5a4184fa6f837627ef67a94f6be5b9",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d9ebf4ee_d0649701",
        "filename": "src/servers/app/font/FontStyle.h",
        "patchSetId": 19
      },
      "lineNbr": 151,
      "author": {
        "id": 1000217
      },
      "writtenOn": "2022-12-05T21:29:36Z",
      "side": 1,
      "message": "Actually I decided that cross-contaminating the two was probably a bad idea. This implementation creates a new family even if it already exists in the global font manager. The onus is on the user to handle grouping families that exist in both global and app space. \n\nThe global font manager is always checked *first* and then the app font manager, when a given font is requested. I was actually wondering if this should be reversed.",
      "parentUuid": "9e2c6170_bb3dad5a",
      "revId": "a20487af7f5a4184fa6f837627ef67a94f6be5b9",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "097c5e48_963fb6e3",
        "filename": "src/servers/app/font/FontStyle.h",
        "patchSetId": 19
      },
      "lineNbr": 151,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2022-12-06T19:49:11Z",
      "side": 1,
      "message": "Yes, I think it should.",
      "parentUuid": "d9ebf4ee_d0649701",
      "revId": "a20487af7f5a4184fa6f837627ef67a94f6be5b9",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17601721_af738f5b",
        "filename": "src/servers/app/font/FontStyle.h",
        "patchSetId": 19
      },
      "lineNbr": 151,
      "author": {
        "id": 1000217
      },
      "writtenOn": "2022-12-07T00:18:42Z",
      "side": 1,
      "message": "good catch on the locking - I realized I wasn\u0027t even using the AppFontManager properly as a BLooper. I fixed that, and added locks around all the places where the AppFontManager is accessed. Thanks!\n\nRegarding reversing whether the AppFontManager or GlobalFontManager should be checked first, I left it with the GlobalFontManager first. My reasoning is that 90% or more apps aren\u0027t likely to use their own fonts, but *every* font manager access would pay the price of the wasted lookup. If you disagree I\u0027m happy to flip the logic.",
      "parentUuid": "097c5e48_963fb6e3",
      "revId": "a20487af7f5a4184fa6f837627ef67a94f6be5b9",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28a0992c_e999d223",
        "filename": "src/servers/app/font/GlobalFontManager.cpp",
        "patchSetId": 19
      },
      "lineNbr": 48,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2022-12-05T18:02:42Z",
      "side": 1,
      "message": "same comment as above",
      "revId": "a20487af7f5a4184fa6f837627ef67a94f6be5b9",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "62f7b4d3_307cbdf9",
        "filename": "src/servers/app/font/GlobalFontManager.cpp",
        "patchSetId": 19
      },
      "lineNbr": 48,
      "author": {
        "id": 1000217
      },
      "writtenOn": "2022-12-05T21:29:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "28a0992c_e999d223",
      "revId": "a20487af7f5a4184fa6f837627ef67a94f6be5b9",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3cfba17_f1776c0f",
        "filename": "src/servers/app/font/GlobalFontManager.h",
        "patchSetId": 19
      },
      "lineNbr": 37,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2022-12-05T18:02:42Z",
      "side": 1,
      "message": "not really a great descriptor, probably should be something more like \"Manager for system-wide fonts\", maybe a bit more verbose",
      "revId": "a20487af7f5a4184fa6f837627ef67a94f6be5b9",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "30fe78de_1ab1e474",
        "filename": "src/servers/app/font/GlobalFontManager.h",
        "patchSetId": 19
      },
      "lineNbr": 37,
      "author": {
        "id": 1000217
      },
      "writtenOn": "2022-12-05T21:29:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e3cfba17_f1776c0f",
      "revId": "a20487af7f5a4184fa6f837627ef67a94f6be5b9",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}