{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "94872c72_e52db8b0",
        "filename": "src/system/kernel/arch/arm64/VMSAv8TranslationMap.cpp",
        "patchSetId": 4
      },
      "lineNbr": 6,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-27T10:35:53Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (insert after):\n```c++\n#include \u003calgorithm\u003e\n```",
      "range": {
        "startLine": 6,
        "startChar": 0,
        "endLine": 6,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3dcb5c5a2f46dc9f0d0a326ed83a8e232e037554",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "30e62351_eddf7cea",
        "filename": "src/system/kernel/arch/arm64/VMSAv8TranslationMap.cpp",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-27T10:35:53Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` is to remove this line/these lines.",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 11,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3dcb5c5a2f46dc9f0d0a326ed83a8e232e037554",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ef283989_956a8185",
        "filename": "src/system/kernel/arch/arm64/VMSAv8TranslationMap.cpp",
        "patchSetId": 4
      },
      "lineNbr": 302,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-27T10:35:53Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\nVMSAv8TranslationMap::GetOrMakeTable(phys_addr_t ptPa, int level, int index,\n\tvm_page_reservation* reservation)\n```",
      "range": {
        "startLine": 301,
        "startChar": 0,
        "endLine": 302,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3dcb5c5a2f46dc9f0d0a326ed83a8e232e037554",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "493cc63c_ffe39fec",
        "filename": "src/system/kernel/arch/arm64/VMSAv8TranslationMap.cpp",
        "patchSetId": 4
      },
      "lineNbr": 337,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2024-08-27T14:06:40Z",
      "side": 1,
      "message": "kLevel as constant would make VA size (ie. fVaBits) also compile-time size constant. I\u0027m not sure what we want, but in that case CalcStartLevel should be constexpr and used here?\n\n(possibly fPageBits should be replaced with compile-time constant too)",
      "revId": "3dcb5c5a2f46dc9f0d0a326ed83a8e232e037554",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4cc7e09_71c98cb6",
        "filename": "src/system/kernel/arch/arm64/VMSAv8TranslationMap.cpp",
        "patchSetId": 4
      },
      "lineNbr": 337,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2024-08-29T07:11:22Z",
      "side": 1,
      "message": "I didn\u0027t make kLevel a constant throughout the class, just on each invocation of ProcessRange(). It represents the level *of the current invocation*, so there\u0027s nothing about it that make the other elements constant as well.",
      "parentUuid": "493cc63c_ffe39fec",
      "revId": "3dcb5c5a2f46dc9f0d0a326ed83a8e232e037554",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "374f1981_74245c7b",
        "filename": "src/system/kernel/arch/arm64/VMSAv8TranslationMap.cpp",
        "patchSetId": 4
      },
      "lineNbr": 340,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-27T10:35:53Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tvm_page_reservation* reservation, UpdatePte\u0026\u0026 updatePte)\n```",
      "range": {
        "startLine": 340,
        "startChar": 0,
        "endLine": 340,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3dcb5c5a2f46dc9f0d0a326ed83a8e232e037554",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "009a1226_fa5d8a8a",
        "filename": "src/system/kernel/arch/arm64/VMSAv8TranslationMap.cpp",
        "patchSetId": 4
      },
      "lineNbr": 353,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-27T10:35:53Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tuint64_t alignedUpEnd \u003d (va + size + (entrySize - 1)) \u0026 ~entryMask;\n```",
      "range": {
        "startLine": 353,
        "startChar": 0,
        "endLine": 353,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3dcb5c5a2f46dc9f0d0a326ed83a8e232e037554",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2ffd31d5_66faeead",
        "filename": "src/system/kernel/arch/arm64/VMSAv8TranslationMap.cpp",
        "patchSetId": 4
      },
      "lineNbr": 357,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-27T10:35:53Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tfor (uint64_t effectiveVa \u003d alignedDownVa; effectiveVa \u003c alignedUpEnd;\n\t\teffectiveVa +\u003d entrySize) {\n```",
      "range": {
        "startLine": 357,
        "startChar": 0,
        "endLine": 357,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3dcb5c5a2f46dc9f0d0a326ed83a8e232e037554",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a29876e5_d71a085d",
        "filename": "src/system/kernel/arch/arm64/VMSAv8TranslationMap.cpp",
        "patchSetId": 4
      },
      "lineNbr": 360,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-27T10:35:53Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\tuint64_t oldPte \u003d atomic_get64((int64*)ptePtr);\n```",
      "range": {
        "startLine": 360,
        "startChar": 0,
        "endLine": 360,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3dcb5c5a2f46dc9f0d0a326ed83a8e232e037554",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e69cee55_4a2446bc",
        "filename": "src/system/kernel/arch/arm64/VMSAv8TranslationMap.cpp",
        "patchSetId": 4
      },
      "lineNbr": 370,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-27T10:35:53Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\t\tif ((newPte \u0026 kPteValidMask) !\u003d 0 \u0026\u0026 (oldPte \u0026 kPteValidMask) !\u003d 0) {\n```",
      "range": {
        "startLine": 369,
        "startChar": 0,
        "endLine": 370,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3dcb5c5a2f46dc9f0d0a326ed83a8e232e037554",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5750a34d_e3258a2e",
        "filename": "src/system/kernel/arch/arm64/VMSAv8TranslationMap.cpp",
        "patchSetId": 4
      },
      "lineNbr": 371,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2024-08-27T14:06:40Z",
      "side": 1,
      "message": "Break-before-make is not always required, will this come in later patch?",
      "revId": "3dcb5c5a2f46dc9f0d0a326ed83a8e232e037554",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "554c7e71_8094f04e",
        "filename": "src/system/kernel/arch/arm64/VMSAv8TranslationMap.cpp",
        "patchSetId": 4
      },
      "lineNbr": 371,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2024-08-27T19:17:44Z",
      "side": 1,
      "message": "Per D8.16.1 in the ARM ARM, the circumstances where we can skip break-before-make are pretty limited, pretty much only when changing attributes (other than shareability or cacheability). The only case where we could skip it for an address change is when we\u0027re changing an RO entry to another RO entry, AND we can guarantee that the contents of the two pages are the same.\n\nWhen I get to doing attribute updates I\u0027ll add the logic to skip the break-before-make for them as appropriate.",
      "parentUuid": "5750a34d_e3258a2e",
      "revId": "3dcb5c5a2f46dc9f0d0a326ed83a8e232e037554",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "712105dd_570cda07",
        "filename": "src/system/kernel/arch/arm64/VMSAv8TranslationMap.cpp",
        "patchSetId": 4
      },
      "lineNbr": 373,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-27T10:35:53Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\t\t\tatomic_set64((int64*)ptePtr, 0);\n```",
      "range": {
        "startLine": 373,
        "startChar": 0,
        "endLine": 373,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3dcb5c5a2f46dc9f0d0a326ed83a8e232e037554",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4f40d7b3_2237e30b",
        "filename": "src/system/kernel/arch/arm64/VMSAv8TranslationMap.cpp",
        "patchSetId": 4
      },
      "lineNbr": 375,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-27T10:35:53Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\t\t\tasm(\"tlbi vae1is, %0\" ::\"r\"(\n\t\t\t\t\t((effectiveVa \u003e\u003e 12) \u0026 kTLBIMask) | (uint64_t(fASID) \u003c\u003c 48)));\n```",
      "range": {
        "startLine": 375,
        "startChar": 0,
        "endLine": 375,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3dcb5c5a2f46dc9f0d0a326ed83a8e232e037554",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfa7ff1e_97ed95df",
        "filename": "src/system/kernel/arch/arm64/VMSAv8TranslationMap.cpp",
        "patchSetId": 4
      },
      "lineNbr": 375,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2024-08-27T14:06:40Z",
      "side": 1,
      "message": "It\u0027s possible that no ASID is currently assigned. Probably this also requires some locking, to avoid flushing wrong thing when ASID is quickly reassigned. Or maybe only use ASID-specific flush only when map is currently active on this thread?\n\n(another thought: we currently flush TLB when live ASID is reassigned, but we also need to flush it when map with assigned ASID is destroyed, to prevent TLB entries leaking into another map)",
      "revId": "3dcb5c5a2f46dc9f0d0a326ed83a8e232e037554",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c09eef82_ab898f59",
        "filename": "src/system/kernel/arch/arm64/VMSAv8TranslationMap.cpp",
        "patchSetId": 4
      },
      "lineNbr": 375,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2024-08-29T07:11:22Z",
      "side": 1,
      "message": "If there\u0027s no ASID assigned, why would we need a TLB flush at all?\n\nSee updated patch.",
      "parentUuid": "dfa7ff1e_97ed95df",
      "revId": "3dcb5c5a2f46dc9f0d0a326ed83a8e232e037554",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c8f55207_70cfbcb5",
        "filename": "src/system/kernel/arch/arm64/VMSAv8TranslationMap.cpp",
        "patchSetId": 4
      },
      "lineNbr": 380,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-27T10:35:53Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\t\tatomic_set64((int64*)ptePtr, newPte);\n```",
      "range": {
        "startLine": 380,
        "startChar": 0,
        "endLine": 380,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3dcb5c5a2f46dc9f0d0a326ed83a8e232e037554",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc2a9ab9_54c4ece2",
        "filename": "src/system/kernel/arch/arm64/VMSAv8TranslationMap.cpp",
        "patchSetId": 4
      },
      "lineNbr": 380,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2024-08-27T14:06:40Z",
      "side": 1,
      "message": "Compare-exchange loop should be used to avoid potentially losing access/dirty bits when updatePte copies it over.",
      "revId": "3dcb5c5a2f46dc9f0d0a326ed83a8e232e037554",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f4e6451_7e7df37c",
        "filename": "src/system/kernel/arch/arm64/VMSAv8TranslationMap.cpp",
        "patchSetId": 4
      },
      "lineNbr": 380,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2024-08-27T19:23:06Z",
      "side": 1,
      "message": "I think you could do an atomic OR to skip the compare-exchange loop?",
      "parentUuid": "dc2a9ab9_54c4ece2",
      "revId": "3dcb5c5a2f46dc9f0d0a326ed83a8e232e037554",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69e0fc02_d9822688",
        "filename": "src/system/kernel/arch/arm64/VMSAv8TranslationMap.cpp",
        "patchSetId": 4
      },
      "lineNbr": 380,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2024-08-27T19:42:20Z",
      "side": 1,
      "message": "I don\u0027t how do that in all cases, eg. ClearAccessedAndModified.",
      "parentUuid": "4f4e6451_7e7df37c",
      "revId": "3dcb5c5a2f46dc9f0d0a326ed83a8e232e037554",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01fccb06_f3138e9f",
        "filename": "src/system/kernel/arch/arm64/VMSAv8TranslationMap.cpp",
        "patchSetId": 4
      },
      "lineNbr": 380,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2024-08-27T19:42:57Z",
      "side": 1,
      "message": "*I don\u0027t see it how do that in all cases, eg. ClearAccessedAndModified.",
      "parentUuid": "69e0fc02_d9822688",
      "revId": "3dcb5c5a2f46dc9f0d0a326ed83a8e232e037554",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ccd297c_376342a7",
        "filename": "src/system/kernel/arch/arm64/VMSAv8TranslationMap.cpp",
        "patchSetId": 4
      },
      "lineNbr": 380,
      "author": {
        "id": 1000677
      },
      "writtenOn": "2024-08-29T07:11:22Z",
      "side": 1,
      "message": "ClearAccessedAndModified can be done with atomic AND. I think the right approach here is to defer to the caller of ProcessRange, which will have knowledge of what it\u0027s trying to do and how to do it atomically. Updating patch incoming that hopefully makes this clear.",
      "parentUuid": "01fccb06_f3138e9f",
      "revId": "3dcb5c5a2f46dc9f0d0a326ed83a8e232e037554",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "90a4e04a_ded87cb6",
        "filename": "src/system/kernel/arch/arm64/VMSAv8TranslationMap.cpp",
        "patchSetId": 4
      },
      "lineNbr": 389,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-27T10:35:53Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\t\tProcessRange\u003ckLevel + 1\u003e(subTable, subVa, subPa, subSize, reservation, updatePte);\n```",
      "range": {
        "startLine": 389,
        "startChar": 0,
        "endLine": 389,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3dcb5c5a2f46dc9f0d0a326ed83a8e232e037554",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a8d90243_912fe9d5",
        "filename": "src/system/kernel/arch/arm64/VMSAv8TranslationMap.cpp",
        "patchSetId": 4
      },
      "lineNbr": 609,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-27T10:35:53Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\t[\u003d](uint64_t oldPte, uint64_t va, phys_addr_t pa) { return pa | attr | kPteTypeL3Page; });\n```",
      "range": {
        "startLine": 607,
        "startChar": 0,
        "endLine": 609,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3dcb5c5a2f46dc9f0d0a326ed83a8e232e037554",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}