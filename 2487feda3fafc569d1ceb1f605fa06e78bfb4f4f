{
  "comments": [
    {
      "key": {
        "uuid": "fecb1822_ab68d4f8",
        "filename": "src/apps/Weather",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-04-04T19:15:39Z",
      "side": 1,
      "message": "We do not want this here, please remove.\n\nBefore pushing your commit, you can check \"git log --stat\" or \"git log -p\" to see what\u0027s in them.",
      "revId": "2487feda3fafc569d1ceb1f605fa06e78bfb4f4f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cba00c4a_d21cb6a5",
        "filename": "src/apps/Weather",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2020-01-10T20:56:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fecb1822_ab68d4f8",
      "revId": "2487feda3fafc569d1ceb1f605fa06e78bfb4f4f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c2dc77e9_9be0e092",
        "filename": "src/apps/webpositive/BrowserWindow.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2501,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-04-04T19:15:39Z",
      "side": 1,
      "message": "Why not use BString::Remove(0, 2) ?",
      "revId": "2487feda3fafc569d1ceb1f605fa06e78bfb4f4f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd5b858a_02ef6297",
        "filename": "src/apps/webpositive/BrowserWindow.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2501,
      "author": {
        "id": 1000131
      },
      "writtenOn": "2019-04-05T16:12:25Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c2dc77e9_9be0e092",
      "revId": "2487feda3fafc569d1ceb1f605fa06e78bfb4f4f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c97ab452_97d8ec90",
        "filename": "src/apps/webpositive/BrowserWindow.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2501,
      "author": {
        "id": 1000131
      },
      "writtenOn": "2019-04-07T12:44:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bd5b858a_02ef6297",
      "revId": "2487feda3fafc569d1ceb1f605fa06e78bfb4f4f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4cb2b35c_d5ba16c4",
        "filename": "src/apps/webpositive/BrowserWindow.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2510,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-04-04T19:15:39Z",
      "side": 1,
      "message": "With hardcoded shortcuts, this isn\u0027t very useful. I tend to customize mine a lot (for example \u0027t\u0027 to search for Haiku trac, \u0027c\u0027 to search in Gerrit changesets, ...).\n\nI would at least put the search engines in a table (with shortcut and URL template) so we can iterate on them instead of repeating the search code multiple times. This way it becomes easier to make the list configurable later on.\n\nAlso, identifying the search engine with StartWith(\"b \") would be more generic and allow more complex expressions (people may want to search using \"GOOGLE foo\" instead of just \"g foo\", for example, or maybe they have some less-used search engines they want to assign 2 letter shortcuts to).",
      "revId": "2487feda3fafc569d1ceb1f605fa06e78bfb4f4f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "042fcf2a_ca792ca9",
        "filename": "src/apps/webpositive/BrowserWindow.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2510,
      "author": {
        "id": 1000131
      },
      "writtenOn": "2019-04-04T20:14:43Z",
      "side": 1,
      "message": "Which C++ data structure should I use to implement the table? According to me a std::map with key as a search engine string constant and value as a struct which will contain shortcut and the url template is one idea.\n For example:\n\u003ckey,value\u003e: \"Google\",struct(\"g \",template)",
      "parentUuid": "4cb2b35c_d5ba16c4",
      "revId": "2487feda3fafc569d1ceb1f605fa06e78bfb4f4f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "263b154c_6d8da9a2",
        "filename": "src/apps/webpositive/BrowserWindow.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2510,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2019-04-04T22:01:21Z",
      "side": 1,
      "message": "I would make shortuct the key, since it will be the thing you are going to look for more often. Name is not really relevant outside of displaying it to the user, but you will need it only when you find the shortcut first.\nSo:\n\u003ckey,value\u003e: \"g\", struct(\"Google\", template)\n\nYou can also use BMessage as a container instead of std::map, but I don\u0027t have a preference here.",
      "parentUuid": "042fcf2a_ca792ca9",
      "revId": "2487feda3fafc569d1ceb1f605fa06e78bfb4f4f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac531e5d_19a7ac67",
        "filename": "src/apps/webpositive/BrowserWindow.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2510,
      "author": {
        "id": 1000131
      },
      "writtenOn": "2019-04-07T12:44:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "263b154c_6d8da9a2",
      "revId": "2487feda3fafc569d1ceb1f605fa06e78bfb4f4f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9252cead_406566bf",
        "filename": "src/apps/webpositive/BrowserWindow.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2518,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-04-04T19:15:39Z",
      "side": 1,
      "message": "If the user customized their main search engine, fSearchPageURL would not be Google anymore. People may use qwant or duckduckgo as their default search engine, for example.\n\nThis issue goes away if you implement the complete thing, with a table, a way to customize it from preferences, and support for selecting a default search engine from the table.",
      "revId": "2487feda3fafc569d1ceb1f605fa06e78bfb4f4f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8eebe8aa_7358ebdd",
        "filename": "src/apps/webpositive/BrowserWindow.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2518,
      "author": {
        "id": 1000131
      },
      "writtenOn": "2019-04-07T12:44:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9252cead_406566bf",
      "revId": "2487feda3fafc569d1ceb1f605fa06e78bfb4f4f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "483ad3be_06ad7969",
        "filename": "src/apps/webpositive/BrowserWindow.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2525,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-04-04T19:15:39Z",
      "side": 1,
      "message": "it would be great to not default to english here, but to select the languag eaccording to the user\u0027s locale settings.",
      "revId": "2487feda3fafc569d1ceb1f605fa06e78bfb4f4f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    }
  ]
}