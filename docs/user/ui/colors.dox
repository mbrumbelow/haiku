/*!
\page uiColors	Colors

This page gives an overview of how colors are used in the haiku api.

Each BView has 6 colors defined.
Three of those are color_which which specify a semantic color the view is configured with.
The other three are rgb_color which specify a specific color the view is configured with.

A semantic color is a color that has no concrete value at this time and instead specified what this is for. These always come in pairs. (Or more, but always with a foreground and background contrasting color)
For example B_DOCUMENT_BACKGROUND_COLOR and B_DOCUMENT_TEXT_COLOR are a semantic color pair.
These specify their intent, to be used for any documents. Applications that have a Document like view can then use these colors, for example the Mail application, The Webrowser, and Text Editor.

Specific colors on the other hand specify a value to draw with, this can be for example {0, 0, 0} for pure black or {255, 255, 255} for pure white

These are split up into a high color, a low color and a view color.
The low color is used to draw the background of a view, for example this could be the gradient for a button (even if this visually "sticks out" this is still a background)
The high color is used to draw the foreground of a view, for example the text on a control, the text in a view or design elements like seperators of a BBox.
TODO: The view color also exists, and I don't know why.

These colors can be set by SetHighColor() SetLowColor() and SetViewColor() for the specific colors.
And SetHighUIColor() SetLowUIColor() and SetViewUIColor() for the semantic colors.

Using the sementic colors over the specific ones has the advantage that your BView will automatically respond to system color changes, and you don't have to do any additional work.

For this reason it is heavily discouraged to write code like this: SetHighColor(ui_color(B_PANEL_TEXT_COLOR);
And instead this style should be preffered: SetHighUIColor(B_PANEL_TEXT_COLOR);


In addition Views can also access the colors of their parent view, this might also come in handy for some drawing operations.

\section Live updating colors

The BLooper of your main Application will get messages of the type B_COLORS_UPDATED (defined in AppDefs.h)
these can contain severall colors (not just one!), but usually one. For example the automatic color more may stuff all updated system colors in one message using set_ui_colors(const BMessage* colors)
TODO: Pretty sure it does not. Find a better example! or make an example out of pref/appearence.

You can then in your ::MessageReceived method grab the B_COLORS_UPDATED message and extract the color out of it
For example, if i have a special view that deals with control colors I could do this:
if (message->what == B_COLORS_UPDATED) {
	if (message->HasColor(B_CONTROL_TEXT_COLOR)
		fControlText = message->GetColor(B_CONTROL_TEXT_COLOR, fBaseColor);
\section Color propagation

At start of gui creation each BView in your application usually assigns some colors. These can either be default colors based on the class, for example a BButton will pick a pair of color_which apropriate for a button, which is B_CONTROL_BACKGROUND_COLOR and B_CONTROL_TEXT_COLOR respectively.

Other views will simply adopt their parent view colors, and some views will set a transparent color.

During the ::Draw phase of each BView these will either give instructions to the application server directly on how to draw with the specified color, draw themselves into an off-screen Buffer/bitmap and then pass this on. Or more commonly instruct the specified OS defined control look on what drawing operation with which colors it is supposed to draw something.



\section Special note about BTextView

BTextView does not respect live updating colors if styling is enabled, if styling is enabled each text segment can have it's own color defined. This is done for example in AboutSystem (The Haiku about box). In such a case the owner of the BTextView (i.e your code) has to keep track of offsets of the different color styles itself and update this acordingly on getting a new system color.
Alternatively if styling is used but no colors are wanted the entire TextView color can be updated with a SetFontAndColor(NULL, NULL, newColor);
TODO: make a SetColor(rgb_color) for BTextView, passing around random nulls sucks.