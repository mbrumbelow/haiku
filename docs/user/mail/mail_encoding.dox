/*
 * Copyright 2024 Haiku, Inc. All rights reserved.
 * Distributed under the terms of the MIT License.
 *
 * Authors:
 *		cafeina, cafeina@world
 *
 * Corresponds to:
 *		headers/os/mail/mail_encoding.h	hrev58367
 *		src/kits/mail/mail_encoding.cpp	hrev58367
 *		src/kits/support/Base64.cpp		hrev58367
 */

/*!
	\file mail_encoding.h
	\ingroup mail
	\ingroup libmail
	\brief Provides tools to convert data to or from a content encoding format.
*/


/*!
	\def B_MAIL_NULL_CONVERSION
	\brief Do not specify a character set for converting, rely on
		autodetection instead.

	\since Haiku R1
*/


/*!
	\def B_MAIL_UTF8_CONVERSION
	\brief Specifies the UTF-8 character set when converting from or to UTF-8.

	\since Haiku R1
*/


/*!
	\def B_MAIL_US_ASCII_CONVERSION
	\brief Specifies the 7bit ASCII character set (a subset of UTF-8) when
		converting from or to 7bit.

	\since Haiku R1
*/


/*!
	\fn mail_encoding::base64
	\brief Base64 binary-to-text encoding.

	\since Haiku R1
*/


/*!
	\fn mail_encoding::quoted_printable
	\brief Quoted-Printable binary-to-text encoding.

	\since Haiku R1
*/


/*!
	\fn mail_encoding::seven_bit
	\brief 7bit encoding.

	\since Haiku R1
*/


/*!
	\fn mail_encoding::eight_bit
	\brief 8bit encoding.

	\since Haiku R1
*/


/*!
	\fn mail_encoding::uuencode
	\brief uuencode binary-to-text encoding.

	\since Haiku R1
*/


/*!
	\fn mail_encoding::null_encoding
	\brief Used to indicate the encoding, will not be changed.

	\since Haiku R1
*/


/*!
	\fn mail_encoding::no_encoding
	\brief Represents an undefined encoding or no encoding at all.

	\since Haiku R1
*/


/*!
	\fn ssize_t encode(mail_encoding encoding, char *out, const char *in,
	off_t length, int headerMode)
	\brief Encodes a string to another character encoding.

	Converts \a in of \a length as \a encoding into \a out.

	\a headerMode is used when the output will be used in a header,
	and is only used for conversions to Quoted-Printable or Base64,
	ignored otherwise.

	It is not compatible with uuencode.

	\param[in] encoding Target encoding.
	\param[out] out Where the resulting string will be written to.
	\param[in] in Input string.
	\param[in] length Input string's length.
	\param[in] headerMode Whether the output string will be used in
		a header or not.

	\return The amount of bytes written, or \c -1 if the encoding is
	not compatible nor recognized.

	\since Haiku R1
*/


/*!
	\fn ssize_t decode(mail_encoding encoding, char *out, const char *in, off_t length, int underscore_is_space)
	\brief Decodes a string from a certain encoding.

	Takes \a in of \a length of length and converts back from \a encoding into
	\a out.

	\a underscore_is_space is only useful when converting from Quoted-Printable
	encoding, when the data is going to be decoded from a header field.

	\param[in] encoding Input string's encoding.
	\param[out] out Where the resulting string will be written to.
	\param[in] in Input string.
	\param[in] length Input string's length.
	\param[in] underscore_is_space Should be equal to \c 1 to indicate when
		decoding a header field.

	\return The amount of bytes written, or \c -1 if the encoding is
	not compatible nor recognized.

	\since Haiku R1
*/


/*!
	\fn ssize_t max_encoded_length(mail_encoding encoding, off_t cur_length)
	\brief Returns the estimated output size of a certain encoding given
		a string of \a cur_length length.

	It is not compatible with uuencode.

	\param[in] encoding The target encoding.
	\param[in] cur_length The incoming length.

	\return The estimated amount of bytes the conversion to \a encoding
		will take if the incoming string is of \a cur_length, or \c -1 if
		the encoding is not compatible nor recognized.

	\since Haiku R1
*/


/*!
	\fn mail_encoding encoding_for_cte(const char *content_transfer_encoding)
	\brief Returns a mail_encoding value for the \a content_transfer_encoding
		string.

	\param[in] content_transfer_encoding A string with the name of the encoding:
		\n- \c "uuencode" for mail_encoding::uuencode
		\n- \c "base64" for mail_encoding::base64
		\n- \c "quoted-printable" for mail_encoding::quoted_printable
		\n- \c "7bit" for mail_encoding::seven_bit
		\n- \c "8bit" for mail_encoding::eight_bit
		\n- Other strings or if \a content_transfer_encoding is \c NULL
		return mail_encoding::no_encoding

	\return A mail_encoding value.

	\since Haiku R1
*/


/*!
	\fn ssize_t encode_base64(char *out, const char *in, off_t length, int headerMode)
	\brief Encodes a string to base64.

	Converts \a in of \a length of length as base64 into \a out.

	\a headerMode is used when the output will be used in a header, where
	there should not be any line breaks.

	\param[out] out Where the resulting string will be written to.
	\param[in] in Input string.
	\param[in] length Input string's length.
	\param[in] headerMode Whether the output string will be used in
		a header or not.

	\return The amount of bytes written.

	\since Haiku R1
*/


/*!
	\fn ssize_t decode_base64(char *out, const char *in, off_t length)
	\brief Decodes a base64 string.

	Takes \a in of \a length of length and converts back from base64 into
	\a out.

	\param[out] out Where the resulting string will be written to.
	\param[in] in Input string.
	\param[in] length Input string's length.

	\return The amount of bytes written.

	\since Haiku R1
*/


/*!
	\fn ssize_t encode_qp(char *out, const char *in, off_t length, int headerMode)
	\brief Encodes a string to Quoted-Printable.

	Converts \a in of \a length of length as Quoted-Printable into \a out.

	\a headerMode is used when the output will be used in a header, where
	there should not be any line breaks.

	\param[out] out Where the resulting string will be written to.
	\param[in] in Input string.
	\param[in] length Input string's length.
	\param[in] headerMode Whether the output string will be used in
		a header or not.

	\return The amount of bytes written.

	\since Haiku R1
*/


/*!
	\fn ssize_t decode_qp(char *out, const char *in, off_t length, int underscore_is_space)
	\brief Decodes a Quoted-Printable string.

	Takes \a in of \a length of length and converts back from base64 into
	\a out.

	\param[out] out Where the resulting string will be written to.
	\param[in] in Input string.
	\param[in] length Input string's length.
	\param[in] underscore_is_space Should be equal to \c 1 to indicate when
		decoding a header field.

	\return The amount of bytes written.

	\since Haiku R1
*/


/*!
	\fn ssize_t uu_decode(char *out, const char *in, off_t length)
	\brief Decodes a uuencoded string.

	Takes \a in of \a length of length and converts back from its
	uuencoded form into \a out.

	\param[out] out Where the resulting string will be written to.
	\param[in] in Input string.
	\param[in] length Input string's length.

	\return The amount of bytes written.

	\since Haiku R1
*/


