/*
 * Copyright 2020 Haiku, Inc. All rights reserved.
 * Distributed under the terms of the MIT License.
 *
 * Authors:
 *		Leorize, leorize+oss@disroot.org
 *
 * Corresponds to:
 *		headers/os/net/UrlProtocolDispatchingListener.h hrev54384
 *		src/kits/network/libnetapi/UrlProtocolDispatchingListener.cpp hrev54384
 */


/*!
	\file UrlProtocolDispatchingListener.h
	\ingroup network
	\brief Provides the BUrlProtocolDispatchingListener class.
*/


/*!
	\var B_URL_PROTOCOL_NOTIFICATION
	\brief The \c what constant for BMessage emitted by
		BUrlProtocolDispatchingListener.
*/


/*!
	\var B_URL_PROTOCOL_CONNECTION_OPENED
	\brief The type of message emitted by BUrlProtocolDispatchingListener::ConnectionOpened().
*/


/*!
	\var B_URL_PROTOCOL_HOSTNAME_RESOLVED
	\brief The type of message emitted by BUrlProtocolDispatchingListener::HostnameResolved().
*/


/*!
	\var B_URL_PROTOCOL_RESPONSE_STARTED
	\brief The type of message emitted by BUrlProtocolDispatchingListener::ResponseStarted().
*/


/*!
	\var B_URL_PROTOCOL_HEADERS_RECEIVED
	\brief The type of message emitted by BUrlProtocolDispatchingListener::HeadersReceived().
*/


/*!
	\var B_URL_PROTOCOL_DATA_RECEIVED
	\brief The type of message emitted by BUrlProtocolDispatchingListener::DataReceived().
*/


/*!
	\var B_URL_PROTOCOL_DOWNLOAD_PROGRESS
	\brief The type of message emitted by BUrlProtocolDispatchingListener::DownloadProgress().
*/


/*!
	\var B_URL_PROTOCOL_UPLOAD_PROGRESS
	\brief The type of message emitted by BUrlProtocolDispatchingListener::UploadProgress().
*/


/*!
	\var B_URL_PROTOCOL_REQUEST_COMPLETED
	\brief The type of message emitted by BUrlProtocolDispatchingListener::RequestCompleted().
*/


/*!
	\var B_URL_PROTOCOL_CERTIFICATE_VERIFICATION_FAILED
	\brief The type of message emitted by BUrlProtocolDispatchingListener::CertificateVerificationFailed().
*/


/*!
	\var B_URL_PROTOCOL_DEBUG_MESSAGE
	\brief The type of message emitted by BUrlProtocolDispatchingListener::DebugMessage().
*/


/*!
	\class BUrlProtocolDispatchingListener
	\ingroup network
	\brief Dispatches BUrlProtocolListener events as BMessage.

	BUrlProtocolDispatchingListener is a BUrlProtocolListener implementation
	that dispatches received events as BMessage. A corresponding
	BHandler implementation that make use of BUrlProtocolListener hooks
	to handle messages emitted by this class is available as
	BUrlProtocolAsynchronousListener.

	BMessage emitted from this class use the code #B_URL_PROTOCOL_NOTIFICATION.
	Refer to each member functions for the format of the messages they emit.
*/


/*!
	\fn virtual void BUrlProtocolDispatchingListener::ConnectionOpened(
		BUrlRequest* caller)
	\brief Emit a message when the socket is opened.

	<table>
		<caption>The format of the emitted message</caption>
		<tr>
			<th>Field name</th>
			<th>Type</th>
			<th>Value</th>
		</tr>
		<tr>
			<td>be:urlProtocolCaller</td>
			<td>\c B_POINTER_TYPE</td>
			<td>\a caller</td>
		</tr>
		<tr>
			<td>be:urlProtocolMessageType</td>
			<td>\c B_INT8_TYPE</td>
			<td>#B_URL_PROTOCOL_CONNECTION_OPENED</td>
		</tr>
	</table>
*/

/*!
	\fn virtual void BUrlProtocolDispatchingListener::HostnameResolved(
		BUrlRequest* caller, const char* ip)
	\brief Emit a message when the final IP is discovered.

	<table>
		<caption>The format of the emitted message</caption>
		<tr>
			<th>Field name</th>
			<th>Field type</th>
			<th>Value</th>
		</tr>
		<tr>
			<td>be:urlProtocolCaller</td>
			<td>\c B_POINTER_TYPE</td>
			<td>\a caller</td>
		</tr>
		<tr>
			<td>be:urlProtocolMessageType</td>
			<td>\c B_INT8_TYPE</td>
			<td>#B_URL_PROTOCOL_HOSTNAME_RESOLVED</td>
		</tr>
		<tr>
			<td>url:hostIp</td>
			<td>\c B_STRING_TYPE</td>
			<td>\a ip</td>
		</tr>
	</table>
*/

/*!
	\fn virtual void BUrlProtocolDispatchingListener::ResponseStarted(
		BUrlRequest* caller)
	\brief Emit a message when the server begins to reply.

	<table>
		<caption>The format of the emitted message</caption>
		<tr>
			<th>Field name</th>
			<th>Field type</th>
			<th>Value</th>
		</tr>
		<tr>
			<td>be:urlProtocolCaller</td>
			<td>\c B_POINTER_TYPE</td>
			<td>\a caller</td>
		</tr>
		<tr>
			<td>be:urlProtocolMessageType</td>
			<td>\c B_INT8_TYPE</td>
			<td>#B_URL_PROTOCOL_RESPONSE_STARTED</td>
		</tr>
	</table>
*/

/*!
	\fn virtual void BUrlProtocolDispatchingListener::HeadersReceived(
		BUrlRequest* caller, const BUrlResult& result);
	\brief Emit a message when all of the response metadata are made available.

	<table>
		<caption>The format of the emitted message</caption>
		<tr>
			<th>Field name</th>
			<th>Field type</th>
			<th>Value</th>
		</tr>
		<tr>
			<td>be:urlProtocolCaller</td>
			<td>\c B_POINTER_TYPE</td>
			<td>\a caller</td>
		</tr>
		<tr>
			<td>be:urlProtocolMessageType</td>
			<td>\c B_INT8_TYPE</td>
			<td>#B_URL_PROTOCOL_HEADERS_RECEIVED</td>
		</tr>
		<tr>
			<td>url:result</td>
			<td>\c B_MESSAGE_TYPE</td>
			<td>
				An archived copy of \a result. BUrlResult(BMessage*) can be
				used to create a new BUrlResult from the received BMessage.
			</td>
		</tr>
	</table>
*/

/*!
	\fn virtual void BUrlProtocolDispatchingListener::DataReceived(
		BUrlRequest* caller, const char* data, off_t position, size_t size)
	\brief Emit a message each time a block of data is received.

	<table>
		<caption>The format of the emitted message</caption>
		<tr>
			<th>Field name</th>
			<th>Field type</th>
			<th>Value</th>
		</tr>
		<tr>
			<td>be:urlProtocolCaller</td>
			<td>\c B_POINTER_TYPE</td>
			<td>\a caller</td>
		</tr>
		<tr>
			<td>be:urlProtocolMessageType</td>
			<td>\c B_INT8_TYPE</td>
			<td>#B_URL_PROTOCOL_DATA_RECEIVED</td>
		</tr>
		<tr>
			<td>url:data</td>
			<td>\c B_STRING_TYPE</td>
			<td>
				The data block as pointed to by \a data.

				\warning This field might contains a \c NUL character, thus
					it's recommended that BMessage::FindData() should be used
					over other helper functions to get the exact size of the
					data block.

			</td>
		</tr>
		<tr>
			<td>url:position</td>
			<td>\c B_INT32_TYPE</td>
			<td>\a position</td>
		</tr>
	</table>
*/

/*!
	\fn virtual void BUrlProtocolDispatchingListener::DownloadProgress(
		BUrlRequest* caller, ssize_t bytesReceived, ssize_t bytesTotal)
	\brief Emit a message each time a block of data is received.

	This message will usually be emitted after DataReceived().

	<table>
		<caption>The format of the emitted message</caption>
		<tr>
			<th>Field name</th>
			<th>Field type</th>
			<th>Value</th>
		</tr>
		<tr>
			<td>be:urlProtocolCaller</td>
			<td>\c B_POINTER_TYPE</td>
			<td>\a caller</td>
		</tr>
		<tr>
			<td>be:urlProtocolMessageType</td>
			<td>\c B_INT8_TYPE</td>
			<td>#B_URL_PROTOCOL_DOWNLOAD_PROGRESS</td>
		</tr>
		<tr>
			<td>url:bytesReceived</td>
			<td>\c B_INT32_TYPE</td>
			<td>\a bytesReceived</td>
		</tr>
		<tr>
			<td>url:bytesTotal</td>
			<td>\c B_INT32_TYPE</td>
			<td>\a bytesTotal</td>
		</tr>
	</table>
*/

/*!
	\fn virtual void BUrlProtocolDispatchingListener::UploadProgress(
		BUrlRequest* caller, ssize_t bytesSent, ssize_t bytesTotal)
	\brief Emit a message each time a block of data is sent.

	<table>
		<caption>The format of the emitted message</caption>
		<tr>
			<th>Field name</th>
			<th>Field type</th>
			<th>Value</th>
		</tr>
		<tr>
			<td>be:urlProtocolCaller</td>
			<td>\c B_POINTER_TYPE</td>
			<td>\a caller</td>
		</tr>
		<tr>
			<td>be:urlProtocolMessageType</td>
			<td>\c B_INT8_TYPE</td>
			<td>#B_URL_PROTOCOL_UPLOAD_PROGRESS</td>
		</tr>
		<tr>
			<td>url:bytesSent</td>
			<td>\c B_INT32_TYPE</td>
			<td>\a bytesSent</td>
		</tr>
		<tr>
			<td>url:bytesTotal</td>
			<td>\c B_INT32_TYPE</td>
			<td>\a bytesTotal</td>
		</tr>
	</table>
*/

/*!
	\fn virtual void BUrlProtocolDispatchingListener::RequestCompleted(
		BUrlRequest* caller, bool success)
	\brief Emit a message once the request is complete.

	<table>
		<caption>The format of the emitted message</caption>
		<tr>
			<th>Field name</th>
			<th>Type</th>
			<th>Value</th>
		</tr>
		<tr>
			<td>be:urlProtocolCaller</td>
			<td>\c B_POINTER_TYPE</td>
			<td>\a caller</td>
		</tr>
		<tr>
			<td>be:urlProtocolMessageType</td>
			<td>\c B_INT8_TYPE</td>
			<td>#B_URL_PROTOCOL_REQUEST_COMPLETED</td>
		</tr>
		<tr>
			<td>url:success</td>
			<td>\c B_BOOL_TYPE</td>
			<td>\a success</td>
		</tr>
	</table>
*/

/*!
	\fn virtual void BUrlProtocolDispatchingListener::DebugMessage(BUrlRequest* caller,
		BUrlProtocolDebugMessage type, const char* text)
	\brief Emit a message each time a debug message is emitted.

	<table>
		<caption>The format of the emitted message</caption>
		<tr>
			<th>Field name</th>
			<th>Type</th>
			<th>Value</th>
		</tr>
		<tr>
			<td>url:type</td>
			<td>\c B_INT32_TYPE</td>
			<td>\a type</td>
		</tr>
		<tr>
			<td>url:text</td>
			<td>\c B_STRING_TYPE</td>
			<td>\a text</td>
		</tr>
		<tr>
			<td>be:urlProtocolCaller</td>
			<td>\c B_POINTER_TYPE</td>
			<td>\a caller</td>
		</tr>
		<tr>
			<td>be:urlProtocolMessageType</td>
			<td>\c B_INT8_TYPE</td>
			<td>#B_URL_PROTOCOL_CERTIFICATE_VERIFICATION_FAILED</td>
		</tr>
	</table>
*/

/*!
	\fn virtual bool BUrlProtocolDispatchingListener::CertificateVerificationFailed(
		BUrlRequest* caller, BCertificate& certificate, const char* message
	)
	\brief Emit a message when cerificate verification failed.

	<table>
		<caption>The format of the emitted message</caption>
		<tr>
			<th>Field name</th>
			<th>Type</th>
			<th>Value</th>
		</tr>
		<tr>
			<td>be:urlProtocolCaller</td>
			<td>\c B_POINTER_TYPE</td>
			<td>\a caller</td>
		</tr>
		<tr>
			<td>be:urlProtocolMessageType</td>
			<td>\c B_INT8_TYPE</td>
			<td>#B_URL_PROTOCOL_CERTIFICATE_VERIFICATION_FAILED</td>
		</tr>
		<tr>
			<td>url:error</td>
			<td>\c B_STRING_TYPE</td>
			<td>\a message</td>
		</tr>
		<tr>
			<td>url:certificate</td>
			<td>\c B_POINTER_TYPE</td>
			<td>A pointer pointing to \a certificate</td>
		</tr>
	</table>

	This message expects a reply from the handler.

	<table>
		<caption>The expected format of the reply</caption>
		<tr>
			<th>Field name</th>
			<th>Type</th>
			<th>Value</th>
		</tr>
		<tr>
			<td>url:continue</td>
			<td>\c B_BOOL_TYPE</td>
			<td>
				\a true if the request should be continued, \a false otherwise.
			</td>
		</tr>
	</table>
*/
