{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3bc36f92_79f2336d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000433
      },
      "writtenOn": "2024-08-18T00:32:39Z",
      "side": 1,
      "message": "OK tested",
      "revId": "7d2260a9716c53e2ae3966e807c53472e45c436d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2da89be8_28c61fcf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2024-08-18T05:38:16Z",
      "side": 1,
      "message": "Is it really rewritten? All comments except header looks like copy-pasted.",
      "revId": "7d2260a9716c53e2ae3966e807c53472e45c436d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a7defaa7_1933d093",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000433
      },
      "writtenOn": "2024-08-18T06:38:07Z",
      "side": 1,
      "message": "I made references to https://github.com/haiku/haiku/commit/7749d0bb0c358a3279b1b9cc76d8376e900130a5 and https://github.com/haiku/haiku/commit/a2755521d5bce63a24b2101dd47ed5cb3015a6a1. The original names and values were retained, and only the code was modernized. Otherwise, compatibility would be undermined.",
      "parentUuid": "2da89be8_28c61fcf",
      "revId": "7d2260a9716c53e2ae3966e807c53472e45c436d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ced2615_a948fe20",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2024-08-18T08:52:13Z",
      "side": 1,
      "message": "well that\u0027s still copyrighted content",
      "parentUuid": "a7defaa7_1933d093",
      "revId": "7d2260a9716c53e2ae3966e807c53472e45c436d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb5aeff5_c039f0a9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000433
      },
      "writtenOn": "2024-08-18T09:13:34Z",
      "side": 1,
      "message": "However, not doing so would break compatibility. I saw that previous rewrites in this project were like this too, e.g. https://github.com/haiku/haiku/commit/a2755521d5bce63a24b2101dd47ed5cb3015a6a1",
      "parentUuid": "6ced2615_a948fe20",
      "revId": "7d2260a9716c53e2ae3966e807c53472e45c436d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02f79aa8_d38854c0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2024-08-18T09:15:02Z",
      "side": 1,
      "message": "It is not required to copy comments and code formatting to preserved compatibility.",
      "parentUuid": "fb5aeff5_c039f0a9",
      "revId": "7d2260a9716c53e2ae3966e807c53472e45c436d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5f697701_e62a7267",
        "filename": "headers/os/drivers/PCI.h",
        "patchSetId": 6
      },
      "lineNbr": 83,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-18T00:34:37Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n#define B_PCI_MODULE_NAME \"bus_managers/pci/v1\"\n\n\t/*\n\t *\tpci device info\n\t */\n\n\ttypedef struct pci_info {\n\t\tuint16 vendor_id; // vendor id\n\t\tuint16 device_id; // device id\n\t\tuint8 bus; // bus number\n\t\tuint8 device; // device number on bus\n\t\tuint8 function; // function number in device\n\t\tuint8 revision; // revision id\n\t\tuint8 class_api; // specific register interface type\n\t\tuint8 class_sub; // specific device function\n\t\tuint8 class_base; // device type (display vs network, etc)\n\t\tuint8 line_size; // cache line size in 32 bit words\n\t\tuint8 latency; // latency timer\n\t\tuint8 header_type; // header type\n\t\tuint8 bist; // built-in self-test\n\t\tuint8 reserved; // filler, for alignment\n\t\tunion {\n\t\t\tstruct {\n\t\t\t\tuint32 cardbus_cis; // CardBus CIS pointer\n\t\t\t\tuint16 subsystem_id; // subsystem (add-in card) id\n\t\t\t\tuint16 subsystem_vendor_id; // subsystem (add-in card) vendor id\n\t\t\t\tuint32 rom_base; // rom base address, viewed from host\n\t\t\t\tuint32 rom_base_pci; // rom base addr, viewed from pci\n\t\t\t\tuint32 rom_size; // rom size\n\t\t\t\tuint32 base_registers[6]; // base registers, viewed from host\n\t\t\t\tuint32 base_registers_pci[6]; // base registers, viewed from pci\n\t\t\t\tuint32 base_register_sizes[6]; // size of what base regs point to\n\t\t\t\tuint8 base_register_flags[6]; // flags from base address fields\n\t\t\t\tuint8 interrupt_line; // interrupt line\n\t\t\t\tuint8 interrupt_pin; // interrupt pin\n\t\t\t\tuint8 min_grant; // burst period @ 33 Mhz\n\t\t\t\tuint8 max_latency; // how often PCI access needed\n\t\t\t} h0;\n\t\t\tstruct {\n\t\t\t\tuint32 base_registers[2]; // base registers, viewed from host\n\t\t\t\tuint32 base_registers_pci[2]; // base registers, viewed from pci\n\t\t\t\tuint32 base_register_sizes[2]; // size of what base regs point to\n\t\t\t\tuint8 base_register_flags[2]; // flags from base address fields\n\t\t\t\tuint8 primary_bus;\n\t\t\t\tuint8 secondary_bus;\n\t\t\t\tuint8 subordinate_bus;\n\t\t\t\tuint8 secondary_latency;\n\t\t\t\tuint8 io_base;\n\t\t\t\tuint8 io_limit;\n\t\t\t\tuint16 secondary_status;\n\t\t\t\tuint16 memory_base;\n\t\t\t\tuint16 memory_limit;\n\t\t\t\tuint16 prefetchable_memory_base;\n\t\t\t\tuint16 prefetchable_memory_limit;\n\t\t\t\tuint32 prefetchable_memory_base_upper32;\n\t\t\t\tuint32 prefetchable_memory_limit_upper32;\n\t\t\t\tuint16 io_base_upper16;\n\t\t\t\tuint16 io_limit_upper16;\n\t\t\t\tuint32 rom_base; // rom base address, viewed from host\n\t\t\t\tuint32 rom_base_pci; // rom base addr, viewed from pci\n\t\t\t\tuint8 interrupt_line; // interrupt line\n\t\t\t\tuint8 interrupt_pin; // interrupt pin\n\t\t\t\tuint16 bridge_control;\n\t\t\t\tuint16 subsystem_id; // subsystem (add-in card) id\n\t\t\t\tuint16 subsystem_vendor_id; // subsystem (add-in card) vendor id\n\t\t\t} h1;\n\t\t\tstruct {\n\t\t\t\tuint16 subsystem_id; // subsystem (add-in card) id\n\t\t\t\tuint16 subsystem_vendor_id; // subsystem (add-in card) vendor id\n```",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 83,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "7d2260a9716c53e2ae3966e807c53472e45c436d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3f73114b_db7419f0",
        "filename": "headers/os/drivers/PCI.h",
        "patchSetId": 6
      },
      "lineNbr": 101,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-18T00:34:37Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\t\t\t// for testing only, not final (do not use!):\n\t\t\t\tuint8 primary_bus;\n\t\t\t\tuint8 secondary_bus;\n\t\t\t\tuint8 subordinate_bus;\n\t\t\t\tuint8 secondary_latency;\n\t\t\t\tuint16 reserved;\n\t\t\t\tuint32 memory_base;\n\t\t\t\tuint32 memory_limit;\n\t\t\t\tuint32 memory_base_upper32;\n\t\t\t\tuint32 memory_limit_upper32;\n\t\t\t\tuint32 io_base;\n\t\t\t\tuint32 io_limit;\n\t\t\t\tuint32 io_base_upper32;\n\t\t\t\tuint32 io_limit_upper32;\n\t\t\t\tuint16 secondary_status;\n\t\t\t\tuint16 bridge_control;\n```",
      "range": {
        "startLine": 86,
        "startChar": 0,
        "endLine": 101,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "7d2260a9716c53e2ae3966e807c53472e45c436d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dbf12c9e_d7ae1b98",
        "filename": "headers/os/drivers/PCI.h",
        "patchSetId": 6
      },
      "lineNbr": 227,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-18T00:34:37Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tbus_manager_info binfo;\n\n\tuint8 (*read_io_8)(int mapped_io_addr);\n\tvoid (*write_io_8)(int mapped_io_addr, uint8 value);\n\tuint16 (*read_io_16)(int mapped_io_addr);\n\tvoid (*write_io_16)(int mapped_io_addr, uint16 value);\n\tuint32 (*read_io_32)(int mapped_io_addr);\n\tvoid (*write_io_32)(int mapped_io_addr, uint32 value);\n\n\tlong (*get_nth_pci_info)(long index, // index into pci device table\n\t\tpci_info* info // caller-supplied buffer for info\n\t);\n\n\tuint32 (*read_pci_config)(uint8 bus, // bus number\n\t\tuint8 device, // device # on bus\n\t\tuint8 function, // function # in device\n\t\tuint16 offset, // offset in configuration space\n\t\tuint8 size // # bytes to read (1, 2 or 4)\n\t);\n\tvoid (*write_pci_config)(uint8 bus, // bus number\n\t\tuint8 device, // device # on bus\n\t\tuint8 function, // function # in device\n\t\tuint16 offset, // offset in configuration space\n\t\tuint8 size, // # bytes to write (1, 2 or 4)\n\t\tuint32 value // value to write\n\t);\n\n\tphys_addr_t (*ram_address)(phys_addr_t physical_address_in_system_memory);\n\n\tstatus_t (\n\t\t*find_pci_capability)(uint8 bus, uint8 device, uint8 function, uint8 cap_id, uint8* offset);\n\n\tstatus_t (*reserve_device)(uint8 bus, uint8 device, uint8 function, const char* driver_name,\n\t\tvoid* cookie);\n\tstatus_t (*unreserve_device)(uint8 bus, uint8 device, uint8 function, const char* driver_name,\n\t\tvoid* cookie);\n\n\tstatus_t (*update_interrupt_line)(uint8 bus, uint8 device, uint8 function,\n\t\tuint8 newInterruptLineValue);\n\n\tstatus_t (*find_pci_extended_capability)(uint8 bus, uint8 device, uint8 function, uint16 cap_id,\n\t\tuint16* offset);\n\n\tstatus_t (*get_powerstate)(uint8 bus, uint8 device, uint8 function, uint8* state);\n\tstatus_t (*set_powerstate)(uint8 bus, uint8 device, uint8 function, uint8 newState);\n\n\tuint32 (*get_msi_count)(uint8 bus, // bus number\n\t\tuint8 device, // device # on bus\n\t\tuint8 function // function # in device\n\t);\n\tstatus_t (*configure_msi)(uint8 bus, // bus number\n\t\tuint8 device, // device # on bus\n\t\tuint8 function, // function # in device\n\t\tuint32 count, // count of vectors desired\n\t\tuint32* startVector // first configured vector\n\t);\n\tstatus_t (*unconfigure_msi)(uint8 bus, // bus number\n\t\tuint8 device, // device # on bus\n\t\tuint8 function // function # in device\n\t);\n\tstatus_t (*enable_msi)(uint8 bus, // bus number\n\t\tuint8 device, // device # on bus\n\t\tuint8 function // function # in device\n\t);\n\tstatus_t (*disable_msi)(uint8 bus, // bus number\n\t\tuint8 device, // device # on bus\n\t\tuint8 function // function # in device\n\t);\n\n\tuint32 (*get_msix_count)(uint8 bus, // bus number\n\t\tuint8 device, // device # on bus\n\t\tuint8 function // function # in device\n\t);\n\tstatus_t (*configure_msix)(uint8 bus, // bus number\n\t\tuint8 device, // device # on bus\n\t\tuint8 function, // function # in device\n\t\tuint32 count, // count of vectors desired\n\t\tuint32* startVector // first configured vector\n\t);\n\tstatus_t (*enable_msix)(uint8 bus, // bus number\n\t\tuint8 device, // device # on bus\n\t\tuint8 function // function # in device\n\t);\n```",
      "range": {
        "startLine": 110,
        "startChar": 0,
        "endLine": 227,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "7d2260a9716c53e2ae3966e807c53472e45c436d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "26e205c4_679de997",
        "filename": "headers/os/drivers/PCI.h",
        "patchSetId": 6
      },
      "lineNbr": 249,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-18T00:34:37Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n *\toffsets in PCI configuration space to the elements of the predefined\n *\theader common to all header types\n */\n\n#define PCI_vendor_id 0x00 // (2 byte) vendor id\n#define PCI_device_id 0x02 // (2 byte) device id\n#define PCI_command 0x04 // (2 byte) command\n#define PCI_status 0x06 // (2 byte) status\n#define PCI_revision 0x08 // (1 byte) revision id\n#define PCI_class_api 0x09 // (1 byte) specific register interface type\n#define PCI_class_sub 0x0a // (1 byte) specific device function\n#define PCI_class_base 0x0b // (1 byte) device type (display vs network, etc)\n#define PCI_line_size 0x0c // (1 byte) cache line size in 32 bit words\n#define PCI_latency 0x0d // (1 byte) latency timer\n#define PCI_header_type 0x0e // (1 byte) header type\n#define PCI_bist 0x0f // (1 byte) built-in self-test\n\n#define PCI_extended_capability 0x100 // (4 bytes) extended capability\n```",
      "range": {
        "startLine": 232,
        "startChar": 0,
        "endLine": 249,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "7d2260a9716c53e2ae3966e807c53472e45c436d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a1581526_da7b47c8",
        "filename": "headers/os/drivers/PCI.h",
        "patchSetId": 6
      },
      "lineNbr": 260,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-18T00:34:37Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n *\toffsets in PCI configuration space to the elements of the predefined\n *\theader common to header types 0x00 and 0x01\n */\n\n#define PCI_base_registers 0x10 // base registers (size varies)\n#define PCI_interrupt_line 0x3c // (1 byte) interrupt line\n#define PCI_interrupt_pin 0x3d // (1 byte) interrupt pin\n```",
      "range": {
        "startLine": 253,
        "startChar": 0,
        "endLine": 260,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "7d2260a9716c53e2ae3966e807c53472e45c436d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "06226650_d6d04612",
        "filename": "headers/os/drivers/PCI.h",
        "patchSetId": 6
      },
      "lineNbr": 273,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-18T00:34:37Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n *\toffsets in PCI configuration space to the elements of header type 0x00\n */\n\n#define PCI_cardbus_cis \\\n0x28 // (4 bytes) CardBus CIS (Card Information Structure) pointer (see PCMCIA v2.10 Spec)\n#define PCI_subsystem_vendor_id 0x2c // (2 bytes) subsystem (add-in card) vendor id\n#define PCI_subsystem_id 0x2e // (2 bytes) subsystem (add-in card) id\n#define PCI_rom_base 0x30 // (4 bytes) expansion rom base address\n#define PCI_capabilities_ptr 0x34 // (1 byte) pointer to the start of the capabilities list\n#define PCI_min_grant 0x3e // (1 byte) burst period @ 33 Mhz\n#define PCI_max_latency 0x3f // (1 byte) how often PCI access needed\n```",
      "range": {
        "startLine": 264,
        "startChar": 0,
        "endLine": 273,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "7d2260a9716c53e2ae3966e807c53472e45c436d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "730b0a5a_48d95454",
        "filename": "headers/os/drivers/PCI.h",
        "patchSetId": 6
      },
      "lineNbr": 290,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-18T00:34:37Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n *\toffsets in PCI configuration space to the elements of header type 0x01 (PCI-to-PCI bridge)\n */\n\n#define PCI_primary_bus 0x18 // (1 byte)\n#define PCI_secondary_bus 0x19 // (1 byte)\n#define PCI_subordinate_bus 0x1A // (1 byte)\n#define PCI_secondary_latency 0x1B // (1 byte) latency of secondary bus\n#define PCI_io_base 0x1C // (1 byte) io base address register for 2ndry bus*/\n#define PCI_io_limit 0x1D // (1 byte)\n#define PCI_secondary_status 0x1E // (2 bytes)\n#define PCI_memory_base 0x20 // (2 bytes)\n#define PCI_memory_limit 0x22 // (2 bytes)\n#define PCI_prefetchable_memory_base 0x24 // (2 bytes)\n#define PCI_prefetchable_memory_limit 0x26 // (2 bytes)\n```",
      "range": {
        "startLine": 277,
        "startChar": 0,
        "endLine": 290,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "7d2260a9716c53e2ae3966e807c53472e45c436d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0cb1e68b_d2d81f97",
        "filename": "headers/os/drivers/PCI.h",
        "patchSetId": 6
      },
      "lineNbr": 296,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-18T00:34:37Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n#define PCI_io_base_upper16 0x30 // (2 bytes)\n#define PCI_io_limit_upper16 0x32 // (2 bytes)\n#define PCI_sub_vendor_id_1 0x34 // (2 bytes)\n#define PCI_sub_device_id_1 0x36 // (2 bytes)\n```",
      "range": {
        "startLine": 293,
        "startChar": 0,
        "endLine": 296,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "7d2260a9716c53e2ae3966e807c53472e45c436d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b022b16e_a51b6ba0",
        "filename": "headers/os/drivers/PCI.h",
        "patchSetId": 6
      },
      "lineNbr": 298,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-18T00:34:37Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n#define PCI_bridge_control 0x3E // (2 bytes)\n```",
      "range": {
        "startLine": 298,
        "startChar": 0,
        "endLine": 298,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "7d2260a9716c53e2ae3966e807c53472e45c436d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "668886cb_463dd483",
        "filename": "headers/os/drivers/PCI.h",
        "patchSetId": 6
      },
      "lineNbr": 340,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-18T00:34:37Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n#define PCI_capabilities_ptr_2 0x14 // (1 byte)\n#define PCI_secondary_status_2 0x16 // (2 bytes)\n#define PCI_primary_bus_2 0x18 // (1 byte)\n#define PCI_secondary_bus_2 0x19 // (1 byte)\n#define PCI_subordinate_bus_2 0x1A // (1 byte)\n#define PCI_secondary_latency_2 0x1B // (1 byte) latency of secondary bus\n#define PCI_memory_base0_2 0x1C // (4 bytes)\n#define PCI_memory_limit0_2 0x20 // (4 bytes)\n#define PCI_memory_base1_2 0x24 // (4 bytes)\n#define PCI_memory_limit1_2 0x28 // (4 bytes)\n#define PCI_io_base0_2 0x2c // (4 bytes)\n#define PCI_io_limit0_2 0x30 // (4 bytes)\n#define PCI_io_base1_2 0x34 // (4 bytes)\n#define PCI_io_limit1_2 0x38 // (4 bytes)\n#define PCI_bridge_control_2 0x3E // (2 bytes)\n\n#define PCI_sub_vendor_id_2 0x40 // (2 bytes)\n#define PCI_sub_device_id_2 0x42 // (2 bytes)\n\n#define PCI_card_interface_2 0x44 // ??\n\n\t/*\n\t *\tvalues for the class_base field in the common header\n\t */\n\n#define PCI_early 0x00 // built before class codes defined\n#define PCI_mass_storage 0x01 // mass storage_controller\n#define PCI_network 0x02 // network controller\n#define PCI_display 0x03 // display controller\n#define PCI_multimedia 0x04 // multimedia device\n#define PCI_memory 0x05 // memory controller\n#define PCI_bridge 0x06 // bridge controller\n#define PCI_simple_communications 0x07 // simple communications controller\n#define PCI_base_peripheral 0x08 // base system peripherals\n#define PCI_input 0x09 // input devices\n#define PCI_docking_station 0x0a // docking stations\n#define PCI_processor 0x0b // processors\n#define PCI_serial_bus 0x0c // serial bus controllers\n#define PCI_wireless 0x0d // wireless controllers\n```",
      "range": {
        "startLine": 302,
        "startChar": 0,
        "endLine": 340,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "7d2260a9716c53e2ae3966e807c53472e45c436d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1a7d9fe5_2815f369",
        "filename": "headers/os/drivers/PCI.h",
        "patchSetId": 6
      },
      "lineNbr": 627,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-18T00:34:37Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n#define PCI_data_acquisition 0x11 // data acquisition and signal processing controllers\n#define PCI_processing_accelerator 0x12 // processing accelerators\n#define PCI_nonessential_function 0x13 // non-essential instrumentation function\n\n#define PCI_undefined 0xFF // not in any defined class\n\n\n\t/*\n\t *\tvalues for the class_sub field for class_base \u003d 0x00 (built before\n\t *\tclass codes were defined)\n\t */\n\n#define PCI_early_not_vga 0x00 // all except vga\n#define PCI_early_vga 0x01 // vga devices\n\n\n\t/*\n\t *\tvalues for the class_sub field for class_base \u003d 0x01 (mass storage)\n\t */\n\n#define PCI_scsi 0x00 // SCSI controller\n#define PCI_ide 0x01 // IDE controller\n#define PCI_floppy 0x02 // floppy disk controller\n#define PCI_ipi 0x03 // IPI bus controller\n#define PCI_raid 0x04 // RAID controller\n#define PCI_ata 0x05 // ATA controller with ADMA interface\n#define PCI_sata 0x06 // Serial ATA controller\n#define PCI_sas 0x07 // Serial Attached SCSI controller\n#define PCI_nvm 0x08 // NVM Express controller\n#define PCI_ufs 0x09 // Universal Flash Storage controller\n#define PCI_mass_storage_other 0x80 // other mass storage controller\n\n\t/*\n\t *\tbit mask of the class_api field for\n\t *\t\tclass_base\t\u003d 0x01 (mass storage)\n\t *\t\tclass_sub\t\u003d 0x01 (IDE controller)\n\t */\n\n#define PCI_ide_primary_native 0x01 // primary channel is in native mode\n#define PCI_ide_primary_fixed 0x02 // primary channel can be switched to native mode\n#define PCI_ide_secondary_native 0x04 // secondary channel is in native mode\n#define PCI_ide_secondary_fixed 0x08 // secondary channel can be switched to native mode\n#define PCI_ide_master 0x80 // master device\n\n\t/*\n\t *\tvalues of the class_api field for\n\t *\t\tclass_base\t\u003d 0x01 (mass storage)\n\t *\t\tclass_sub\t\u003d 0x06 (Serial ATA controller)\n\t */\n\n#define PCI_sata_other 0x00 // vendor specific interface\n#define PCI_sata_ahci 0x01 // AHCI interface\n\n\t/*\n\t *\tvalues of the class_api field for\n\t *\t\tclass_base\t\u003d 0x01 (mass storage)\n\t *\t\tclass_sub\t\u003d 0x08 (NVM Express controller)\n\t */\n\n#define PCI_nvm_other 0x00 // vendor specific interface\n#define PCI_nvm_hci 0x01 // NVMHCI interface 1.0\n#define PCI_nvm_hci_enterprise 0x02 // NVMHCI enterprise\n\n\t/*\n\t *\tvalues of the class_api field for\n\t *\t\tclass_base\t\u003d 0x01 (mass storage)\n\t *\t\tclass_sub\t\u003d 0x09 (Universal Flash Storage controller)\n\t */\n\n#define PCI_ufs_other 0x00 // vendor specific interface\n#define PCI_ufs_hci 0x01 // UFSHCI interface\n\n\t/*\n\t *\tvalues for the class_sub field for class_base \u003d 0x02 (network)\n\t */\n\n#define PCI_ethernet 0x00 // Ethernet controller\n#define PCI_token_ring 0x01 // Token Ring controller\n#define PCI_fddi 0x02 // FDDI controller\n#define PCI_atm 0x03 // ATM controller\n#define PCI_isdn 0x04 // ISDN controller\n#define PCI_worldfip 0x05 // WorldFip controller\n#define PCI_picmg 0x06 // PICMG controller\n#define PCI_network_infiniband 0x07 // InfiniBand controller\n#define PCI_hfc 0x08 // Host fabric controller\n#define PCI_network_other 0x80 // other network controller\n\n\n\t/*\n\t *\tvalues for the class_sub field for class_base \u003d 0x03 (display)\n\t */\n\n#define PCI_vga 0x00 // VGA controller\n#define PCI_xga 0x01 // XGA controller\n#define PCI_3d 0x02 // 3d controller\n#define PCI_display_other 0x80 // other display controller\n\n\n\t/*\n\t *\tvalues for the class_sub field for class_base \u003d 0x04 (multimedia device)\n\t */\n\n#define PCI_video 0x00 // video\n#define PCI_audio 0x01 // audio\n#define PCI_telephony 0x02 // computer telephony device\n#define PCI_hd_audio 0x03 // HD audio\n#define PCI_multimedia_other 0x80 // other multimedia device\n\n\n\t/*\n\t *\tvalues of the class_api field for\n\t *\t\tclass_base\t\u003d 0x04 (multimedia device)\n\t *\t\tclass_sub\t\u003d 0x03 (HD audio)\n\t */\n\n#define PCI_hd_audio_vendor 0x80 // with additional vendor specific extensions\n\n\t/*\n\t *\tvalues for the class_sub field for class_base \u003d 0x05 (memory)\n\t */\n\n#define PCI_ram 0x00 // RAM\n#define PCI_flash 0x01 // flash\n#define PCI_memory_other 0x80 // other memory controller\n\n\n\t/*\n\t *\tvalues for the class_sub field for class_base \u003d 0x06 (bridge)\n\t */\n\n#define PCI_host 0x00 // host bridge\n#define PCI_isa 0x01 // ISA bridge\n#define PCI_eisa 0x02 // EISA bridge\n#define PCI_microchannel 0x03 // MicroChannel bridge\n#define PCI_pci 0x04 // PCI-to-PCI bridge\n#define PCI_pcmcia 0x05 // PCMCIA bridge\n#define PCI_nubus 0x06 // NuBus bridge\n#define PCI_cardbus 0x07 // CardBus bridge\n#define PCI_raceway 0x08 // RACEway bridge\n#define PCI_bridge_transparent 0x09 // PCI transparent\n#define PCI_bridge_infiniband 0x0a // Infiniband\n#define PCI_bridge_as_pci 0x0b // Advanced Switching to PCI host bridge\n#define PCI_bridge_other 0x80 // other bridge device\n\n\t/*\n\t *\tvalues of the class_api field for\n\t *\t\tclass_base\t\u003d 0x06 (bridge), and\n\t *\t\tclass_sub\t\u003d 0x0b (Advanced Switching to PCI host bridge)\n\t */\n\n#define PCI_bridge_as_pci_asi_sig 0x01 // ASI-SIG Defined Portal Interface\n\n\t/*\n\t\tvalues for the class_sub field for class_base \u003d 0x07 (simple\n\t\tcommunications controllers)\n\t*/\n\n#define PCI_serial 0x00 // serial port controller\n#define PCI_parallel 0x01 // parallel port\n#define PCI_multiport_serial 0x02 // multiport serial controller\n#define PCI_modem 0x03 // modem\n#define PCI_gpib 0x04 // GPIB controller\n#define PCI_smart_card 0x05 // Smard Card controller\n#define PCI_simple_communications_other 0x80 // other communications device\n\n\t/*\n\t *\tvalues of the class_api field for\n\t *\t\tclass_base\t\u003d 0x07 (simple communications), and\n\t *\t\tclass_sub\t\u003d 0x00 (serial port controller)\n\t */\n\n#define PCI_serial_xt 0x00 // XT-compatible serial controller\n#define PCI_serial_16450 0x01 // 16450-compatible serial controller\n#define PCI_serial_16550 0x02 // 16550-compatible serial controller\n\n\n\t/*\n\t *\tvalues of the class_api field for\n\t *\t\tclass_base\t\u003d 0x07 (simple communications), and\n\t *\t\tclass_sub\t\u003d 0x01 (parallel port)\n\t */\n\n#define PCI_parallel_simple 0x00 // simple (output-only) parallel port\n#define PCI_parallel_bidirectional 0x01 // bidirectional parallel port\n#define PCI_parallel_ecp 0x02 // ECP 1.x compliant parallel port\n\n\n\t/*\n\t *\tvalues for the class_sub field for class_base \u003d 0x08 (generic\n\t *\tsystem peripherals)\n\t */\n\n#define PCI_pic 0x00 // peripheral interrupt controller\n#define PCI_dma 0x01 // dma controller\n#define PCI_timer 0x02 // timers\n#define PCI_rtc 0x03 // real time clock\n#define PCI_generic_hot_plug 0x04 // generic PCI hot-plug controller\n#define PCI_sd_host 0x05 // SD Host controller\n#define PCI_iommu 0x06 // IOMMU\n#define PCI_rcec 0x07 // Root Complex Event Collector\n#define PCI_system_peripheral_other 0x80 // other generic system peripheral\n\n\t/*\n\t *\tvalues of the class_api field for\n\t *\t\tclass_base\t\u003d 0x08 (generic system peripherals)\n\t *\t\tclass_sub\t\u003d 0x00 (peripheral interrupt controller)\n\t */\n\n#define PCI_pic_8259 0x00 // generic 8259\n#define PCI_pic_isa 0x01 // ISA pic\n#define PCI_pic_eisa 0x02 // EISA pic\n\n\t/*\n\t *\tvalues of the class_api field for\n\t *\t\tclass_base\t\u003d 0x08 (generic system peripherals)\n\t *\t\tclass_sub\t\u003d 0x01 (dma controller)\n\t */\n\n#define PCI_dma_8237 0x00 // generic 8237\n#define PCI_dma_isa 0x01 // ISA dma\n#define PCI_dma_eisa 0x02 // EISA dma\n\n\t/*\n\t *\tvalues of the class_api field for\n\t *\t\tclass_base\t\u003d 0x08 (generic system peripherals)\n\t *\t\tclass_sub\t\u003d 0x02 (timer)\n\t */\n\n#define PCI_timer_8254 0x00 // generic 8254\n#define PCI_timer_isa 0x01 // ISA timer\n#define PCI_timer_eisa 0x02 // EISA timers (2 timers)\n\n\n\t/*\n\t *\tvalues of the class_api field for\n\t *\t\tclass_base\t\u003d 0x08 (generic system peripherals)\n\t *\t\tclass_sub\t\u003d 0x03 (real time clock\n\t */\n\n#define PCI_rtc_generic 0x00 // generic real time clock\n#define PCI_rtc_isa 0x01 // ISA real time clock\n\n\n\t/*\n\t *\tvalues for the class_sub field for class_base \u003d 0x09 (input devices)\n\t */\n\n#define PCI_keyboard 0x00 // keyboard controller\n#define PCI_pen 0x01 // pen\n#define PCI_mouse 0x02 // mouse controller\n#define PCI_scanner 0x03 // scanner controller\n#define PCI_gameport 0x04 // gameport controller\n#define PCI_input_other 0x80 // other input controller\n\n\n\t/*\n\t *\tvalues for the class_sub field for class_base \u003d 0x0a (docking stations)\n\t */\n\n#define PCI_docking_generic 0x00 // generic docking station\n#define PCI_docking_other 0x80 // other docking stations\n\n\t/*\n\t *\tvalues for the class_sub field for class_base \u003d 0x0b (processor)\n\t */\n\n#define PCI_386 0x00 // 386\n#define PCI_486 0x01 // 486\n#define PCI_pentium 0x02 // Pentium\n#define PCI_alpha 0x10 // Alpha\n#define PCI_PowerPC 0x20 // PowerPC\n#define PCI_mips 0x30 // MIPS\n#define PCI_coprocessor 0x40 // co-processor\n\n\t/*\n\t *\tvalues for the class_sub field for class_base \u003d 0x0c (serial bus\n\t *\tcontroller)\n\t */\n\n#define PCI_firewire 0x00 // FireWire (IEEE 1394)\n#define PCI_access 0x01 // ACCESS bus\n#define PCI_ssa 0x02 // SSA\n#define PCI_usb 0x03 // Universal Serial Bus\n#define PCI_fibre_channel 0x04 // Fibre channel\n```",
      "range": {
        "startLine": 344,
        "startChar": 0,
        "endLine": 627,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "7d2260a9716c53e2ae3966e807c53472e45c436d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "910f9b1b_192567bf",
        "filename": "headers/os/drivers/PCI.h",
        "patchSetId": 6
      },
      "lineNbr": 633,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-18T00:34:37Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n#define PCI_mipi_i3c 0x0a // MIPI I3C Host Controller Interface\n\n\t/*\n\t *\tvalues of the class_api field for\n\t *\t\tclass_base\t\u003d 0x0c ( serial bus controller )\n\t *\t\tclass_sub\t\u003d 0x03 ( Universal Serial Bus  )\n\t */\n\n#define PCI_usb_uhci 0x00 // Universal Host Controller Interface\n#define PCI_usb_ohci 0x10 // Open Host Controller Interface\n#define PCI_usb_ehci 0x20 // Enhanced Host Controller Interface\n#define PCI_usb_xhci 0x30 // Extensible Host Controller Interface\n#define PCI_usb_usb4 0x40 // USB4 Host Interface\n```",
      "range": {
        "startLine": 633,
        "startChar": 0,
        "endLine": 633,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "7d2260a9716c53e2ae3966e807c53472e45c436d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "21e0ec6c_37c936ff",
        "filename": "headers/os/drivers/PCI.h",
        "patchSetId": 6
      },
      "lineNbr": 649,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-18T00:34:37Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n *\tvalues for the class_sub field for class_base \u003d 0x0d (wireless controller)\n */\n```",
      "range": {
        "startLine": 636,
        "startChar": 0,
        "endLine": 649,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "7d2260a9716c53e2ae3966e807c53472e45c436d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6b186617_0b4bdae4",
        "filename": "headers/os/drivers/PCI.h",
        "patchSetId": 6
      },
      "lineNbr": 663,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-18T00:34:37Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n *\tvalues for the class_sub field for class_base \u003d 0x10 (encryption decryption)\n */\n```",
      "range": {
        "startLine": 662,
        "startChar": 0,
        "endLine": 663,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "7d2260a9716c53e2ae3966e807c53472e45c436d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3b90e22e_e8c1c600",
        "filename": "headers/os/drivers/PCI.h",
        "patchSetId": 6
      },
      "lineNbr": 670,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-18T00:34:37Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n *\tvalues for the class_sub field for class_base \u003d 0x11 (data acquisition)\n */\n```",
      "range": {
        "startLine": 669,
        "startChar": 0,
        "endLine": 670,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "7d2260a9716c53e2ae3966e807c53472e45c436d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5d5702f7_70d37be6",
        "filename": "headers/os/drivers/PCI.h",
        "patchSetId": 6
      },
      "lineNbr": 728,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-18T00:34:37Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t/*\n\t *\tmasks for command register bits\n\t */\n\n#define PCI_command_io 0x001 // 1/0 i/o space en/disabled\n#define PCI_command_memory 0x002 // 1/0 memory space en/disabled\n#define PCI_command_master 0x004 // 1/0 pci master en/disabled\n#define PCI_command_special 0x008 // 1/0 pci special cycles en/disabled\n#define PCI_command_mwi 0x010 // 1/0 memory write \u0026 invalidate en/disabled\n#define PCI_command_vga_snoop 0x020 // 1/0 vga pallette snoop en/disabled\n#define PCI_command_parity 0x040 // 1/0 parity check en/disabled\n#define PCI_command_address_step 0x080 // 1/0 address stepping en/disabled\n#define PCI_command_serr 0x100 // 1/0 SERR# en/disabled\n#define PCI_command_fastback 0x200 // 1/0 fast back-to-back en/disabled\n#define PCI_command_int_disable 0x400 // 1/0 interrupt generation dis/enabled\n\n\n\t/*\n\t *\tmasks for status register bits\n\t */\n\n#define PCI_status_capabilities 0x0010 // capabilities list\n#define PCI_status_66_MHz_capable 0x0020 // 66 Mhz capable\n#define PCI_status_udf_supported 0x0040 // user-definable-features (udf) supported\n#define PCI_status_fastback 0x0080 // fast back-to-back capable\n#define PCI_status_parity_signalled 0x0100 // parity error signalled\n#define PCI_status_devsel 0x0600 // devsel timing (see below)\n#define PCI_status_target_abort_signalled 0x0800 // signaled a target abort\n#define PCI_status_target_abort_received 0x1000 // received a target abort\n#define PCI_status_master_abort_received 0x2000 // received a master abort\n#define PCI_status_serr_signalled 0x4000 // signalled SERR#\n#define PCI_status_parity_error_detected 0x8000 // parity error detected\n\n\n\t/*\n\t *\tmasks for devsel field in status register\n\t */\n\n#define PCI_status_devsel_fast 0x0000 // fast\n#define PCI_status_devsel_medium 0x0200 // medium\n#define PCI_status_devsel_slow 0x0400 // slow\n\n\n\t/*\n\t *\tmasks for header type register\n\t */\n\n#define PCI_header_type_mask 0x7F // header type field\n#define PCI_multifunction 0x80 // multifunction device flag\n\n\n\t// types of PCI header\n```",
      "range": {
        "startLine": 677,
        "startChar": 0,
        "endLine": 728,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "7d2260a9716c53e2ae3966e807c53472e45c436d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aed78dce_d7ab4f15",
        "filename": "headers/os/drivers/PCI.h",
        "patchSetId": 6
      },
      "lineNbr": 746,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-18T00:34:37Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t/*\n\t *\tmasks for built in self test (bist) register bits\n\t */\n\n#define PCI_bist_code 0x0F // self-test completion code, 0 \u003d success\n#define PCI_bist_start 0x40 // 1 \u003d start self-test\n#define PCI_bist_capable 0x80 // 1 \u003d self-test capable\n\n\n\t// masks for flags in the various base address registers\n\n#define PCI_address_space 0x01 // 0 \u003d memory space, 1 \u003d i/o space\n```",
      "range": {
        "startLine": 735,
        "startChar": 0,
        "endLine": 746,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "7d2260a9716c53e2ae3966e807c53472e45c436d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "98653856_3b3cf1c4",
        "filename": "headers/os/drivers/PCI.h",
        "patchSetId": 6
      },
      "lineNbr": 780,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-18T00:34:37Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t// masks for flags in memory space base address registers\n\n#define PCI_address_type_32 0x00 // locate anywhere in 32 bit space\n#define PCI_address_type_32_low 0x02 // locate below 1 Meg\n#define PCI_address_type_64 0x04 // locate anywhere in 64 bit space\n#define PCI_address_type 0x06 // type (see below)\n#define PCI_address_prefetchable 0x08 // 1 if prefetchable (see PCI spec)\n\n#define PCI_address_memory_32_mask 0xFFFFFFF0 // mask to get 32bit memory space base address\n\n\n\t/*\n\t *\tmasks for flags in i/o space base address registers\n\t */\n\n#define PCI_address_io_mask 0xFFFFFFFC // mask to get i/o space base address\n\n#define PCI_range_memory_mask 0xFFFFFFF0 // mask to get memory ranges\n\n\n\t/*\n\t *\tmasks for flags in expansion rom base address registers\n\t */\n\n#define PCI_rom_enable 0x00000001 // 1 expansion rom decode enabled\n#define PCI_rom_shadow 0x00000010 // 2 rom copied at shadow (C0000)\n#define PCI_rom_copy 0x00000100 // 4 rom is allocated copy\n#define PCI_rom_bios 0x00001000 // 8 rom is bios copy\n#define PCI_rom_address_mask 0xFFFFF800 // mask to get expansion rom addr\n```",
      "range": {
        "startLine": 752,
        "startChar": 0,
        "endLine": 780,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "7d2260a9716c53e2ae3966e807c53472e45c436d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3bfa83f3_f5ccb4bf",
        "filename": "headers/os/drivers/PCI.h",
        "patchSetId": 6
      },
      "lineNbr": 802,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-18T00:34:37Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n#define PCI_bridge_parity_error_response 0x0001 // 1/0 Parity Error Response\n#define PCI_bridge_serr 0x0002 // 1/0 SERR# en/disabled\n#define PCI_bridge_isa 0x0004 // 1/0 ISA en/disabled\n#define PCI_bridge_vga 0x0008 // 1/0 VGA en/disabled\n#define PCI_bridge_master_abort 0x0020 // 1/0 Master Abort mode\n#define PCI_bridge_secondary_bus_reset 0x0040 // 1/0 Secondary bus reset\n#define PCI_bridge_secondary_bus_fastback 0x0080 // 1/0 fast back-to-back en/disabled\n#define PCI_bridge_primary_discard_timeout 0x0100 // 1/0 primary discard timeout\n#define PCI_bridge_secondary_discard_timeout 0x0200 // 1/0 secondary discard timeout\n#define PCI_bridge_discard_timer_status 0x0400 // 1/0 discard timer status\n#define PCI_bridge_discard_timer_serr 0x0800 // 1/0 discard timer serr\n```",
      "range": {
        "startLine": 792,
        "startChar": 0,
        "endLine": 802,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "7d2260a9716c53e2ae3966e807c53472e45c436d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4d481a82_e55ce87e",
        "filename": "headers/os/drivers/PCI.h",
        "patchSetId": 6
      },
      "lineNbr": 813,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-18T00:34:37Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n#define PCI_cap_id_pm 0x01 // Power management\n#define PCI_cap_id_agp 0x02 // AGP\n#define PCI_cap_id_vpd 0x03 // Vital product data\n#define PCI_cap_id_slotid 0x04 // Slot ID\n#define PCI_cap_id_msi 0x05 // Message signalled interrupt\n#define PCI_cap_id_chswp 0x06 // Compact PCI HotSwap\n#define PCI_cap_id_pcix 0x07 // PCI-X\n#define PCI_cap_id_ht 0x08 // HyperTransport\n```",
      "range": {
        "startLine": 806,
        "startChar": 0,
        "endLine": 813,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "7d2260a9716c53e2ae3966e807c53472e45c436d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "236f2b2d_89c5ba84",
        "filename": "headers/os/drivers/PCI.h",
        "patchSetId": 6
      },
      "lineNbr": 826,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-18T00:34:37Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n#define PCI_cap_id_pcie 0x10 // PCIe (PCI express)\n#define PCI_cap_id_msix 0x11 // MSI-X\n#define PCI_cap_id_sata 0x12 // Serial ATA Capability\n#define PCI_cap_id_pciaf 0x13 // PCI Advanced Features\n#define PCI_cap_id_ea 0x14 // Extended Allocation\n#define PCI_cap_id_fpb 0x15 // Flattening Portal Bridge\n```",
      "range": {
        "startLine": 821,
        "startChar": 0,
        "endLine": 826,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "7d2260a9716c53e2ae3966e807c53472e45c436d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e72a2902_6a430589",
        "filename": "headers/os/drivers/PCI.h",
        "patchSetId": 6
      },
      "lineNbr": 877,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-18T00:34:37Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n#define PCI_extcap_id_aer 0x0001 // Advanced Error Reporting\n#define PCI_extcap_id_vc 0x0002 // Virtual Channel\n#define PCI_extcap_id_serial 0x0003 // Serial Number\n#define PCI_extcap_id_power_budget 0x0004 // Power Budgeting\n#define PCI_extcap_id_rcl_decl 0x0005 // Root Complex Link Declaration\n#define PCI_extcap_id_rcil_ctl 0x0006 // Root Complex Internal Link Control\n#define PCI_extcap_id_rcec_assoc 0x0007 // Root Complex Event Collector Association\n#define PCI_extcap_id_mfvc 0x0008 // MultiFunction Virtual Channel\n#define PCI_extcap_id_vc2 0x0009 // Virtual Channel 2\n#define PCI_extcap_id_rcrb_header 0x000a // RCRB Header\n#define PCI_extcap_id_vendor 0x000b // Vendor Unique\n#define PCI_extcap_id_acs 0x000d // Access Control Services\n#define PCI_extcap_id_ari 0x000e // Alternative Routing Id Interpretation\n#define PCI_extcap_id_ats 0x000f // Address Translation Services\n#define PCI_extcap_id_srio_virtual 0x0010 // Single Root I/O Virtualization\n#define PCI_extcap_id_mrio_virtual 0x0011 // Multiple Root I/O Virtual\n#define PCI_extcap_id_multicast 0x0012 // Multicast\n#define PCI_extcap_id_page_request 0x0013 // Page Request\n#define PCI_extcap_id_amd 0x0014 // AMD Reserved\n#define PCI_extcap_id_resizable_bar 0x0015 // Resizable Bar\n#define PCI_extcap_id_dyn_power_alloc 0x0016 // Dynamic Power Allocation\n#define PCI_extcap_id_tph_requester 0x0017 // TPH Requester\n#define PCI_extcap_id_latency_tolerance 0x0018 // Latency Tolerance Reporting\n#define PCI_extcap_id_2ndpcie 0x0019 // Secondary PCIe\n#define PCI_extcap_id_pmux 0x001a // Protocol Multiplexing\n#define PCI_extcap_id_pasid 0x001b // Process Address Space Id\n#define PCI_extcap_id_ln_requester 0x001c // LN Requester\n#define PCI_extcap_id_dpc 0x001d // Downstream Porto Containment\n#define PCI_extcap_id_l1pm 0x001e // L1 Power Management Substates\n#define PCI_extcap_id_ptm 0x001f // Precision Time Measurement\n#define PCI_extcap_id_m_pcie 0x0020 // PCIe over M-PHY\n#define PCI_extcap_id_frs 0x0021 // FRS Queuing\n#define PCI_extcap_id_rtr 0x0022 // Readiness Time Reporting\n#define PCI_extcap_id_dvsec 0x0023 // Designated Vendor-Specific\n#define PCI_extcap_id_vf_resizable_bar 0x0024 // VF Resizable BAR\n#define PCI_extcap_id_datalink 0x0025 // Data Link Feature\n#define PCI_extcap_id_16gt 0x0026 // Physical Layer 16.0 GT/s\n#define PCI_extcap_id_lmr 0x0027 // Lane Marging at the Receiver\n#define PCI_extcap_id_hierarchy_id 0x0028 // Hierarchy ID\n#define PCI_extcap_id_npem 0x0029 // Native PCIe Enclosure Management\n#define PCI_extcap_id_pl32 0x002a // Physical Layer 32.0 GT/s\n#define PCI_extcap_id_ap 0x002b // Alternate Protocol\n#define PCI_extcap_id_sfi 0x002c // System Firmware Intermediary\n#define PCI_extcap_id_sf 0x002d // Shadow Functions\n#define PCI_extcap_id_doe 0x002e // Data Object Exchange\n```",
      "range": {
        "startLine": 833,
        "startChar": 0,
        "endLine": 877,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "7d2260a9716c53e2ae3966e807c53472e45c436d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "01a15364_5945e7ea",
        "filename": "headers/os/drivers/PCI.h",
        "patchSetId": 6
      },
      "lineNbr": 969,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-08-18T00:34:37Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n#endif /* PCI_H */\n```",
      "range": {
        "startLine": 969,
        "startChar": 0,
        "endLine": 969,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "7d2260a9716c53e2ae3966e807c53472e45c436d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}