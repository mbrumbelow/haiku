{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c52a6729_19bd7a7c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-03-05T22:38:48Z",
      "side": 1,
      "message": "korli: I\u0027m not sure what you were trying to solve in the commit this reverts, but this seems much more correct: we now preserve the FPU status words as set by applications or the kernel rather than clobbering them.",
      "revId": "56d5c83c1660d7de6cd9a94c8005aeed9b8c605d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0c2d39c_618a748a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-03-05T22:39:16Z",
      "side": 1,
      "message": "Using the default values from fenv.h alone fixes #19454 at least, but this seems more correct.",
      "parentUuid": "c52a6729_19bd7a7c",
      "revId": "56d5c83c1660d7de6cd9a94c8005aeed9b8c605d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "719c17a4_a20097e2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-03-05T22:42:02Z",
      "side": 1,
      "message": "mmlr points out this may not be needed at all if FXRSTOR/FXSAVE/XSAVEC are in use?\n\nSo, can we drop this altogether then, and just use EMMS? Or is that not needed either?",
      "revId": "56d5c83c1660d7de6cd9a94c8005aeed9b8c605d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d335f35_fbb83909",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2025-03-06T05:40:15Z",
      "side": 1,
      "message": "Was trying to fix when using the debugger as described in #18656",
      "parentUuid": "d0c2d39c_618a748a",
      "revId": "56d5c83c1660d7de6cd9a94c8005aeed9b8c605d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a080a52_0c6829c4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2025-03-06T05:40:15Z",
      "side": 1,
      "message": "Restoring the state with the FP exception might trigger the FP exception again. It\u0027s difficult to know whether it is expected, meaning the user code should handle SIGFPE.",
      "parentUuid": "719c17a4_a20097e2",
      "revId": "56d5c83c1660d7de6cd9a94c8005aeed9b8c605d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "74541023_244c0ac9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-03-06T13:03:34Z",
      "side": 1,
      "message": "Ah, OK.\n\nWhy does that happen before the context switch occurs, though? I.e. why do we see the stack of the previous thread and not the new thread? The FPU context switch happens after the the thread context switch, right?\n\nWould it help to invoke EMMS in int_user_bottom and other such places rather than here?\n\nActually I can\u0027t find any reference to EMMS in FreeBSD AMD64 sources. So how do they handle this case?",
      "parentUuid": "6d335f35_fbb83909",
      "revId": "56d5c83c1660d7de6cd9a94c8005aeed9b8c605d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6a7c002_3a419bdf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-03-06T13:16:42Z",
      "side": 1,
      "message": "Looks like FreeBSD just lets the FP exception happen again: https://github.com/freebsd/freebsd-src/blob/main/sys/amd64/amd64/fpu.c#L682\n\nSo can we delete the additions to x86_context_switch altogether, and just leave the EMMS? Or what else is needed to make this case work properly?\n\nThis also may be relevant? https://github.com/freebsd/freebsd-src/blob/main/sys/amd64/amd64/fpu.c#L1009",
      "parentUuid": "1a080a52_0c6829c4",
      "revId": "56d5c83c1660d7de6cd9a94c8005aeed9b8c605d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c82fbb6b_081352d0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2025-03-06T19:44:20Z",
      "side": 1,
      "message": "Well if it fixes the issues except the profile/strace/Debugger problems, I think it\u0027s better.\nDoes FreeBSD uses the FPU in the kernel BTW?",
      "parentUuid": "74541023_244c0ac9",
      "revId": "56d5c83c1660d7de6cd9a94c8005aeed9b8c605d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a09ba09_a52c76fe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-03-06T20:09:27Z",
      "side": 1,
      "message": "This doesn\u0027t seem to fix the profile problem, no. I didn\u0027t investigate that further yet. And I didn\u0027t retest #18656 so it\u0027s possible this regresses that too, I need to check.\n\nFreeBSD does allow use of FPU in the kernel, but only inside fpu_kern_enter()/fpu_kern_leave() blocks, which manage a context separately.\n\nConsidering they don\u0027t invoke \"emms\", do we need to here? What about invoking it before the context switch instead of after?",
      "parentUuid": "c82fbb6b_081352d0",
      "revId": "56d5c83c1660d7de6cd9a94c8005aeed9b8c605d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "92dbee55_5dfd40e5",
        "filename": "headers/private/kernel/arch/x86/64/cpu.h",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-03-05T22:40:54Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tasm volatile(\"fnstcw %0\" : \"\u003dm\"(fpuControl));\n```",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 16,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "56d5c83c1660d7de6cd9a94c8005aeed9b8c605d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0683cfce_719aa923",
        "filename": "headers/private/kernel/arch/x86/64/cpu.h",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-03-05T22:40:54Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tasm volatile(\"stmxcsr %0\" : \"\u003dm\"(sseControl));\n```",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "56d5c83c1660d7de6cd9a94c8005aeed9b8c605d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ee5a9379_83d04f01",
        "filename": "headers/private/kernel/arch/x86/64/cpu.h",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-03-05T22:40:54Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tasm volatile(\"ldmxcsr %0\" : : \"m\"(sseControl));\n\tasm volatile(\"fldcw %0\" : : \"m\"(fpuControl));\n```",
      "range": {
        "startLine": 37,
        "startChar": 0,
        "endLine": 38,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "56d5c83c1660d7de6cd9a94c8005aeed9b8c605d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}