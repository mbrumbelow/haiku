{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3317cef8_26cd7537",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-04-23T15:04:53Z",
      "side": 1,
      "message": "Not sure this is the way to go? It looks like a lot of additional int32\u0027s. Can we not support old legacy keymap while also introducing a newer updated one?",
      "revId": "6baa3976582e9c26528c1a85827fdf2b381c93c9",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "85811533_34208aca",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000214
      },
      "writtenOn": "2022-04-23T19:59:01Z",
      "side": 1,
      "message": "I\u0027ve been tempted of down vote myself, but we haven\u0027t an agreement yet. \n\nThe idea of this patch, was to make room for media keys, because 128 keys were on the limit. I added 128 more but yes, perhaps 32 were more than enough.\n\nThing is, media keys are not keys (from HID perspective), are consumer events. Many OS seem to fake them as key strokes but I don\u0027t agree with them :)\n\nOn the other hand, if we consider them keys we don\u0027t have to map them into the keymap and send key strokes as unmapped key events, as we already do with F1-F12.",
      "parentUuid": "3317cef8_26cd7537",
      "revId": "6baa3976582e9c26528c1a85827fdf2b381c93c9",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "945dd65e_131a46a8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-04-23T20:40:24Z",
      "side": 1,
      "message": "\u003e On the other hand, if we consider them keys we don\u0027t have to map them into the keymap and send key strokes as unmapped key events, as we already do with F1-F12.\n\nThis sentence is a bit confusing to me. Do you mean if we don\u0027t consider them keys?\n\nIt sounds to me like unmapped key events are better, but can we set these events to fixed values?\n\nI think this is something we should solve, thanks for the good explanation.",
      "parentUuid": "85811533_34208aca",
      "revId": "6baa3976582e9c26528c1a85827fdf2b381c93c9",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dbec15a4_2d28124f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-04-23T21:32:53Z",
      "side": 1,
      "message": "The other part of this change (not sure why we have this scattered in many commits) adds 34 key definitions: https://review.haiku-os.org/c/haiku/+/1695\nSo 32 wouldn\u0027t be enough.\n\nThe idea there was to map all these to B_FUNCTION_KEY and then use the raw keycode to decide which one it is. In that case, they wouldn\u0027t really need to go through the keymap, as long as they are \"mapped\" to B_FUNCTION_KEY in some other way (this can be hardcoded somewhere).\n\n\u003e Thing is, media keys are not keys (from HID perspective), are consumer events. Many OS seem to fake them as key strokes but I don\u0027t agree with them :)\n\nThe advantage of this is it is reasonably simple to do and doesn\u0027t introduce any new APIs. That makes it easy for app developers to handle these events at least for the simple cases (volume control and the like). I agree that HID allows for some more things, but they are rarely used and we can consider them later once we have something in place.",
      "parentUuid": "945dd65e_131a46a8",
      "revId": "6baa3976582e9c26528c1a85827fdf2b381c93c9",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "111ca28f_974e88ec",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000214
      },
      "writtenOn": "2022-04-24T07:19:27Z",
      "side": 1,
      "message": "Ok then, I can add those extra keys to Keyboard HID handler, we \"map\" it as B_FUNCTION_KEY and this patch (and the problem it solves) are no longer needed.\n\nThen, we can work on parallel on a better input model.",
      "parentUuid": "dbec15a4_2d28124f",
      "revId": "6baa3976582e9c26528c1a85827fdf2b381c93c9",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82afee0f_d7d6d2d0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2022-05-21T12:42:48Z",
      "side": 1,
      "message": "The Idea behind this and the other change was mainly to fix this for the PS/2 keyboards.\nFor one thing the number of media keys on PS/2 is now basically fixed and won\u0027t increase. for another the driver (currently) does not expose the keys in any other way apart from mapping them to some code within the keymap structure.\n\nI didn\u0027t really intend this to be used for HID neccesarily. as far as I understood this works already with \"unampped\" key events there.\n\nThe patch for the PS/2 driver was already merged here: https://review.haiku-os.org/c/haiku/+/1675\nAnd it requires this patch still to work afaik. It may require a bit more even, I did not investigate further since the keymap structure made using the events further problematic.",
      "parentUuid": "111ca28f_974e88ec",
      "revId": "6baa3976582e9c26528c1a85827fdf2b381c93c9",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7ac59ff_081bf64f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000214
      },
      "writtenOn": "2022-05-22T08:14:18Z",
      "side": 1,
      "message": "The point is.... do we really want users to remap media keys? If the answer is no, this patch is unnecessary.",
      "parentUuid": "82afee0f_d7d6d2d0",
      "revId": "6baa3976582e9c26528c1a85827fdf2b381c93c9",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2e239ce_5278ada2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-05-22T11:39:13Z",
      "side": 1,
      "message": "For me I don\u0027t feel it is needed, but I don\u0027t have a strong opinion. I do however want to know in an easy ways if it was play, pause, skip_forward and such pressed without lots of logic in the app.\n\nFeel free to pick the best route, I was just asking a question, and I\u0027m worried it might have stalled progress. Sorry about that..",
      "parentUuid": "b7ac59ff_081bf64f",
      "revId": "6baa3976582e9c26528c1a85827fdf2b381c93c9",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19f10608_7f9763aa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000214
      },
      "writtenOn": "2022-05-23T07:33:55Z",
      "side": 1,
      "message": "Sorry If my words are sometimes a little bit rude. I am not very fluent at english  (at least not enough to manage the mood of my sentences).\n\nMedia keys issue is stalled from a long time now. I did this patch because we were doing some speculations and I wanted to have some real code to argue on top.\n\nI don\u0027t see the need for media keys to be mapped. As unmapped keys, someone need to do an extra step on code, but we have F1-12 keys already there. Can we perhaps, create a new key press event for unmapped keys?",
      "parentUuid": "f2e239ce_5278ada2",
      "revId": "6baa3976582e9c26528c1a85827fdf2b381c93c9",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01cbab5e_b0040e5a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2022-05-23T15:01:39Z",
      "side": 1,
      "message": "If you mean mapped in the sense of \"Use this in the keymap to indicate a different key\" Then I agree that there is no need to map them in such a manner. This does mean however that the PS/2 driver patch I made has to be partially redone since the mechanism doesn\u0027t work for the newer \"higher\" numbered keys then. Perhaps by checking for the value beeing higher than 128 and then passing it to the input server somewhere else.\n\nWhat would the benefit be for a seperate event for unmapped keys? usb hid already produces events for unmapped keys IIRC, do you wish to add a second one next to it or do I missunderstand that?\n\nDisadvantages I see with the current unmapped keys are that the shortcut preferences are still not that nice, they don\u0027t allow for system provided default keybindings for example or entering a key for a shortcut by simply pressing it. (example: mail key -\u003e open mail app)\n\nA second problem is that in usb hid there may be seperate events that have the same semantic meaning to users. For example my new Logitech Ergo Mini keyboard has a dedicated \"Screenshot\" key that does not work with Haiku currently, it probably produces a seperate key event to print screen which does work as a screenshot key currently.\nFor an application developer it may be annoying to have to catch severall different keypresses with the same semantic meaning.",
      "parentUuid": "19f10608_7f9763aa",
      "revId": "6baa3976582e9c26528c1a85827fdf2b381c93c9",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "231521b8_35ec068d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000214
      },
      "writtenOn": "2022-05-24T08:26:36Z",
      "side": 1,
      "message": "usb_hid doesn\u0027t produce separate events. Both keys and hid consumer events (aka as media keys) are sent to user space using same event structure. Hid key codes are maped to PS/2 key codes and media keys are just sent using hid numbering.\n\nOn the other hand, I was wrong with events, Applications already receive two events : B_KEY_DOWN and B_UNMAPPED_KEY_DOWN.\n\n\n\u003e Disadvantages I see with the current unmapped keys are that the shortcut \u003epreferences are still not that nice, they don\u0027t allow for system provided default \u003ekeybindings for example or entering a key for a shortcut by simply pressing it. \u003e(example: mail key -\u003e open mail app)\n\nWouldn\u0027t be easy to adapt shortcut preferences app in order to support those unmapped keys?\n\n \n\u003e For an application developer it may be annoying to have to catch severall \u003edifferent keypresses with the same semantic meaning.\n\nThis is something it is not in our hands. Some HID events are a little bit ambiguous",
      "parentUuid": "01cbab5e_b0040e5a",
      "revId": "6baa3976582e9c26528c1a85827fdf2b381c93c9",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31bbbbcf_3aa939c7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2022-05-24T08:35:31Z",
      "side": 1,
      "message": "\u003e usb_hid doesn\u0027t produce separate events. Both keys and hid consumer events (aka as media keys) are sent to user space using same event structure. Hid key codes are maped to PS/2 key codes and media keys are just sent using hid numbering.\n\u003e \n\u003e On the other hand, I was wrong with events, Applications already receive two events : B_KEY_DOWN and B_UNMAPPED_KEY_DOWN.\nThis is what I ment above with seperate events.\nHID isn\u0027t mapped to PS/2 codes, it is mapped to the keymap which is a different format.\n \n\u003e \u003e Disadvantages I see with the current unmapped keys are that the shortcut \u003epreferences are still not that nice, they don\u0027t allow for system provided default \u003ekeybindings for example or entering a key for a shortcut by simply pressing it. \u003e(example: mail key -\u003e open mail app)\n\u003e \n\u003e Wouldn\u0027t be easy to adapt shortcut preferences app in order to support those unmapped keys?\n\nYes, I have a ticket for a possible redesign.\n\n\u003e \u003e For an application developer it may be annoying to have to catch severall \u003edifferent keypresses with the same semantic meaning.\n\u003e \n\u003e This is something it is not in our hands. Some HID events are a little bit ambiguous\n\nI would argue that it is, for \"normal\" media keys this is already pretty complex, if PS/2 and HID events are exposed seperately this becomes even more complex.\n\nI think the current unmapped event is fine, but it probably shouldnt be the normal API to get semantic keypresses imo.",
      "parentUuid": "231521b8_35ec068d",
      "revId": "6baa3976582e9c26528c1a85827fdf2b381c93c9",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17c6de9e_43cbda0b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000214
      },
      "writtenOn": "2022-05-24T08:51:33Z",
      "side": 1,
      "message": "\u003e This is what I ment above with seperate events.\n\nBut this happens on user space. Input server add-on I guess. Note that in my honest opinion, Consumer events shouldn\u0027t be keystrokes... but that\u0027s another history.\n\n\u003e HID isn\u0027t mapped to PS/2 codes, it is mapped to the keymap which is a different format.\n\nYou are right\n\n\u003e if PS/2 and HID events are exposed seperately this becomes even more complex.\n\nThis is not happening right now. Both HID and PS/2 drivers maps keystrokes to a common keymap code. I have submitted a patch to map HID media keys also, so applications doesn\u0027t need to care if input comes from ps/2 or hid.\n\n\u003eI think the current unmapped event is fine, but it probably shouldn\u0027t be the normal API to get semantic keypresses imo.\n\nI agree, I don\u0027t know how hard would be to route all keys to B_KEY_DOWN. We would need however, to keep B_UNMAPPED_KEY_DOWN for compatibility.",
      "parentUuid": "31bbbbcf_3aa939c7",
      "revId": "6baa3976582e9c26528c1a85827fdf2b381c93c9",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fdb3d4d5_8edd1ff0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-05-30T12:26:37Z",
      "side": 1,
      "message": "\u003e But this happens on user space. Input server add-on I guess. Note that in my honest opinion, Consumer events shouldn\u0027t be keystrokes... but that\u0027s another history.\n\nThat\u0027s correct, and the distinction is very simple: keys can be pressed and released. Consumer events can\u0027t do that, they just happen. Which means no key repeat, for example. That can be a good or a bad thing depending on the exact implementation. For exemple, here I have a keyboard with a volume control wheel. This is indeed not a key at all and I can\u0027t hold it down. But I also have various \"media keys\" which may send keystrokes (down/up) or consumer events depending on what the manufacturer decided to do.\n\nAnyway, if we want to get these events to applications, we have the choice of either shoe-horning them into the existing APIs, or making a new API. A new API has a cost: it will probably need a new message type, all apps which we want to handle these events will have to handle a new special case, it needs to be documented, etc. On the other hand, reusing the existing API can make things easier for app developers and for OS maintainers, at least initially. For example, when we get a consumer event from HID we could convert it to a key down + key up event (unmapped or not, that\u0027s up to the keymap to decide).\n\nI feel we are running in circles with this discussion, however.\n\nSo, what is the current plan? There are many questions and not everyone seem to agree on the answer for each:\n\n- Between the drivers and input_server: do we reuse HID and have PS2 drivers convert PS2 data into HID? Do we create a new custom protocol? Do we set up an input-server addon that\u0027s specific for each driver to do the conversion all in input_server?\n- Between input_server and apps: key events or not key events? If we use key events, configurable through the keymap or not? If not, do we hardcode them, or do we just send them as unmapped keys? And anyway, should these events go all the way down to apps in the first place, or should they be available only to input_server add-ons?\n\nWe have already discussed all possible options and I think no progress is being made on implementing any of them.\n\nAlso note that the two sides are largely unrelated. I think it would make sense to clarify the driver side first, and get the data delivered to input_server in as much details as possible (HID reports look to me like they would provide any detail to describe pretty much any event we may want to process, including non-HID devices and drivers, but a custom protocol may be used and possibly be made simpler). Once we have these events getting to input_server, we can decide what to do with them.\n\nThe other direction is also possible: first decide what we want to send to apps or system servers. Then, we can see what we actually need from the drivers and maybe it will not require completely rewriting the interfacing between input_server and the drivers because it turns out we don\u0027t need the events in this much detail at this point, or we can somehow easily add what we need to the existing protocols there.\n\nAs long as there is no clear path on how to progress with this, I don\u0027t see why we are discussing this in a code review tool, we should probably be having this discussion first on the bugtracker?",
      "parentUuid": "17c6de9e_43cbda0b",
      "revId": "6baa3976582e9c26528c1a85827fdf2b381c93c9",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6dc18d42_d95a7991",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2022-08-03T01:47:20Z",
      "side": 1,
      "message": "I’m sorry that there is no way to do what you want here without breaking compatibility. greekboy’s patch does a lot more than this yet suffers from the same issue.",
      "revId": "6baa3976582e9c26528c1a85827fdf2b381c93c9",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f1d0aba_fa7d7cf3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2022-08-03T02:18:54Z",
      "side": 1,
      "message": "There is if we add symbol versioning.",
      "parentUuid": "6dc18d42_d95a7991",
      "revId": "6baa3976582e9c26528c1a85827fdf2b381c93c9",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88a71767_b76e6ee2",
        "filename": "headers/os/interface/InterfaceDefs.h",
        "patchSetId": 1
      },
      "lineNbr": 136,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-04-23T22:09:56Z",
      "side": 1,
      "message": "It is 9 * 4 (bytes) * 128 \u003d 4608 additional bytes for the keymap alone? Perhaps there is a better representation?",
      "revId": "6baa3976582e9c26528c1a85827fdf2b381c93c9",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f76527b4_5e4c4f5a",
        "filename": "headers/os/interface/InterfaceDefs.h",
        "patchSetId": 1
      },
      "lineNbr": 136,
      "author": {
        "id": 1000214
      },
      "writtenOn": "2022-04-24T07:19:27Z",
      "side": 1,
      "message": "We wanted to keep software/binary compatibility. A keymap designed from scratch would be probably more efficient than this.",
      "parentUuid": "88a71767_b76e6ee2",
      "revId": "6baa3976582e9c26528c1a85827fdf2b381c93c9",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f6527076_b1ac6ab8",
        "filename": "headers/os/interface/InterfaceDefs.h",
        "patchSetId": 1
      },
      "lineNbr": 136,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-05-02T20:33:41Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f76527b4_5e4c4f5a",
      "revId": "6baa3976582e9c26528c1a85827fdf2b381c93c9",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "87cc89bc_9f6cd215",
        "filename": "headers/os/interface/InterfaceDefs.h",
        "patchSetId": 1
      },
      "lineNbr": 136,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2025-02-09T22:53:04Z",
      "side": 1,
      "message": "If we are going to break compatibility here we should add alt_gr_map and alt_gr_shift_map. Also possibly add all of greekboy\u0027s changes. If we are not going to break compat here then I still don\u0027t see how this accomplishes that.",
      "parentUuid": "f6527076_b1ac6ab8",
      "revId": "6baa3976582e9c26528c1a85827fdf2b381c93c9",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}