{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "454f0817_e61d071b",
        "filename": "src/system/libroot/posix/pthread/pthread_rwlock.cpp",
        "patchSetId": 3
      },
      "lineNbr": 171,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-01-10T09:25:47Z",
      "side": 1,
      "message": "This fix is correct for the case where writer_count \u003d\u003d 1 and the owner is the current thread (attempting to acquire a write lock recursively).\n\nI don\u0027t think it works for the case where we are upgrading from read to write lock:\n\n- If reader_count \u003e 1, we don\u0027t enter this case even if the current thread is in the read list, is that OK?\n- If reader_count \u003d\u003d 1 and writer_count \u003d\u003d 0, we check owner, but since writer_count is 0, owner is probably set to -1 (only writers can be owners of the lock). So we also don\u0027t enter this case.\n- Finally if reader_count is 0, we also don\u0027t enter this case.\n\nSo, I think the check of reader_count here is actually doing nothing? And there doesn\u0027t seem to be a way to track if the current thread has the lock read-locked.\n\nAm I missing something here?",
      "revId": "cd1c389ca790d940ed60e80e3e98b41e33c56ed0",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6a19440_c35ab42d",
        "filename": "src/system/libroot/posix/pthread/pthread_rwlock.cpp",
        "patchSetId": 3
      },
      "lineNbr": 171,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2023-01-10T11:08:40Z",
      "side": 1,
      "message": "No, I think you\u0027re correct, an error from reading the spec, rather than the implementation. I also noticed that pthread_rwlock_rdlock can return EDEADLK if the thread already owns it for writing, so I\u0027ll add that too while reverting the `reader_count \u003d\u003d 1` case.",
      "parentUuid": "454f0817_e61d071b",
      "revId": "cd1c389ca790d940ed60e80e3e98b41e33c56ed0",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}