{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e9ba2cce_ab390c56",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 57
      },
      "lineNbr": 0,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2025-01-26T19:53:17Z",
      "side": 1,
      "message": "See my inline comments below for further details.",
      "revId": "73f447e063ff69da62d5ac89467e9fcf63168430",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "29fcfefc_cf4924d5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 57
      },
      "lineNbr": 0,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2025-01-26T20:22:30Z",
      "side": 1,
      "message": "Function keys need more testing, hold off.",
      "revId": "73f447e063ff69da62d5ac89467e9fcf63168430",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7169a48d_ba63541a",
        "filename": "headers/os/interface/InterfaceDefs.h",
        "patchSetId": 57
      },
      "lineNbr": 163,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-01-26T19:06:36Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tB_SHIFT_KEY \u003d 0x00000001,\n\tB_COMMAND_KEY \u003d 0x00000002,\n\tB_CONTROL_KEY \u003d 0x00000004,\n\tB_CAPS_LOCK \u003d 0x00000008,\n\tB_SCROLL_LOCK \u003d 0x00000010,\n\tB_NUM_LOCK \u003d 0x00000020,\n\tB_OPTION_KEY \u003d 0x00000040,\n\tB_MENU_KEY \u003d 0x00000080,\n\tB_LEFT_SHIFT_KEY \u003d 0x00000100,\n\tB_RIGHT_SHIFT_KEY \u003d 0x00000200,\n\tB_LEFT_COMMAND_KEY \u003d 0x00000400,\n\tB_RIGHT_COMMAND_KEY \u003d 0x00000800,\n\tB_LEFT_CONTROL_KEY \u003d 0x00001000,\n\tB_RIGHT_CONTROL_KEY \u003d 0x00002000,\n\tB_LEFT_OPTION_KEY \u003d 0x00004000,\n\tB_RIGHT_OPTION_KEY \u003d 0x00008000,\n\tB_NO_COMMAND_KEY \u003d 0x00010000\n```",
      "range": {
        "startLine": 147,
        "startChar": 0,
        "endLine": 163,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "73f447e063ff69da62d5ac89467e9fcf63168430",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3d01b87c_a7f2a8b1",
        "filename": "src/kits/interface/MenuItem.cpp",
        "patchSetId": 57
      },
      "lineNbr": 758,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-01-26T19:06:36Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t} else if (fShortcutChar \u003e\u003d B_F1_KEY \u0026\u0026 fShortcutChar \u003c\u003d B_F12_KEY) {\n```",
      "range": {
        "startLine": 758,
        "startChar": 0,
        "endLine": 758,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "73f447e063ff69da62d5ac89467e9fcf63168430",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "117eee81_8a9f0b40",
        "filename": "src/kits/interface/MenuItem.cpp",
        "patchSetId": 57
      },
      "lineNbr": 760,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-01-26T19:06:36Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t} else {\n```",
      "range": {
        "startLine": 760,
        "startChar": 0,
        "endLine": 760,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "73f447e063ff69da62d5ac89467e9fcf63168430",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a93001dc_3790b9fe",
        "filename": "src/kits/interface/MenuItem.cpp",
        "patchSetId": 57
      },
      "lineNbr": 761,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-01-26T19:06:36Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (insert after):\n```c++\n\t}\n```",
      "range": {
        "startLine": 761,
        "startChar": 0,
        "endLine": 761,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "73f447e063ff69da62d5ac89467e9fcf63168430",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f7a7fe82_d292dd84",
        "filename": "src/kits/interface/Window.cpp",
        "patchSetId": 57
      },
      "lineNbr": 303,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2025-01-26T19:53:17Z",
      "side": 1,
      "message": "Shortcut characters should be uppercase, not lowercase. If you add a \u0027d\u0027 shortcut for example it shows D in the menu. I\u0027m restricting this only to printable characters that\u0027s what the B_SPACE to B_DELETE is about in preparation for the day when multibyte UTF8 characters are supported. This could be simplified to just \"return BUnicodeChar::ToUpper(key)\". However the old code using ToLower() is wrong because shortcut keys are always uppercase in menus, and never lowercase. However, the old code was not enforcing uppercase to be stored, this does. So this has to be changed or you\u0027d get lowercase letter shortcuts in your menus.",
      "revId": "73f447e063ff69da62d5ac89467e9fcf63168430",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5ed6984d_dc5f25b5",
        "filename": "src/kits/interface/Window.cpp",
        "patchSetId": 57
      },
      "lineNbr": 1740,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2025-01-26T19:53:17Z",
      "side": 1,
      "message": "This could be simplified to `else if (key \u003d\u003d \u0027Q\u0027)` because this patch enforces that shortcuts are always uppercase in the case of printable ASCII characters.",
      "revId": "73f447e063ff69da62d5ac89467e9fcf63168430",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bbe8e07e_5ce9739d",
        "filename": "src/kits/interface/Window.cpp",
        "patchSetId": 57
      },
      "lineNbr": 3701,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2025-01-26T19:53:17Z",
      "side": 1,
      "message": "Similarly here this could be simplified to (key \u003d\u003d \u0027Q\u0027)",
      "revId": "73f447e063ff69da62d5ac89467e9fcf63168430",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d69f031_38ed6444",
        "filename": "src/kits/interface/Window.cpp",
        "patchSetId": 57
      },
      "lineNbr": 3719,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2025-01-26T19:53:17Z",
      "side": 1,
      "message": "This the secret sauce to making function key shortcuts work. key is B_FUNCTION_KEY when you push a function key but we replace it with B_F1_KEY through B_PAUSE_KEY here just before we look for the shortcut.\n\nYou\u0027re expected to add one of these function key constants to your shortcut e.g. B_F2_KEY to use this. B_F1_KEY to B_PAUSE_KEY is 0x02 through 0x10, see InterfaceDefs.h or the Keyboard special topic in the Be/HaikuBook for more details. This means that the shortcut code fits in a char which means BMenuItem doesn\u0027t need to be updated for this trick to work, thankfully.\n\nIn X512\u0027s patch that I\u0027ve heavily modified later on this is extended to all UTF8 characters and BMenuItem is modified to be able to accept shortcuts that do not fit in a char through a new constructor.",
      "revId": "73f447e063ff69da62d5ac89467e9fcf63168430",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}