{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "5cbbf005_6e86bc5d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2024-02-16T23:48:27Z",
      "side": 1,
      "message": "\u003e If y\u0027all are really aginst the unicode art for representing items in launch_roster, do you have alternative ideas?\n\nUsing my Services GUI utility: https://github.com/X547/HaikuUtils/tree/master/Services.",
      "revId": "6732bdd51d4f2b7328f7ae82126fa7e5756963f3",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e8556195_dd02b6b4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2024-02-16T23:57:56Z",
      "side": 1,
      "message": "I think that Haiku should focus on GUI utilities for administration, not CUI because it is desktop operating system intended to be easy to use.\n\nThis patch approach looks too Linuxish.",
      "revId": "6732bdd51d4f2b7328f7ae82126fa7e5756963f3",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "24abf9cc_ef461f2c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-02-17T14:00:36Z",
      "side": 1,
      "message": "I 100% agree with this, however we also should continue to offer a cli version for managing services (if you ssh into a Haiku machine, you can\u0027t launch the gui)\n\nIn my mind, the changeset here makes launch_roster substantially more usable (seeing a summary view of jobs/services and their states, etc)",
      "parentUuid": "5cbbf005_6e86bc5d",
      "revId": "6732bdd51d4f2b7328f7ae82126fa7e5756963f3",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aba93517_3fdfd276",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2024-02-17T14:48:02Z",
      "side": 1,
      "message": "Another problem with using Unicode characters in CLI is that required fonts may be not available (minimal Haiku install or SSH client terminal without corresponding fonts).\n\nIt is fine to have both CLI and GUI utilities, but CLI should be usable with ASCII/Latin-1 charsets.",
      "parentUuid": "24abf9cc_ef461f2c",
      "revId": "6732bdd51d4f2b7328f7ae82126fa7e5756963f3",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9ca8202f_f794cc97",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2024-02-17T16:36:59Z",
      "side": 1,
      "message": "I would also prefer a table like we use in similar tools, even better with the extra info that X512\u0027s UI tool shows.\n\nIn any case, I\u0027m all with korli that you should check whether the output is a TTY, and only use color in that case. Furthermore, there could be an option forcing one way or the other.",
      "revId": "6732bdd51d4f2b7328f7ae82126fa7e5756963f3",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1986499f_fedbad56",
        "filename": "src/bin/launch_roster.cpp",
        "patchSetId": 4
      },
      "lineNbr": 21,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-02-17T20:25:38Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n#define COLOR_RED \"\\033[31;1m\"\n```",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 21,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "6732bdd51d4f2b7328f7ae82126fa7e5756963f3",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a52d48bd_e1fc94aa",
        "filename": "src/bin/launch_roster.cpp",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-02-17T20:25:38Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n#define COLOR_BLUE \"\\033[34;1m\"\n#define COLOR_BOLD \"\\033[;1m\"\n```",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 24,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "6732bdd51d4f2b7328f7ae82126fa7e5756963f3",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8aa79793_024d7fde",
        "filename": "src/bin/launch_roster.cpp",
        "patchSetId": 4
      },
      "lineNbr": 200,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-02-17T20:25:38Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\tprintf(\"  %s%s \" COLOR_RESET COLOR_BOLD \"%s\" COLOR_RESET \" (%s, %s, %s)\\n\",\n\t\t\trunning\t\t   ? COLOR_GREEN\n\t\t\t\t: launched ? COLOR_BLUE\n\t\t\t\t\t\t   : COLOR_RED,\n\t\t\tservice ? \"◐\" : \"●\", name, service ? \"service\" : \"job\",\n\t\t\tenabled ? \"enabled\" : \"disabled\",\n\t\t\trunning\t\t   ? \"running\"\n\t\t\t\t: launched ? \"idle\"\n\t\t\t\t\t\t   : \"stopped\");\n```",
      "range": {
        "startLine": 199,
        "startChar": 0,
        "endLine": 200,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "6732bdd51d4f2b7328f7ae82126fa7e5756963f3",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "03987860_d96aae8a",
        "filename": "src/bin/launch_roster.cpp",
        "patchSetId": 4
      },
      "lineNbr": 209,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-02-17T20:25:38Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tfprintf(stderr,\n\t\t\"%s: Could not get target or job info for \\\"%s\\\": \"\n\t\t\"%s\\n\",\n\t\tkProgramName, name, strerror(result));\n```",
      "range": {
        "startLine": 208,
        "startChar": 0,
        "endLine": 209,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "6732bdd51d4f2b7328f7ae82126fa7e5756963f3",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a5a7e4c6_81a322c2",
        "filename": "src/bin/launch_roster.cpp",
        "patchSetId": 4
      },
      "lineNbr": 276,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-02-17T20:25:38Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\n\t\t// No?  Is it a Job or Service?\n\t\tinfo.MakeEmpty();\n\t\tstatus_t jobStatus \u003d roster.GetJobInfo(name, info);\n\t\tif (jobStatus \u003d\u003d B_OK) {\n\t\t\tprint_summary(false, info);\n\n\t\t\tif (verbose)\n\t\t\t\tinfo.PrintToStream();\n\n\t\t\tif (jobStatus !\u003d B_OK \u0026\u0026 targetStatus !\u003d B_OK) {\n\t\t\t\tfprintf(stderr,\n\t\t\t\t\t\"%s: Could not get target or job info for \\\"%s\\\": \"\n\t\t\t\t\t\"%s\\n\",\n\t\t\t\t\tkProgramName, name, strerror(jobStatus));\n\t\t\t\treturn jobStatus;\n\t\t\t}\n\t\t\treturn B_OK;\n\t\t}\n\n\n\t\tstatic void list_targets(bool verbose)\n\t\t{\n\t\t\tBLaunchRoster roster;\n\t\t\tBStringList targets;\n\t\t\tstatus_t status \u003d roster.GetTargets(targets);\n\t\t\tif (status !\u003d B_OK) {\n\t\t\t\tfprintf(stderr, \"%s: Could not get target listing: %s\\n\", kProgramName,\n\t\t\t\t\tstrerror(status));\n\t\t\t\texit(EXIT_FAILURE);\n\t\t\t}\n\n\t\t\tfor (int32 i \u003d 0; i \u003c targets.CountStrings(); i++)\n\t\t\t\tget_info(targets.StringAt(i).String(), verbose);\n\t\t}\n\n\n\t\tstatic void list_jobs(bool verbose)\n\t\t{\n\t\t\tBLaunchRoster roster;\n\t\t\tBStringList jobs;\n\t\t\tstatus_t status \u003d roster.GetJobs(NULL, jobs);\n\t\t\tif (status !\u003d B_OK) {\n\t\t\t\tfprintf(stderr, \"%s: Could not get job listing: %s\\n\", kProgramName,\n\t\t\t\t\tstrerror(status));\n\t\t\t\texit(EXIT_FAILURE);\n\t\t\t}\n\n\t\t\tfor (int32 i \u003d 0; i \u003c jobs.CountStrings(); i++)\n\t\t\t\tget_info(jobs.StringAt(i).String(), verbose);\n\t\t}\n```",
      "range": {
        "startLine": 224,
        "startChar": 0,
        "endLine": 276,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "6732bdd51d4f2b7328f7ae82126fa7e5756963f3",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}