{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "70297c68_4bf0fb5f",
        "filename": "src/system/boot/loader/file_systems/tarfs/tarfs.cpp",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-11-05T22:09:13Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\nstatic const size_t kTarRegionSize \u003d 11 * 1024 * 1024; // 11 MB\n```",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "bfec0a63d8cf59e4be82d82c9bc2342805034e42",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ef52846_0d5b9b40",
        "filename": "src/system/boot/loader/file_systems/tarfs/tarfs.cpp",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2024-11-05T22:11:36Z",
      "side": 1,
      "message": "Shouldn\u0027t we be able to determine this either at build time or at start time (by seeing how large the compressed data is.)?",
      "revId": "bfec0a63d8cf59e4be82d82c9bc2342805034e42",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9eeaf821_6d1fc68d",
        "filename": "src/system/boot/loader/file_systems/tarfs/tarfs.cpp",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1000693
      },
      "writtenOn": "2024-11-06T04:45:37Z",
      "side": 1,
      "message": "If the archive itself contains tarfs, it would cause infinite rebuild cycle if the required size is close to rounding to next multiple. Without rounding up, it would cause unnecessary regenerating every time the required size changes just by few bytes.\n\nAt start time, determining the required size would need estimating the uncompressed size as the archive is deflated.",
      "parentUuid": "0ef52846_0d5b9b40",
      "revId": "bfec0a63d8cf59e4be82d82c9bc2342805034e42",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "835cbe2d_50e5fa37",
        "filename": "src/system/boot/loader/file_systems/tarfs/tarfs.cpp",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1000198
      },
      "writtenOn": "2024-11-08T20:10:23Z",
      "side": 1,
      "message": "The size would be that of haiku_netboot.tar\nAnyway the build_archive script directly use \"tar cfz\" so we only got the tgz. I think that dezipping only to get the size is overwork. In addition the size of the haiku_netboot is not fixed : some architectures add/remove some device driver in it.\nSo i have not really good solution.",
      "parentUuid": "9eeaf821_6d1fc68d",
      "revId": "bfec0a63d8cf59e4be82d82c9bc2342805034e42",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fef0ddc5_728c5221",
        "filename": "src/system/boot/loader/file_systems/tarfs/tarfs.cpp",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2024-11-08T20:12:05Z",
      "side": 1,
      "message": "It appears that in gzip format, the uncompressed size is stored at the end of the compressed data. But I\u0027m not sure we have an easy way to read the end?",
      "parentUuid": "835cbe2d_50e5fa37",
      "revId": "bfec0a63d8cf59e4be82d82c9bc2342805034e42",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c104509d_593f3ede",
        "filename": "src/system/boot/loader/file_systems/tarfs/tarfs.cpp",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1000693
      },
      "writtenOn": "2024-11-09T01:30:27Z",
      "side": 1,
      "message": "Stock zlib supports /dev/null type of output and it returns how many bytes it has uncompressed, so maybe it\u0027s easier to implement build-time than run-time.",
      "parentUuid": "fef0ddc5_728c5221",
      "revId": "bfec0a63d8cf59e4be82d82c9bc2342805034e42",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c120a6f6_06a19079",
        "filename": "src/system/boot/loader/file_systems/tarfs/tarfs.cpp",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2024-11-13T17:50:20Z",
      "side": 1,
      "message": "I think we should keep this code as simple as possible. In the bootloader, more moving parts means more risks of hard to debug problems.\n\nAs long as we have a good error message if this ends up being too small, it\u0027s easy enough to change it manually and rebuild.",
      "parentUuid": "c104509d_593f3ede",
      "revId": "bfec0a63d8cf59e4be82d82c9bc2342805034e42",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "398c8a8e_ce7fbb38",
        "filename": "src/system/boot/loader/file_systems/tarfs/tarfs.cpp",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1000693
      },
      "writtenOn": "2024-11-13T18:39:55Z",
      "side": 1,
      "message": "I agree with PulkoMandy... I was just explaining how much extra effort it needs to make the size dynamically updated and some downsides of implementing it at either build or run-time...",
      "parentUuid": "c120a6f6_06a19079",
      "revId": "bfec0a63d8cf59e4be82d82c9bc2342805034e42",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7c5fea2_9e1bb13d",
        "filename": "src/system/boot/loader/file_systems/tarfs/tarfs.cpp",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1000198
      },
      "writtenOn": "2024-11-18T09:05:58Z",
      "side": 1,
      "message": "@PulkoMandy The trouble is the error message is really not helpful when the kTarRegionSize is too small : i got \u0027did not find boot partitions\u0027, cause the error in the zlib part is just \u0027try-catched\u0027 silently, and i could\u0027n find where (my debugging date from 2022), that\u0027s why it took me months to figure this static const was the clue.",
      "parentUuid": "398c8a8e_ce7fbb38",
      "revId": "bfec0a63d8cf59e4be82d82c9bc2342805034e42",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67cfcefe_f1d54baa",
        "filename": "src/system/boot/loader/file_systems/tarfs/tarfs.cpp",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1000198
      },
      "writtenOn": "2024-11-25T10:47:57Z",
      "side": 1,
      "message": "@waddlesplash, according to the comment of @PulkoMandy, may I leave the 11Mb size and mark your review as \u0027resolved\u0027 ?",
      "parentUuid": "f7c5fea2_9e1bb13d",
      "revId": "bfec0a63d8cf59e4be82d82c9bc2342805034e42",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}