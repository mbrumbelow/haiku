{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "444292bb_acaa6a9b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1000052
      },
      "writtenOn": "2022-01-12T17:51:02Z",
      "side": 1,
      "message": "By chance, could I take a look at this? I feel that this class could come in handy in terms of implementing an efficient and reliable event monitoring system as described in ticket #16846. I think I think I have a great idea about how we can take the concept of Linux\u0027s io_uring system and make it a lot more \"Haiku and C++ friendly\".ðŸ˜‰",
      "revId": "9f5e55bf814287d29ce41fdad0c4656964090f8b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c2e0115f_6dc6fe2c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-01-13T07:42:27Z",
      "side": 1,
      "message": "Yes, have a look at the remaining open comments and help us finish this",
      "revId": "9f5e55bf814287d29ce41fdad0c4656964090f8b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "85425ad9_1cbb6529",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1000052
      },
      "writtenOn": "2022-01-14T00:32:09Z",
      "side": 1,
      "message": "Sorry for the excess of comments in advance... Nonetheless, I just want to get the details down before I start changing the structure of the class.",
      "revId": "9f5e55bf814287d29ce41fdad0c4656964090f8b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "15e0b32c_dd83ef52",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1000052
      },
      "writtenOn": "2022-01-14T18:58:23Z",
      "side": 1,
      "message": "Some responses:",
      "revId": "9f5e55bf814287d29ce41fdad0c4656964090f8b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8745f592_3a2a9ef9",
        "filename": "headers/os/support/MemoryRingIO.h",
        "patchSetId": 14
      },
      "lineNbr": 20,
      "author": {
        "id": 1000052
      },
      "writtenOn": "2022-01-14T00:32:09Z",
      "side": 1,
      "message": "Mark as \"const\"?",
      "range": {
        "startLine": 20,
        "startChar": 3,
        "endLine": 20,
        "endChar": 26
      },
      "revId": "9f5e55bf814287d29ce41fdad0c4656964090f8b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "177f769e_18a94753",
        "filename": "headers/os/support/MemoryRingIO.h",
        "patchSetId": 14
      },
      "lineNbr": 30,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2020-11-19T07:20:46Z",
      "side": 1,
      "message": "This should be Size() without the Get-prefix.",
      "revId": "9f5e55bf814287d29ce41fdad0c4656964090f8b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "565fdd35_f585a324",
        "filename": "headers/os/support/MemoryRingIO.h",
        "patchSetId": 14
      },
      "lineNbr": 30,
      "author": {
        "id": 1000052
      },
      "writtenOn": "2022-01-14T00:32:09Z",
      "side": 1,
      "message": "I agree and will change this.",
      "parentUuid": "177f769e_18a94753",
      "revId": "9f5e55bf814287d29ce41fdad0c4656964090f8b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "322e54de_1b760ad0",
        "filename": "headers/os/support/MemoryRingIO.h",
        "patchSetId": 14
      },
      "lineNbr": 30,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-01-14T07:50:40Z",
      "side": 1,
      "message": "It is GetSize in all other BPositionIO classes because it returns a status_t and the size is a parameter of the function: https://git.haiku-os.org/haiku/tree/headers/os/support/DataIO.h#n73\n\nBut this is different since it only returns the buffer size, not the full size of the data.",
      "parentUuid": "565fdd35_f585a324",
      "revId": "9f5e55bf814287d29ce41fdad0c4656964090f8b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e5acd93_4bedbd82",
        "filename": "headers/os/support/MemoryRingIO.h",
        "patchSetId": 14
      },
      "lineNbr": 30,
      "author": {
        "id": 1000052
      },
      "writtenOn": "2022-01-14T18:58:23Z",
      "side": 1,
      "message": "In that case, should this be renamed to BufferSize() to be more clear?",
      "parentUuid": "322e54de_1b760ad0",
      "revId": "9f5e55bf814287d29ce41fdad0c4656964090f8b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9277ab7d_0f910219",
        "filename": "headers/os/support/MemoryRingIO.h",
        "patchSetId": 14
      },
      "lineNbr": 37,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2020-11-19T07:20:46Z",
      "side": 1,
      "message": "Is there any use case to make this reversible? Maybe call it CloseForWriting() and make it a final state?",
      "revId": "9f5e55bf814287d29ce41fdad0c4656964090f8b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43755348_b431f01f",
        "filename": "headers/os/support/MemoryRingIO.h",
        "patchSetId": 14
      },
      "lineNbr": 37,
      "author": {
        "id": 1000052
      },
      "writtenOn": "2022-01-14T00:32:09Z",
      "side": 1,
      "message": "I could see a possible case for temporarily disabling write functionality, along with even disabling read functionality for making sure a whole chunk of data is written to the buffer. (Though this could go along with a  future idea I have of allowing external buffers and areas being passed in.)\n\nI would instead prefer a function like this: \"status_t SetState(uint32 flags)\" \nwhere \"flags\" is a bit-mask that can accept the flags B_NOT_WRITABLE, B_NOT_READABLE, and B_FINAL_STATE. However, B_BAD_VALUE would be returned if B_DISABLE_READ and B_FINAL_STATE are both detected in \"flags\" or any other unknown values are detected in \"flags\".\n\nHaving \"(B_NOT_WRITABLE \u0026 B_FINAL_STATE)\" within the \"flags\" input will permanently disable writing into the ring-buffer. Trying to clear \"(B_NOT_WRITABLE \u0026 B_FINAL_STATE)\" from \"flags\" afterwards will lead to a B_NOT_ALLOWED error and nothing will change.  (I can\u0027t see any case for permanently disabling reading for now at least, am I forgetting something?) Also, there would be a corresponding \"uint32 const State()\" function too.\n\nFurthermore, I could see the SetState() function as a great way for avoiding future ABI breakages in the future.ðŸ˜‰\n\nFor example:\nuint32 flags \u003d (B_NOT_READABLE \u0026 B_WHEN_EMPTY) | (B_NOT_WRITABLE \u0026 B_FINAL_STATE);\nSetState(flags);\n\nPlease let me know if I might have missed something though! I\u0027m open to input! :)",
      "parentUuid": "9277ab7d_0f910219",
      "revId": "9f5e55bf814287d29ce41fdad0c4656964090f8b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca130a2a_404048c1",
        "filename": "headers/os/support/MemoryRingIO.h",
        "patchSetId": 14
      },
      "lineNbr": 38,
      "author": {
        "id": 1000052
      },
      "writtenOn": "2022-01-14T00:32:09Z",
      "side": 1,
      "message": "Add some FBC padding for future proofing?",
      "revId": "9f5e55bf814287d29ce41fdad0c4656964090f8b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa5a00e5_c144bcac",
        "filename": "headers/os/support/MemoryRingIO.h",
        "patchSetId": 14
      },
      "lineNbr": 38,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-01-14T07:50:40Z",
      "side": 1,
      "message": "The class should probably be first introduced in libshared and inside the BPrivate namespace. When we are confident that the API is ready, we can move it to libbe, outside of the namespace, and add FBC padding.",
      "parentUuid": "ca130a2a_404048c1",
      "revId": "9f5e55bf814287d29ce41fdad0c4656964090f8b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24f95114_1fd15d76",
        "filename": "headers/os/support/MemoryRingIO.h",
        "patchSetId": 14
      },
      "lineNbr": 38,
      "author": {
        "id": 1000052
      },
      "writtenOn": "2022-01-14T18:58:23Z",
      "side": 1,
      "message": "I am tempted to introduce an experimental support library (something like libexpsupport.so\"), as I am afraid that libshared is getting a bit bulky... \n\nMy question is, are classes that aren\u0027t used by an application removable by stripping unneeded symbols after compilation?",
      "parentUuid": "aa5a00e5_c144bcac",
      "revId": "9f5e55bf814287d29ce41fdad0c4656964090f8b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a57019ad_12038805",
        "filename": "headers/os/support/MemoryRingIO.h",
        "patchSetId": 14
      },
      "lineNbr": 43,
      "author": {
        "id": 1000052
      },
      "writtenOn": "2022-01-14T00:32:09Z",
      "side": 1,
      "message": "I think this shows that we\u0027re lacking native APIs. :) This shouldn\u0027t block this review for the moment, but shows instead that we need a replacement for \"pthread_cond_t\" and its associated functionalities. We already have the \"ConditionVariable\" class in the kernel, so making a userspace counterpart shouldn\u0027t involve writing a lot of code from scratch at least.",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 43,
        "endChar": 26
      },
      "revId": "9f5e55bf814287d29ce41fdad0c4656964090f8b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a487d675_5b76019b",
        "filename": "headers/os/support/MemoryRingIO.h",
        "patchSetId": 14
      },
      "lineNbr": 43,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-01-14T07:50:40Z",
      "side": 1,
      "message": "What\u0027s wrong with using the pthread version?\nIn modern C++ there is also a standard API for this.\nI don\u0027t see any value in introducing a third one.",
      "parentUuid": "a57019ad_12038805",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 43,
        "endChar": 26
      },
      "revId": "9f5e55bf814287d29ce41fdad0c4656964090f8b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bebb38b9_3859fffa",
        "filename": "headers/os/support/MemoryRingIO.h",
        "patchSetId": 14
      },
      "lineNbr": 43,
      "author": {
        "id": 1000052
      },
      "writtenOn": "2022-01-14T18:58:23Z",
      "side": 1,
      "message": "There\u0027s nothing particularly wrong. I suppose this is a topic for another time.ðŸ˜‰",
      "parentUuid": "a487d675_5b76019b",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 43,
        "endChar": 26
      },
      "revId": "9f5e55bf814287d29ce41fdad0c4656964090f8b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78e472a1_00179455",
        "filename": "headers/os/support/MemoryRingIO.h",
        "patchSetId": 14
      },
      "lineNbr": 54,
      "author": {
        "id": 1000052
      },
      "writtenOn": "2022-01-14T00:32:09Z",
      "side": 1,
      "message": "Maybe a bit more reserved space wouldn\u0027t hurt?",
      "range": {
        "startLine": 54,
        "startChar": 13,
        "endLine": 54,
        "endChar": 22
      },
      "revId": "9f5e55bf814287d29ce41fdad0c4656964090f8b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9cabc283_490831ed",
        "filename": "src/kits/support/MemoryRingIO.cpp",
        "patchSetId": 14
      },
      "lineNbr": 219,
      "author": {
        "id": 1000052
      },
      "writtenOn": "2022-01-14T00:32:09Z",
      "side": 1,
      "message": "I feel like the method name \"Clear()\" is deceiving, as fBuffer is not truly \"cleared\". While an average user of BMemoryRingIO would never know that fBuffer still contains previously written data, this could pose a security risk in the case that BMemoryRingIO is being used for transferring sensitive data and a hacker finds a way to access the memory fBuffer points to.\n\nSimply put, maybe a \"zeroOut\" boolean parameter should be added for those more concerned about security?",
      "range": {
        "startLine": 219,
        "startChar": 0,
        "endLine": 219,
        "endChar": 22
      },
      "revId": "9f5e55bf814287d29ce41fdad0c4656964090f8b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94a1a167_8934576b",
        "filename": "src/kits/support/MemoryRingIO.cpp",
        "patchSetId": 14
      },
      "lineNbr": 219,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-01-14T07:50:40Z",
      "side": 1,
      "message": "Sounds like over-engineering things to me, but it depends on the usecase.",
      "parentUuid": "9cabc283_490831ed",
      "range": {
        "startLine": 219,
        "startChar": 0,
        "endLine": 219,
        "endChar": 22
      },
      "revId": "9f5e55bf814287d29ce41fdad0c4656964090f8b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62604607_7e7fed90",
        "filename": "src/kits/support/MemoryRingIO.cpp",
        "patchSetId": 14
      },
      "lineNbr": 219,
      "author": {
        "id": 1000052
      },
      "writtenOn": "2022-01-14T18:58:23Z",
      "side": 1,
      "message": "I suppose it could be interpreted in that way, but I think it doesn\u0027t hurt to provide the option. :) I\u0027ll just have the parameter default to false.",
      "parentUuid": "94a1a167_8934576b",
      "range": {
        "startLine": 219,
        "startChar": 0,
        "endLine": 219,
        "endChar": 22
      },
      "revId": "9f5e55bf814287d29ce41fdad0c4656964090f8b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}