{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "243c2769_eaee8407",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2024-09-06T19:25:58Z",
      "side": 1,
      "message": "Axel, did you have any chance to look at this one?",
      "revId": "01d0f3cff24763f1371da72fa1e9390af7cee040",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8669db7d_bd73edc6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2024-09-06T19:50:15Z",
      "side": 1,
      "message": "A short look, but I didn\u0027t understand what it was improving (it just looked more complicated), so I wanted to take a deeper look before I wrote anything ;-)",
      "parentUuid": "243c2769_eaee8407",
      "revId": "01d0f3cff24763f1371da72fa1e9390af7cee040",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "59edc283_d58272f3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2024-09-06T19:53:43Z",
      "side": 1,
      "message": "For large volumes (\u003e 200 GiB) with a lot of data already stored, bitmap block allocation become a bottleneck. Using bit search operations significantly speed up free block search.",
      "parentUuid": "8669db7d_bd73edc6",
      "revId": "01d0f3cff24763f1371da72fa1e9390af7cee040",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8fa77845_2c5db43c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2024-09-06T20:04:18Z",
      "side": 1,
      "message": "Yes. The \"first free\" value is a good optimization but it doesn\u0027t help much when the first free bit is at the beginning of a block but the real run we want to look at is near the end. In that case we would do ~16,000 bitwise comparisons (fetch int32, shift, mask, compare, run the loop body, etc.) which is obviously slow.\n\nWith this patch, we check an entire int32 at a time, and if all bits are set (INT32_MAX) then we skip it, and when we encounter an int32 with not all bits set, we use `ffs` (on x86, one instruction) to find which is the first free block in this bit.\n\nThis massively speeds things up when we have lots of blocks in this sort of state. X512 sent me a profiler log with (IIRC) over 80% of time spent in AllocateBlocks. With this change, that\u0027s massively reduced; he sent me a new one after testing this in which it was negligible (though I\u0027m not sure it was the exact same workload.)",
      "parentUuid": "59edc283_d58272f3",
      "revId": "01d0f3cff24763f1371da72fa1e9390af7cee040",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f6a652ed_848dde01",
        "filename": "src/add-ons/kernel/file_systems/bfs/BlockAllocator.cpp",
        "patchSetId": 4
      },
      "lineNbr": 281,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-09-05T15:15:10Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tfor (uint32 offset \u003d ROUNDDOWN(startBlock, 32); offset \u003c fNumBits; offset +\u003d 32) {\n```",
      "range": {
        "startLine": 280,
        "startChar": 0,
        "endLine": 281,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "01d0f3cff24763f1371da72fa1e9390af7cee040",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}