{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "091a01ba_7a932984",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 1
      },
      "lineNbr": 240,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2025-02-04T08:16:16Z",
      "side": 1,
      "message": "do not leave commented out code.\n\nEither the code is not needed anymore, and you can simply remove it (the git history will still have the older version if needed).\n\nOr, the code may be needed later, in that case, put in in a preprocessor guard (#if 0) and add a comment explaining why it can\u0027t be enabled yet.",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "25869f3f_c2d00267",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 1
      },
      "lineNbr": 242,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T12:33:58Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\t\t\t//\t\t\t\tpath[i].blockData \u003d new(std::nothrow) char[len];\n\t\t\t\t//\t\t\t\tif (path[i].blockData \u003d\u003d NULL)\n\t\t\t\t//\t\t\t\t\treturn B_NO_MEMORY;\n```",
      "range": {
        "startLine": 240,
        "startChar": 0,
        "endLine": 242,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9119ce3e_cf1a1aa7",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 1
      },
      "lineNbr": 246,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T12:33:58Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\t\t//\t\t\tuint64 readPos \u003d fInode-\u003eFileSystemBlockToAddr(requiredBlock);\n\t\t\t//\t\t\tuint64 blk \u003d readPos/fInode-\u003eBlockSize();\n```",
      "range": {
        "startLine": 245,
        "startChar": 0,
        "endLine": 246,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "63245c0b_c17074dc",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 1
      },
      "lineNbr": 248,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T12:33:58Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\t\tif (status !\u003d B_OK) {\n```",
      "range": {
        "startLine": 248,
        "startChar": 0,
        "endLine": 248,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "10ab890a_7322f6d7",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 1
      },
      "lineNbr": 253,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T12:33:58Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\t\tpath[i].blockData \u003d (char*)fCache.Block();\n\t\t\t//\t\t\tmemcpy(path[i].blockData, block_data, len);\n```",
      "range": {
        "startLine": 252,
        "startChar": 0,
        "endLine": 253,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "78553a6c_4a071d16",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 1
      },
      "lineNbr": 260,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T12:33:58Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\t\t// delete path[i].blockData\n```",
      "range": {
        "startLine": 260,
        "startChar": 0,
        "endLine": 260,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1048b393_40986b82",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 1
      },
      "lineNbr": 265,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T12:33:58Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\t\t//\t\t\tpath[i].blockData \u003d new(std::nothrow) char[len];\n\t\t\t//\t\t\tif (path[i].blockData \u003d\u003d NULL)\n\t\t\t//\t\t\t\treturn B_NO_MEMORY;\n```",
      "range": {
        "startLine": 263,
        "startChar": 0,
        "endLine": 265,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2b665be9_ed7da7a5",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 1
      },
      "lineNbr": 269,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T12:33:58Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\t//\t\tuint64 readPos \u003d fInode-\u003eFileSystemBlockToAddr(requiredBlock);\n\t\t//\t\tuint64 blk \u003d readPos/fInode-\u003eBlockSize();\n```",
      "range": {
        "startLine": 268,
        "startChar": 0,
        "endLine": 269,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "66c73a12_24e635f4",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 1
      },
      "lineNbr": 271,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T12:33:58Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\tif (status !\u003d B_OK) {\n```",
      "range": {
        "startLine": 271,
        "startChar": 0,
        "endLine": 271,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d585da8_dc2e5e8a",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 1
      },
      "lineNbr": 271,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2025-02-04T08:16:16Z",
      "side": 1,
      "message": "missing space before (",
      "parentUuid": "66c73a12_24e635f4",
      "range": {
        "startLine": 271,
        "startChar": 0,
        "endLine": 271,
        "endChar": 0
      },
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c99c9bb4_d444ff23",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 1
      },
      "lineNbr": 276,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T12:33:58Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\t//\t\tconst uint8* block_data \u003d fCache.Block();\n\t\t//\t\tmemcpy(path[i].blockData, block_data, len);\n```",
      "range": {
        "startLine": 275,
        "startChar": 0,
        "endLine": 276,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d2647617_3f030f74",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 1
      },
      "lineNbr": 338,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T12:33:58Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\tuint64 requiredBlock \u003d readPos / fInode-\u003eBlockSize();\n```",
      "range": {
        "startLine": 338,
        "startChar": 0,
        "endLine": 338,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4beef15c_6f6b352c",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 1
      },
      "lineNbr": 338,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2025-02-04T08:16:16Z",
      "side": 1,
      "message": "missing spaces around operator",
      "parentUuid": "d2647617_3f030f74",
      "range": {
        "startLine": 338,
        "startChar": 0,
        "endLine": 338,
        "endChar": 0
      },
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "16a24e98_f39b0e80",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 1
      },
      "lineNbr": 340,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T12:33:58Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\tif (status !\u003d B_OK) {\n```",
      "range": {
        "startLine": 340,
        "startChar": 0,
        "endLine": 340,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "89f96b01_80e70cb5",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 1
      },
      "lineNbr": 379,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T12:33:58Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tuint64 requiredBlock \u003d readPos / fInode-\u003eBlockSize();\n```",
      "range": {
        "startLine": 379,
        "startChar": 0,
        "endLine": 379,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3a360b93_1bd2c64c",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 1
      },
      "lineNbr": 381,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T12:33:58Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tif (status !\u003d B_OK) {\n```",
      "range": {
        "startLine": 381,
        "startChar": 0,
        "endLine": 381,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5635256e_c1f15ca4",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 1
      },
      "lineNbr": 386,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2025-02-04T08:16:16Z",
      "side": 1,
      "message": "In the previous function TreeDirectory::SearchAndFillPath, you have changed the code so that the data is stored only in the block cache. Here you do a copy of the data instead, which results in using more memory and storing the data twice.\n\nCan this be changed to work the same way as the other function? If not, why does it need to be different?",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38264d2e_93440fc5",
        "filename": "src/add-ons/kernel/file_systems/xfs/BPlusTree.cpp",
        "patchSetId": 1
      },
      "lineNbr": 386,
      "author": {
        "id": 1000632
      },
      "writtenOn": "2025-02-18T06:44:37Z",
      "side": 1,
      "message": "I\u0027ll refactor the code and test it with both Node and Leaf directories to evaluate how these buffers are functioning. Based on the results, I\u0027ll determine whether retaining the buffers is necessary or if using only the block cache is a viable approach.",
      "parentUuid": "5635256e_c1f15ca4",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a76ae76a_73432c10",
        "filename": "src/add-ons/kernel/file_systems/xfs/Cache.h",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T12:33:58Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\nclass CachedBlock\n{\n```",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 15,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb2794d9_62984ed6",
        "filename": "src/add-ons/kernel/file_systems/xfs/Cache.h",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2025-02-04T08:16:16Z",
      "side": 1,
      "message": "I don\u0027t know which filesystem you took this from, but:\n\n- Please keep the same sourcefile name (CachedBlock.h) as used in other filesystems,\n- You have not preserved the correct indentation/alignment for the methods",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f2503ede_e1a0bf63",
        "filename": "src/add-ons/kernel/file_systems/xfs/Cache.h",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T12:33:58Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\ninline CachedBlock::CachedBlock(Volume* volume)\n\t:\n\tfVolume(volume),\n\tfBlockNumber(0),\n\tfBlock(NULL)\n```",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 48,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d75c71c2_774d24a9",
        "filename": "src/add-ons/kernel/file_systems/xfs/Cache.h",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T12:33:58Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\ninline CachedBlock::CachedBlock(Volume* volume, off_t block)\n\t:\n\tfVolume(volume),\n\tfBlockNumber(0),\n\tfBlock(NULL)\n```",
      "range": {
        "startLine": 53,
        "startChar": 0,
        "endLine": 58,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9fc839d7_3caf1454",
        "filename": "src/add-ons/kernel/file_systems/xfs/Cache.h",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T12:33:58Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\ninline CachedBlock::~CachedBlock()\n```",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 65,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d330fe3a_1ca5d4f5",
        "filename": "src/add-ons/kernel/file_systems/xfs/Cache.h",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T12:33:58Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tstatus_t status \u003d SetToOffset(block);\n```",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 84,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3b08e873_d09c936a",
        "filename": "src/add-ons/kernel/file_systems/xfs/Cache.h",
        "patchSetId": 1
      },
      "lineNbr": 86,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T12:33:58Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tif (status !\u003d B_OK) {\n```",
      "range": {
        "startLine": 86,
        "startChar": 0,
        "endLine": 86,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "086f0474_ec84e963",
        "filename": "src/add-ons/kernel/file_systems/xfs/Cache.h",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T12:33:58Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n#endif // CACHED_H\n```",
      "range": {
        "startLine": 109,
        "startChar": 0,
        "endLine": 109,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e981e83c_8a6d2f90",
        "filename": "src/add-ons/kernel/file_systems/xfs/Extent.cpp",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2025-02-04T08:16:16Z",
      "side": 1,
      "message": "Switching to a block cache means most of the time we will be accessing the disk with block numbers, instead of byte positions.\n\nYou have done this by computing the byte position, and then converting that back into a block number. It would be simpler to modify FileSystemBlockToAddr to directly return a block number instead, and adjust all places where it is used to use that block number with the block cache directly.",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ec0e542_8fa205af",
        "filename": "src/add-ons/kernel/file_systems/xfs/Extent.cpp",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T12:33:58Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tuint64 requiredBlock \u003d readPos / fInode-\u003eBlockSize();\n```",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 59,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1bee3076_7df97f3d",
        "filename": "src/add-ons/kernel/file_systems/xfs/Extent.cpp",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2025-02-04T08:16:16Z",
      "side": 1,
      "message": "missing space around operator",
      "parentUuid": "6ec0e542_8fa205af",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 59,
        "endChar": 0
      },
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a9e3fb43_7431e739",
        "filename": "src/add-ons/kernel/file_systems/xfs/Extent.cpp",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T12:33:58Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tif (status !\u003d B_OK) {\n```",
      "range": {
        "startLine": 61,
        "startChar": 0,
        "endLine": 61,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "687ec154_78a63960",
        "filename": "src/add-ons/kernel/file_systems/xfs/Extent.cpp",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2025-02-04T08:16:16Z",
      "side": 1,
      "message": "missing space before (",
      "parentUuid": "a9e3fb43_7431e739",
      "range": {
        "startLine": 61,
        "startChar": 0,
        "endLine": 61,
        "endChar": 0
      },
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f516ec74_f6857b40",
        "filename": "src/add-ons/kernel/file_systems/xfs/Extent.cpp",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2025-02-04T08:16:16Z",
      "side": 1,
      "message": "you have read a single block from disk using the CachedBlock class, but you are copying potentially a lot more than that from the block data (if the directory has muliple blocks).\n\nThis will not work, you need to handle the case where the directry has multiple blocks, and cache them all.\n\nYou should also consider wether the data should be entirely handled by the block cache, or copied into a separate buffer as is done here.",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b557f80_857a89e2",
        "filename": "src/add-ons/kernel/file_systems/xfs/Extent.cpp",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1000632
      },
      "writtenOn": "2025-02-18T06:44:37Z",
      "side": 1,
      "message": "From what I see in [https://github.com/haiku/haiku/blob/master/headers/private/fs_shell/fssh_fs_cache.h](fssh_fs_cache.h). Is it designed for caching a single block at a time? If multiple blocks need to be cached, I might need to extend or modify the caching logic. Do you have any recommendations on how to handle this in the existing codebase?",
      "parentUuid": "f516ec74_f6857b40",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "215110f8_d26f8236",
        "filename": "src/add-ons/kernel/file_systems/xfs/Extent.cpp",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-02-18T06:52:07Z",
      "side": 1,
      "message": "You can look at how BFS\u0027 BPlusTree logic works: it also has a CachedBlock, and when it needs to read data from the next block, calls SetTo(offset, ...) which put()s the old block and then get()s the next one. The block_cache will keep track of what blocks are used or unused.\n\n(I haven\u0027t looked at XFS, so this is just generic advice, not specific to XFS usage patterns.)",
      "parentUuid": "3b557f80_857a89e2",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf961f92_f786fd50",
        "filename": "src/add-ons/kernel/file_systems/xfs/Extent.cpp",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1000632
      },
      "writtenOn": "2025-02-20T05:30:51Z",
      "side": 1,
      "message": "A similar implementation exists in the XFS driver; however, in our case, we utilize extents, which are continuous block allocations for specific files and directories. If we can implement a caching strategy that enables multiple blocks to be cached simultaneously, we could avoid reloading these extents repeatedly, improving overall efficiency.\n\nI have created a post on the forum discussing the implementation of this Block Cache and plan to experiment with this approach. From my analysis of the existing code, I have observed that when reading directories, a series of operations are redundantly executed—even when they were already performed for a previous directory within the same block. This inefficiency contributes to increased read times.\n\nAny insights or suggestions on optimizing this caching mechanism would be greatly appreciated.",
      "parentUuid": "215110f8_d26f8236",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ad66507_99dae515",
        "filename": "src/add-ons/kernel/file_systems/xfs/Extent.h",
        "patchSetId": 1
      },
      "lineNbr": 182,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2025-02-04T08:16:16Z",
      "side": 1,
      "message": "this comment refers to fBlockBuffer, so you shouldn\u0027t insert code in between the two.",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c16e4681_bcd79742",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 1
      },
      "lineNbr": 470,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T12:33:58Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\txfs_fsblock_t requiredBlock \u003d readPos / BlockSize();\n```",
      "range": {
        "startLine": 470,
        "startChar": 0,
        "endLine": 470,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2ecef1e_c8696806",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 1
      },
      "lineNbr": 470,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2025-02-04T08:16:16Z",
      "side": 1,
      "message": "missing spaces around operator",
      "parentUuid": "c16e4681_bcd79742",
      "range": {
        "startLine": 470,
        "startChar": 0,
        "endLine": 470,
        "endChar": 0
      },
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "83ff1c89_ebf1c75b",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 1
      },
      "lineNbr": 472,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T12:33:58Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\tif (status !\u003d B_OK) {\n```",
      "range": {
        "startLine": 472,
        "startChar": 0,
        "endLine": 472,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18afc686_b9653810",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 1
      },
      "lineNbr": 472,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2025-02-04T08:16:16Z",
      "side": 1,
      "message": "missing space before (",
      "parentUuid": "83ff1c89_ebf1c75b",
      "range": {
        "startLine": 472,
        "startChar": 0,
        "endLine": 472,
        "endChar": 0
      },
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd7ff451_28981b8a",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 1
      },
      "lineNbr": 477,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2025-02-04T08:16:16Z",
      "side": 1,
      "message": "here as well, \"len\" may require to read more than one block from disk.\n\nThis pattern repeats multiple time in all the changed files, so I will not comment on each of them. You may consider extracting the code in a common function to avoid having to repeat it in so many places.",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "121ce73f_f1babac6",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 1
      },
      "lineNbr": 477,
      "author": {
        "id": 1000632
      },
      "writtenOn": "2025-02-18T06:44:37Z",
      "side": 1,
      "message": "Thanks for pointing this out. I see the repetition across multiple files, and extracting this logic into a common function makes sense. I\u0027ll refactor the code to improve maintainability and avoid redundancy.",
      "parentUuid": "bd7ff451_28981b8a",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fae15c89_44b4e153",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 1
      },
      "lineNbr": 491,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T12:33:58Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\txfs_fsblock_t requiredBlock \u003d readPos / BlockSize();\n```",
      "range": {
        "startLine": 491,
        "startChar": 0,
        "endLine": 491,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0f3c6f65_6c72a5f1",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 1
      },
      "lineNbr": 493,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T12:33:58Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tif (status !\u003d B_OK) {\n```",
      "range": {
        "startLine": 493,
        "startChar": 0,
        "endLine": 493,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "87e58932_6f697712",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 1
      },
      "lineNbr": 564,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T12:33:58Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\txfs_fsblock_t requiredBlock \u003d readPos / BlockSize();\n```",
      "range": {
        "startLine": 564,
        "startChar": 0,
        "endLine": 564,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "04abc849_1239c74b",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 1
      },
      "lineNbr": 566,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T12:33:58Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\tif (status !\u003d B_OK) {\n```",
      "range": {
        "startLine": 566,
        "startChar": 0,
        "endLine": 566,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d7b0844c_9eb4376e",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 1
      },
      "lineNbr": 730,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T12:33:58Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tif (status !\u003d B_OK) {\n```",
      "range": {
        "startLine": 730,
        "startChar": 0,
        "endLine": 730,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a783a947_eee33456",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 1
      },
      "lineNbr": 730,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2025-02-04T08:16:16Z",
      "side": 1,
      "message": "missing spaces before ( and before {",
      "parentUuid": "d7b0844c_9eb4376e",
      "range": {
        "startLine": 730,
        "startChar": 0,
        "endLine": 730,
        "endChar": 0
      },
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "00bc17e1_5d555b24",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 1
      },
      "lineNbr": 735,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T12:33:58Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tmemcpy(fBuffer, block_data + offset * len, len);\n```",
      "range": {
        "startLine": 735,
        "startChar": 0,
        "endLine": 735,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64aca5a6_96031508",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.cpp",
        "patchSetId": 1
      },
      "lineNbr": 735,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2025-02-04T08:16:16Z",
      "side": 1,
      "message": "missing spaces around *",
      "parentUuid": "00bc17e1_5d555b24",
      "range": {
        "startLine": 735,
        "startChar": 0,
        "endLine": 735,
        "endChar": 0
      },
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "edd3fb29_0004636e",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.h",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T12:33:58Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (insert after):\n```c++\n#include \"Volume.h\"\n```",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85569d4d_15e973ef",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.h",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2025-02-04T08:16:16Z",
      "side": 1,
      "message": "Includes should be in alphabetical order, with the exception of system_dependencies that should always be first so the filesystem can be compiled in the fs_shell.",
      "parentUuid": "edd3fb29_0004636e",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 0
      },
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "157a07fa_f2563ebf",
        "filename": "src/add-ons/kernel/file_systems/xfs/Inode.h",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T12:33:58Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` is to remove this line/these lines.",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 12,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "35f1b9d7_c0cd8941",
        "filename": "src/add-ons/kernel/file_systems/xfs/LeafDirectory.cpp",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T12:33:58Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tuint64 requiredBlock \u003d readPos / fInode-\u003eBlockSize();\n```",
      "range": {
        "startLine": 156,
        "startChar": 0,
        "endLine": 156,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "199f6239_f5c7111a",
        "filename": "src/add-ons/kernel/file_systems/xfs/LeafDirectory.cpp",
        "patchSetId": 1
      },
      "lineNbr": 158,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T12:33:58Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tif (status !\u003d B_OK) {\n```",
      "range": {
        "startLine": 158,
        "startChar": 0,
        "endLine": 158,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c38fcf8c_e291438d",
        "filename": "src/add-ons/kernel/file_systems/xfs/Node.cpp",
        "patchSetId": 1
      },
      "lineNbr": 133,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T12:33:58Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tuint64 requiredBlock \u003d readPos / fInode-\u003eBlockSize();\n```",
      "range": {
        "startLine": 133,
        "startChar": 0,
        "endLine": 133,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aad85808_12b5c9cf",
        "filename": "src/add-ons/kernel/file_systems/xfs/Node.cpp",
        "patchSetId": 1
      },
      "lineNbr": 135,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T12:33:58Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tif (status !\u003d B_OK) {\n```",
      "range": {
        "startLine": 135,
        "startChar": 0,
        "endLine": 135,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb69c118_c3398a0f",
        "filename": "src/add-ons/kernel/file_systems/xfs/kernel_interface.cpp",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2025-02-04T08:16:16Z",
      "side": 1,
      "message": "I don\u0027t understand why this needed to be renamed from TotalBlocks to NumBlocks. Can you explain your decision to change it?",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b846506_552a21ce",
        "filename": "src/add-ons/kernel/file_systems/xfs/kernel_interface.cpp",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1000632
      },
      "writtenOn": "2025-02-18T06:44:37Z",
      "side": 1,
      "message": "I renamed TotalBlocks to NumBlocks because the previous contributor mentioned it. I should have reviewed the reasoning behind this change more carefully—my mistake on that. At this stage, I’ve created a rough outline for the Block Cache, but I’ll be doing a complete refactor soon. During that process, I’ll look at the naming conventions and make adjustments as needed.",
      "parentUuid": "fb69c118_c3398a0f",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fcb95508_d9a8bf93",
        "filename": "src/add-ons/kernel/file_systems/xfs/xfs.cpp",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T12:33:58Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tif ((Version() \u0026 ~XFS_SB_VERSION_OKBITS)\n\t\t|| ((Version() \u0026 XFS_SB_VERSION_MOREBITSBIT) \u0026\u0026 (Features2() \u0026 ~XFS_SB_VERSION2_OKBITS))) {\n```",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 45,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fcc18967_e036ba7f",
        "filename": "src/add-ons/kernel/file_systems/xfs/xfs.cpp",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2025-02-04T08:16:16Z",
      "side": 1,
      "message": "The fomat was already incorrect here, but while you\u0027re at it, you can reformat it as suggested by the format bot.",
      "parentUuid": "fcb95508_d9a8bf93",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 45,
        "endChar": 0
      },
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "730017fa_1ed080a4",
        "filename": "src/add-ons/kernel/file_systems/xfs/xfs.cpp",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T12:33:58Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t// We cannot have write support if this is set\n```",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 64,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c55e443b_bf5a26d9",
        "filename": "src/add-ons/kernel/file_systems/xfs/xfs.cpp",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2025-02-04T08:16:16Z",
      "side": 1,
      "message": "Should be indented a single tab, not two",
      "parentUuid": "730017fa_1ed080a4",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 64,
        "endChar": 0
      },
      "revId": "3e462b36d67f3c0d4d2cc465c6b247c2761b3e6a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}