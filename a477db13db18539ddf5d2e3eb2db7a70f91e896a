{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c7599b00_ac703bc8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-07-05T07:28:24Z",
      "side": 1,
      "message": "You have several options for this:\n\n- Use if checks as needed in the code. This works ok when the code for the two versions is similar enough\n\n- Define a virtual class with the API for a type of node. This class just has function definitions and no implementation\n- Then implement two subclasses for v4 and v5 formats, and instanciate the right one as needed depending on what\u0027s found on disk\n\nThis second approach can work, but since we now have classes with vtables, it\u0027s not possible anymore to cast directly a buffer with the on-disk content to a class instance. So if we go this route, now we need to have a bit more code to create a class instance from a buffer. That may be a good idea anyway, this conversion code could be a good place to do the CRC checks and endianness conversions (right now the endianness conversions are not done consistently and you end up doing a lot of conversions in the middle of other code, which is a risk for mistakes).\n\nYet another alternative is to use templates. A template can be used instead of a virtual class to store the API and common code, then the V4 and V5 classes can be instances of this template (with different \"backend\" for the actual storage format and the few methods that need to be different). Then there is again no vtable, and it\u0027s still possible to share most code between the two implementations.",
      "revId": "a477db13db18539ddf5d2e3eb2db7a70f91e896a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d752aa65_63d0f9cf",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1000372
      },
      "writtenOn": "2022-07-05T10:11:02Z",
      "side": 1,
      "message": "I think virtual class method is good choice, it will be more consistent with our xfs code than templates.\nIs there some reference/resource for above virtual class method?\n\nNever did something like this before so it will help me a lot to implement it :)",
      "parentUuid": "c7599b00_ac703bc8",
      "revId": "a477db13db18539ddf5d2e3eb2db7a70f91e896a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12eea59d_74269c06",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-07-06T16:06:55Z",
      "side": 1,
      "message": "I think it would look something like this:\n\n\n    class DirectoryNode {\n        public:\n            virtual DirectoryNode(const char* buffer);\n            virtual status_t SomeMethod() \u003d 0;\n                // Add as much methods as needed, to access all\n                // the data\n\n            static DirectoryNode* Create(const char* buffer);\n                // This method scans the buffer and decides if \n                // it\u0027s v4 or v5. Then it creates a\n                // DirectoryNodeV4 or V5 instance and returns it\n\n            // Maybe also add a variant of Create that will take\n            // as parameter a block number, and takes care of the\n            // reading from disk. It will allow to centralize the\n            // disk access in a single place\n    };\n\n    class DirectoryNodeV4: public DirectoryNode {\n         public:\n             virtual DirectoryNodeV4(const char* buffer);\n             virtual status_t SomeMethod();\n                 // Actual implementation of the method, using\n                 // the fields below\n\n         private:\n             // fields for the V4 node format\n    };\n\n    class DirectoryNodeV5: public DirectoryNode {\n        // Same as above, but for XFS v5\n    };",
      "parentUuid": "d752aa65_63d0f9cf",
      "revId": "a477db13db18539ddf5d2e3eb2db7a70f91e896a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4203ec4_b87b7f75",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1000372
      },
      "writtenOn": "2022-07-08T04:51:04Z",
      "side": 1,
      "message": "Thanks a lot for this.\nIt helped me a lot to implement class.\n\nAs of now I only implemented ExtentDataHeader class and not others because there are some issues.\n\nI am getting segmentation fault whenever I try to access SomeMeathod() functions, I tried many things but still don\u0027t understand why does that happens.\n\nTo read from buffer I used memcpy (similar to how we used it to read superblock from buffer) but maybe I am doing something wrong?\n\nI tried allocating memory in both heap or stack but issue remains same.\n\nI pushed patch to see if you could notice something here.",
      "parentUuid": "12eea59d_74269c06",
      "revId": "a477db13db18539ddf5d2e3eb2db7a70f91e896a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cecf3a51_d61c3e1c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-07-10T08:12:09Z",
      "side": 1,
      "message": "Yes, as I have written in my first message in this thread:\n\n\u003e This second approach can work, but since we now have classes with vtables, it\u0027s not possible anymore to cast directly a buffer with the on-disk content to a class instance. So if we go this route, now we need to have a bit more code to create a class instance from a buffer.\n\nNow we have a class with virtual methods. The way these are implemented needs to store some information about these methods into each object (this is what\u0027s called the \"virtual function table\", or vtable for short).\n\nIf you use memcpy the way you did, you are simply erasing this vtable. Then, calling any virtual functions will crash.\n\nTo architecture the code this way, we need to be very clear about what\u0027s an on-disk buffer and what\u0027s a C++ object. It is not possible to transparently mix the two anyway.\n\nThe process for creating a C++ object from an on-disk buffer (the Create function) is:\n\n- Identify/check the buffer type (check FS version, magic number in the buffer, etc)\n- Validate the buffer appropriately (CRC checks for example)\n- Allocate the corresponding C++ object (usign \"new (std::nothrow)\")\n- The C++ object constructor can initialize each of its fields. It is also a good time to do the endian swapping for each of the fields. Rather than trying to use memcpy, since the C++ object memory layout does not exactly match the on-disk buffer, you have to set each field one by one.\n\nThe Create function can fail for a number of reasons:\n- The buffer is too small, or the magic isn\u0027t recognized\n- The CRC is invalid\n- There was not enough memory available to allocate the C++ object\n\nYou can handle this by returning NULL, for example. Of course each place where the function is called should carefully check if it got a valid pointer or if it got NULL.",
      "parentUuid": "d4203ec4_b87b7f75",
      "revId": "a477db13db18539ddf5d2e3eb2db7a70f91e896a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7bc747fc_21f9ea7a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1000372
      },
      "writtenOn": "2022-07-10T10:26:33Z",
      "side": 1,
      "message": "Now I got why you had class constructors in above pseudo code.\nStill I don\u0027t get why we should push for buffer check in creating object instance.\n\nIt will only be checked once (entire directory block) in init() function.\n\nIt will not be always valid as well since in GetNext() function we cast void* entry to (ExtentDataHeader*) (fbuffer + 1).\nThe above code will perform tests on buffer \u003d buffer + 1 and will definitely fail.\n\nThat makes me wonder can we even typecast virtual class ExtentDataHeader* on buffer for entries?\nIf not I will have to look for other ways in GetNext() functions for all extent based and B+Trees based directories",
      "parentUuid": "cecf3a51_d61c3e1c",
      "revId": "a477db13db18539ddf5d2e3eb2db7a70f91e896a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b7a1a242_0c80460a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000372
      },
      "writtenOn": "2022-07-05T07:23:01Z",
      "side": 1,
      "message": "For reading xfs version 4 directories we need to use data structs ending with V4, Is there some elegant way I can handle this along with V5 structs?\n\nI managed to get block directories work with a single common struct but we should be using V4 structs for block directories as well.\n\nThere are some ways which I tried :\n\n1. Union of V4 and V5 struct.\n\n2. Handling both Versions through single V5 struct -\u003e This is quite doable for block directories, but \n   I am not able to do it for leaf directories, I tried using memcpy to get correct values by breaking \n   buffer at crc offset but that gave me either segmentation fault or illegal instruction.\n\nAny ideas on how to proceed further?\n\n",
      "revId": "a477db13db18539ddf5d2e3eb2db7a70f91e896a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a8607efa_d03ad7d3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-07-05T07:28:24Z",
      "side": 1,
      "message": "Hi,\nStill some coding style problems which I have listed in inline review.",
      "revId": "a477db13db18539ddf5d2e3eb2db7a70f91e896a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e60f4443_98170ae0",
        "filename": "src/add-ons/kernel/file_systems/xfs/Extent.cpp",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-07-05T07:28:24Z",
      "side": 1,
      "message": "two blank lines needed here",
      "revId": "a477db13db18539ddf5d2e3eb2db7a70f91e896a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ff2593a0_b7990396",
        "filename": "src/add-ons/kernel/file_systems/xfs/Extent.cpp",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000372
      },
      "writtenOn": "2022-07-08T04:51:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e60f4443_98170ae0",
      "revId": "a477db13db18539ddf5d2e3eb2db7a70f91e896a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7820d67_e61f2920",
        "filename": "src/add-ons/kernel/file_systems/xfs/Extent.cpp",
        "patchSetId": 1
      },
      "lineNbr": 72,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-07-05T07:28:24Z",
      "side": 1,
      "message": "there should be a space between if and ( (in all this function)",
      "revId": "a477db13db18539ddf5d2e3eb2db7a70f91e896a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7ab31204_8836bfbc",
        "filename": "src/add-ons/kernel/file_systems/xfs/Extent.cpp",
        "patchSetId": 1
      },
      "lineNbr": 72,
      "author": {
        "id": 1000372
      },
      "writtenOn": "2022-07-08T04:51:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d7820d67_e61f2920",
      "revId": "a477db13db18539ddf5d2e3eb2db7a70f91e896a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01426051_c9a28ac0",
        "filename": "src/add-ons/kernel/file_systems/xfs/Extent.cpp",
        "patchSetId": 1
      },
      "lineNbr": 210,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-07-05T07:28:24Z",
      "side": 1,
      "message": "there should be a space between if and (",
      "revId": "a477db13db18539ddf5d2e3eb2db7a70f91e896a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d540e855_749599ad",
        "filename": "src/add-ons/kernel/file_systems/xfs/Extent.cpp",
        "patchSetId": 1
      },
      "lineNbr": 210,
      "author": {
        "id": 1000372
      },
      "writtenOn": "2022-07-08T04:51:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "01426051_c9a28ac0",
      "revId": "a477db13db18539ddf5d2e3eb2db7a70f91e896a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90dc8411_538ce8db",
        "filename": "src/add-ons/kernel/file_systems/xfs/LeafDirectory.cpp",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-07-05T07:28:24Z",
      "side": 1,
      "message": "two blank lines needed here",
      "revId": "a477db13db18539ddf5d2e3eb2db7a70f91e896a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ec19112a_7f87d713",
        "filename": "src/add-ons/kernel/file_systems/xfs/LeafDirectory.cpp",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000372
      },
      "writtenOn": "2022-07-08T04:51:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "90dc8411_538ce8db",
      "revId": "a477db13db18539ddf5d2e3eb2db7a70f91e896a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b05f3184_b15b1d8d",
        "filename": "src/add-ons/kernel/file_systems/xfs/LeafDirectory.cpp",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-07-05T07:28:24Z",
      "side": 1,
      "message": "there should be a space between if and ( (in all this function)",
      "revId": "a477db13db18539ddf5d2e3eb2db7a70f91e896a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "147334b2_981c6536",
        "filename": "src/add-ons/kernel/file_systems/xfs/LeafDirectory.cpp",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1000372
      },
      "writtenOn": "2022-07-08T04:51:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b05f3184_b15b1d8d",
      "revId": "a477db13db18539ddf5d2e3eb2db7a70f91e896a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9577cd2_c73a6015",
        "filename": "src/add-ons/kernel/file_systems/xfs/LeafDirectory.cpp",
        "patchSetId": 1
      },
      "lineNbr": 82,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-07-05T07:28:24Z",
      "side": 1,
      "message": "there should be a space between if and ( (in all this function)",
      "revId": "a477db13db18539ddf5d2e3eb2db7a70f91e896a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a8a803ee_ba4e4a57",
        "filename": "src/add-ons/kernel/file_systems/xfs/LeafDirectory.cpp",
        "patchSetId": 1
      },
      "lineNbr": 82,
      "author": {
        "id": 1000372
      },
      "writtenOn": "2022-07-08T04:51:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c9577cd2_c73a6015",
      "revId": "a477db13db18539ddf5d2e3eb2db7a70f91e896a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77a8c50a_59ee7d64",
        "filename": "src/add-ons/kernel/file_systems/xfs/xfs.cpp",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-07-05T07:28:24Z",
      "side": 1,
      "message": "two blank lines needed here",
      "revId": "a477db13db18539ddf5d2e3eb2db7a70f91e896a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b2c8234b_f71e9421",
        "filename": "src/add-ons/kernel/file_systems/xfs/xfs.cpp",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1000372
      },
      "writtenOn": "2022-07-08T04:51:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "77a8c50a_59ee7d64",
      "revId": "a477db13db18539ddf5d2e3eb2db7a70f91e896a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a217671_cef95ab4",
        "filename": "src/add-ons/kernel/file_systems/xfs/xfs.cpp",
        "patchSetId": 1
      },
      "lineNbr": 148,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-07-05T07:28:24Z",
      "side": 1,
      "message": "the extra tab your added here is not needed.\n\nNormally in Haiku code style, the || should be at the start of the line rather than at the end.",
      "revId": "a477db13db18539ddf5d2e3eb2db7a70f91e896a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "437efed6_9ad1a61c",
        "filename": "src/add-ons/kernel/file_systems/xfs/xfs.cpp",
        "patchSetId": 1
      },
      "lineNbr": 148,
      "author": {
        "id": 1000372
      },
      "writtenOn": "2022-07-08T04:51:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8a217671_cef95ab4",
      "revId": "a477db13db18539ddf5d2e3eb2db7a70f91e896a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96ceebec_d34c87f0",
        "filename": "src/add-ons/kernel/file_systems/xfs/xfs.h",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-07-05T07:28:24Z",
      "side": 1,
      "message": "This should be named UuidEquals()",
      "revId": "a477db13db18539ddf5d2e3eb2db7a70f91e896a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "640dc3af_b513f7ad",
        "filename": "src/add-ons/kernel/file_systems/xfs/xfs.h",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 1000372
      },
      "writtenOn": "2022-07-08T04:51:04Z",
      "side": 1,
      "message": "Forget \u0027s\u0027 \u003e_\u003c\nI Will correct it in next patch.",
      "parentUuid": "96ceebec_d34c87f0",
      "revId": "a477db13db18539ddf5d2e3eb2db7a70f91e896a",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}