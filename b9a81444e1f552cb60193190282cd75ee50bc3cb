{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7aedb828_9502b489",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-04-26T02:55:27Z",
      "side": 1,
      "message": "It was pointed out to me today that we do actually support sending file descriptors over UNIX domain sockets. So, do we really need this syscall?",
      "revId": "b9a81444e1f552cb60193190282cd75ee50bc3cb",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0ef106e4_121a9575",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2023-04-26T03:03:10Z",
      "side": 1,
      "message": "It is intended to be used for port-based communication such as sending BMessage to another team. Creating separate socket and watcher thread just to accept FDs would be clumsy and error-prone.",
      "revId": "b9a81444e1f552cb60193190282cd75ee50bc3cb",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "09ff8b4a_f07b9837",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2025-04-02T21:56:20Z",
      "side": 1,
      "message": "This or extending write_port to accept PDs will be also needed to pass Vulkan buffer and semaphore FDs to app_server for accelerated rendering and display.",
      "revId": "b9a81444e1f552cb60193190282cd75ee50bc3cb",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7190d137_2b14c53b",
        "filename": "headers/private/kernel/vfs.h",
        "patchSetId": 2
      },
      "lineNbr": 254,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-04-02T21:58:14Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\nint _user_dup_foreign(team_id fromTeam, team_id toTeam, int fd, int openMode);\n```",
      "range": {
        "startLine": 254,
        "startChar": 0,
        "endLine": 254,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "b9a81444e1f552cb60193190282cd75ee50bc3cb",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "94bf058c_06a4d4b1",
        "filename": "headers/private/system/syscalls.h",
        "patchSetId": 2
      },
      "lineNbr": 340,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-04-02T21:58:14Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\nextern int _kern_dup_foreign(team_id fromTeam, team_id toTeam, int fd, int openMode);\n```",
      "range": {
        "startLine": 340,
        "startChar": 0,
        "endLine": 340,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "b9a81444e1f552cb60193190282cd75ee50bc3cb",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cd2ad070_1f9efd28",
        "filename": "src/system/kernel/fs/fd.cpp",
        "patchSetId": 2
      },
      "lineNbr": 497,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-04-02T21:58:14Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\tif (geteuid() !\u003d 0 \u0026\u0026 fromTeam !\u003d B_CURRENT_TEAM \u0026\u0026 fromTeam !\u003d team_get_current_team_id())\n```",
      "range": {
        "startLine": 496,
        "startChar": 0,
        "endLine": 497,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "b9a81444e1f552cb60193190282cd75ee50bc3cb",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}