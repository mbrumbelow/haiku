{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c32cb0a9_b8b745df",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2023-06-26T19:46:54Z",
      "side": 1,
      "message": "Asking to reconsider. \n\nThis is a generally useful warning, in my opinion, especially when developing new code that (has to) use(s) C-style functions to copy data. In this particular case, I reviewed the code and it looks correct to me. It seems like it is not figuring out that in these cases the array will not be accessed since the Set() method makes sure that the capability number is not higher than the supported number of capabilities. Thus it is a false alarm.\n\nI think the leading principle should be that when possible, we leave as many diagnostics on as possible, and we treat them like an error where possible. In this case disabling it at a lower level seems correct.\n\nAlternatively we can make it hyperlocal, like how the most current PR changes the diagnostics in the kernel with a #pragma directive.",
      "revId": "22ec4525bb2b22989c4162b5c02ae11dfee114bf",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0a4d2351_c053285f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2023-06-26T19:50:51Z",
      "side": 1,
      "message": "I think I\u0027d personally prefer a pragma where explicitly reviewed rather than disabling the warning entirely.",
      "revId": "22ec4525bb2b22989c4162b5c02ae11dfee114bf",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f7ed9e96_fea76d65",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2023-06-27T14:05:59Z",
      "side": 1,
      "message": "\"Assume the code is correct\". What is the point of the warning, then? IMHO, the point is to review the code for correctness, not simply disable the warning.",
      "revId": "22ec4525bb2b22989c4162b5c02ae11dfee114bf",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1f36847_8be047dc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-06-27T14:40:44Z",
      "side": 1,
      "message": "Yes, at least for reviewing, it would be very useful to have the pragma near the problematic code, and we can make a decision in each case: keep the pragma, or fix the code.\n\nIn the current state it is still too global, and we can\u0027t check if the warning returns anything useful in this code review.",
      "parentUuid": "0a4d2351_c053285f",
      "revId": "22ec4525bb2b22989c4162b5c02ae11dfee114bf",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "14cabb85_001e236b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2023-06-28T06:35:25Z",
      "side": 1,
      "message": "In this case, after going through it myself, it clearly is a bug in the diagnostic. My best guess is that it does not understand that there is a bounds check in the code. I do not know what sets it off, but I have moved where the diagnostic is disabled and added a comment why (IMO!) the logic is sound.",
      "parentUuid": "f7ed9e96_fea76d65",
      "revId": "22ec4525bb2b22989c4162b5c02ae11dfee114bf",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "023fe8aa_7252d73f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2023-06-28T06:35:25Z",
      "side": 1,
      "message": "I have moved the diagnostics ignore to the code that is causing the stringop-overflow and array-bounds errors.",
      "parentUuid": "b1f36847_8be047dc",
      "revId": "22ec4525bb2b22989c4162b5c02ae11dfee114bf",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b2b959c_07d42c9a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-07-01T10:48:48Z",
      "side": 1,
      "message": "I agree with that analysis, I have already seen this warning and I don\u0027t understand how an overflow is possible here.\n\nThe array is declared like this:\n\n    uint8 capabilities[(CapabilityCount + 7) / 8];\n    \nAnd there is a bound check just before accessing it:\n\n\tif (capability \u003e\u003d CapabilityCount)\n\t\treturn;\n\t\t\nThat being said, a possible solution is to use an std::bitset instead of our own thing here?",
      "parentUuid": "14cabb85_001e236b",
      "revId": "22ec4525bb2b22989c4162b5c02ae11dfee114bf",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40a52975_5f7dd548",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-07-01T11:28:19Z",
      "side": 1,
      "message": "I made a change to use std::bitset: https://review.haiku-os.org/c/haiku/+/6663",
      "parentUuid": "7b2b959c_07d42c9a",
      "revId": "22ec4525bb2b22989c4162b5c02ae11dfee114bf",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}