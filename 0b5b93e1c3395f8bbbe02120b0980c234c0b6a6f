{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "50ff87f8_dd0bc328",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2025-02-02T16:02:37Z",
      "side": 1,
      "message": "gBlack and gWhite",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7273fbb_8e24380b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2025-02-02T16:02:37Z",
      "side": 1,
      "message": "kBlack and kWhite",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "115f7bac_4dd294c7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2025-02-02T19:09:37Z",
      "side": 1,
      "message": "I like this change, but can you provide some more basic colors? You can use the color names and values from https://clrs.cc/ Not \"The New Defaults\" but \"The Old Defaults\" meaning the plain web colors:\n\nNavy\nBlue\nAqua\nTeal\nOlive\nGreen\nLime\nYellow\nOrange\nRed\nMaroon\nFuchsia\nPurple\nSilver\nGray\nWhite\nBlack\n\nFeel free to leave out any that you don\u0027t think are important enough to be included.",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b4f4960_11b8eafe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-02-02T20:23:37Z",
      "side": 1,
      "message": "`g` prefix is for application-local definitions. Global constants should still use `B_` syntax.\n\nAnd, this would be much better defined in `GraphicsDefs.h`, you can put them just after the `B_TRANSPARENT_COLOR` block (but define them inline of course.)",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f0789b6_7e3dc4d1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-02-02T20:26:50Z",
      "side": 1,
      "message": "I don\u0027t think it makes sense to define all those static colors. Applications should generally use the global defaults.",
      "parentUuid": "115f7bac_4dd294c7",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c6efd29_499d5538",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-02-02T20:28:32Z",
      "side": 1,
      "message": "Actually, thinking about this more, I don\u0027t think it makes sense to have these global constants at all:\n\n * Applications that use fully their own colors and ignore system colors on purpose should always define their own constants and never use global ones (screensavers like \"Debug Now\" for example)\n \n * All other applications and libraries ought to use system color preferences.\n\nSo we should not have statically defined global colors (with the exception of `B_TRANSPARENT_COLOR` since it\u0027s a magic constant.)",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e199fca_e32e8363",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2025-02-02T20:41:07Z",
      "side": 1,
      "message": "I think gBlack and gWhite have a justification, if only to say this is deliberate in this case. It also makes it very easy to figure out where the intention, semantically, was to use black or white. black and white in tracker are often used as pairs to match the dark/light more when no semantic colors are fitting.\n\nIn the past I suggested adding an api so that userspace apps can register more semantic colors for their own use, and that of compatible applications, So now I am confused why you are  against this change. We only have a limited ammount of semantic colors, and the api is not made better by forcing apps to to the make_color dance themselves.\n\nCurrently there are severall cases where I simply cannot use semantic colors for the lack of an api for those.\n-\u003e Terminal Colors for following the system\n-\u003e Debugger Colors for following the system\n-\u003e system console colors\n\nFor some those can be infered, like AboutSystem red for B of Be and blue for the e. based on text color, but not for all of them. Especially not syntax colors for programming languages, since those are abstract. (and for third-party apps, vision for example, in the default install, also has way too many colors that are not infered either. And could be more easily if we had 2 or 3 vision registered colors that don\u0027t have to match our current color constants)\n\n\nSome of the code in this changeset should probably get their usage of gBlack or gWhite removed at some point, but the solution isn\u0027t to make them define it on their own.",
      "parentUuid": "4c6efd29_499d5538",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "959336f2_807eb6fb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2025-02-02T20:41:07Z",
      "side": 1,
      "message": "I don\u0027t want any more global specific colors than those two. If we can make an api to produce specific colors (matching your Text/background) based on semantic colors that would be fine however. (i.e Give me a Red text for my textview (based on current text color)",
      "parentUuid": "2f0789b6_7e3dc4d1",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36fa233c_54d3c879",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2025-02-02T21:01:35Z",
      "side": 1,
      "message": "As waddlesplash pointed out, B_ is for public constants, \u0027k\u0027 is for all constants, and \u0027g\u0027 is only for global variables (non-const). So this would need to be B_BLACK and B_WHITE instead. I did not yet think about whether or not it makes sense to have those, but at least they should be named correctly in this patch.",
      "parentUuid": "3e199fca_e32e8363",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe7fad05_5cd1ea59",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2025-02-02T21:02:58Z",
      "side": 1,
      "message": "The coding guidelines disagree though?\nB_ style is not mentioned anywhere, and as far as I am aware the consensus was to not add any more.\n\n\u003e Global variables are prefixed with a g, static variables with an s using the same scheme as above.\n\nGraphicsDefs.h Could make sense, but i think this is really only usefull for code that uses the interface kit anyway.",
      "parentUuid": "0b4f4960_11b8eafe",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32f5b628_88f13396",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-02-03T00:18:15Z",
      "side": 1,
      "message": "\u003e and as far as I am aware the consensus was to not add any more.\n\nWhere do you think this consensus was reached? We have added more just in the last few months even, so this certainly not the case.",
      "parentUuid": "fe7fad05_5cd1ea59",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b30f1ee3_be52a2be",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-02-03T00:18:15Z",
      "side": 1,
      "message": "\u003e In the past I suggested adding an api so that userspace apps can register more semantic colors for their own use\n\nWell, that\u0027s a completely separate question from this patch altogether, I think.\n\n\u003e but the solution isn\u0027t to make them define it on their own.\n\nMy point in my original reply in this chain is that there are only 2 cases where applications would have these colors hardcoded: 1. they use a hardcoded set of colors deliberately for a specific look independent of system colorscheme (like screensavers may do), or 2. they incorrectly hardcode colors that they should fetch from a system color scheme.\n\nIn either case, no new global is needed, so none should be introduced.",
      "parentUuid": "36fa233c_54d3c879",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d359069_d8f04675",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2025-02-03T01:17:44Z",
      "side": 1,
      "message": "From conversations in irc where I asked that. But seeing as you both seem to disagree I guess i was wrong here. I would then rename those to the B_ variant. But only after reachiing a consensus if we then want these constants or not. : )\n\nfor point 2) what does tracker code for labels for example fit into? Should it not use B_BLACK color? Not every color neccesarily needs to be defined in the system preferences, sometimes contrast requirements take precedent and we should use Contrast() to determine if user colors are useable, and if not then not use them.\n\nWould you in such an instance agree to use K_BLACK, or rather take the (broken) user color and modify it with hsl?\n\nI guess if your answer is to always use the user color and modify that then the global would be uneccesary indeed.",
      "parentUuid": "b30f1ee3_be52a2be",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d4f5d8f_e6766ff9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-02-03T02:20:29Z",
      "side": 1,
      "message": "In what scenario would a user color be broken? Every color in Apperance preferences related to text should have a corresponding color that is the \"background\" for it. If these are directly used \"as is\", or with light tinting only, then all is as it should be, and if a user selects a color combination with insufficient contrast, that\u0027s their problem.\n\nIf Tracker on the other hand is not pairing high/low colors properly, then that\u0027s a Tracker bug. Either way it should not be using hardcoded colors.",
      "parentUuid": "0d359069_d8f04675",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34e74810_fa893f55",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2025-02-03T10:06:57Z",
      "side": 1,
      "message": "any scenarion where you shift a user color to some other value, where fg and bg contrast fine, but no longer do after you shift the foreground. In such a scenario you can discard the fg color and pick a different one.\n\nI vehemently disagree that users selecting colors is \"their problem\". If we shift colors in code we have to ensure sufficient contrast prevails, even if that means breaking the user color.",
      "parentUuid": "2d4f5d8f_e6766ff9",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ac6c584_918a8c0c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2025-02-03T16:28:10Z",
      "side": 1,
      "message": "I agree with Waddlesplash here, either these constants are defined by an application, and it\u0027s up to that application to define it as it needs. Or, it\u0027s some type of system color, and it should go throuh ui_color to make sure that if we change the color, we don\u0027t have to recompile all apps to update them to the new one.\n\nThere is a separate question of what do we do inside Haiku sources: we have many apps that just need a black or white color, and we may want to group these together. We can do this with a private header, for use just in our own apps, and not with a public API in InterfaceDefs.h. That is a quite different thing, and may be a good idea to ease searching for that color when doing code changes or theming changes.",
      "parentUuid": "34e74810_fa893f55",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0cd881a0_02d5e993",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2025-02-04T06:45:45Z",
      "side": 1,
      "message": "Not that I made up my mind yet, but I don\u0027t get this argument: if our own apps have good reason to use constants for black/white (or other colors), why wouldn\u0027t there be reasons to use them for external apps?\n\nShouldn\u0027t we review our own usage first, and see whether or not that is something other apps would benefit from, too?",
      "parentUuid": "7ac6c584_918a8c0c",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d5ee00b_2e8b569c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2025-02-04T07:43:25Z",
      "side": 1,
      "message": "Yes, my point is I see two cases here:\n\n- Either this is some system global color, and in this case, it should go through ui_color, so that we can change it later without recompiling all apps,\n- Or, it\u0027s something more private to applications and not part of the ABI. In that case, we can have it in a shared header for our own apps, so we don\u0027t repeat the constant everywhere, but if we want to change it, we only have to recompile Haiku (that is easy enough to do).\n\nI don\u0027t know which one is right, but I think having a fixed constant in a public header that then ends up being hardcoded in each compiled app is not it. Or maybe it is, because the definition of \u0027black\u0027 and \u0027white\u0027 is very unlikely to ever need changing? But that seems a bit surprising considering all the work on theming and making all the colors behaving nicely together?",
      "parentUuid": "0cd881a0_02d5e993",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1abd5941_d0580beb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2025-02-04T16:15:50Z",
      "side": 1,
      "message": "Black and white would never change, yes :-)\n\nBut once we\u0027ve looked through our own code, it should become clear where it\u0027s used, and whether or not this is a good idea.",
      "parentUuid": "0d5ee00b_2e8b569c",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12ffa23f_c1994b67",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2025-02-04T22:05:51Z",
      "side": 1,
      "message": "black and white can change. If the 8bit per color channel is ever too little for some applications. Though I guess this is an argument against adding it.\n\nFrom the discussion thus far I\u0027d be in favor of adding this to a private header as pulkomandy suggested. Later on we can review which of these usages are wrong, and which ones can stay. (Tracker for example has severall which I think are perfectly fine)",
      "parentUuid": "1abd5941_d0580beb",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f42b7588_798ea981",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2025-02-27T21:16:42Z",
      "side": 1,
      "message": "I don\u0027t quite see how black and white can change, no matter how many bits you have for each color channel. Anyway, that would be fine IMO, with the correct naming.",
      "parentUuid": "12ffa23f_c1994b67",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cdc5bcd8_a68f1f1b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2025-05-26T10:01:03Z",
      "side": 1,
      "message": "Okay, I think the way forward here would be the private header method. This should make it clear when searching the code where we intended to use black or white in UI code. Where should such a header be declared?",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2bc27b2_d0e87e2f",
        "filename": "headers/os/interface/InterfaceDefs.h",
        "patchSetId": 1
      },
      "lineNbr": 393,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2025-05-27T23:41:15Z",
      "side": 1,
      "message": "constexpr is not supported bu GCC 2.\n\nName should be B_BLACK_COLOR like existing B_TRANSPARENT_COLOR,",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a853ab8_f236dac4",
        "filename": "headers/os/interface/InterfaceDefs.h",
        "patchSetId": 1
      },
      "lineNbr": 393,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2025-05-28T09:25:24Z",
      "side": 1,
      "message": "Please read the existing comments before pointlessly opening a new review.",
      "parentUuid": "f2bc27b2_d0e87e2f",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b422435c_e2386ac3",
        "filename": "headers/os/interface/InterfaceDefs.h",
        "patchSetId": 1
      },
      "lineNbr": 394,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T15:54:46Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\nconstexpr inline rgb_color gBlack \u003d {0, 0, 0, 255};\nconstexpr inline rgb_color gWhite \u003d {255, 255, 255, 255};\n```",
      "range": {
        "startLine": 393,
        "startChar": 0,
        "endLine": 394,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "280d1f12_8f6dd7bd",
        "filename": "headers/os/interface/InterfaceDefs.h",
        "patchSetId": 1
      },
      "lineNbr": 394,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2025-02-02T19:09:37Z",
      "side": 1,
      "message": "Please use make_color() instead of { r, g, b, a };",
      "parentUuid": "b422435c_e2386ac3",
      "range": {
        "startLine": 393,
        "startChar": 0,
        "endLine": 394,
        "endChar": 0
      },
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fb0b441d_4ced4c91",
        "filename": "headers/os/interface/InterfaceDefs.h",
        "patchSetId": 1
      },
      "lineNbr": 394,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-02-02T20:26:50Z",
      "side": 1,
      "message": "That probably won\u0027t work for global constants like this. You will need to use `static const` for GCC2 anyway.",
      "parentUuid": "280d1f12_8f6dd7bd",
      "range": {
        "startLine": 393,
        "startChar": 0,
        "endLine": 394,
        "endChar": 0
      },
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cdf82230_fbf30435",
        "filename": "headers/os/interface/InterfaceDefs.h",
        "patchSetId": 1
      },
      "lineNbr": 394,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2025-02-03T16:28:10Z",
      "side": 1,
      "message": "Do we want these as hardcoded constants? This means if we ever want to change the color, we have to recompile all applications",
      "parentUuid": "fb0b441d_4ced4c91",
      "range": {
        "startLine": 393,
        "startChar": 0,
        "endLine": 394,
        "endChar": 0
      },
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d4e8b3d5_72f97851",
        "filename": "src/apps/devices/ResourceUsageWindow.cpp",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T15:54:46Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\n```",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 75,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d4d16713_51a15840",
        "filename": "src/apps/devices/ResourceUsageWindow.cpp",
        "patchSetId": 1
      },
      "lineNbr": 85,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T15:54:46Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\n```",
      "range": {
        "startLine": 85,
        "startChar": 0,
        "endLine": 85,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5ddba844_4fbc0fab",
        "filename": "src/apps/devices/ResourceUsageWindow.cpp",
        "patchSetId": 1
      },
      "lineNbr": 144,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T15:54:46Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\n```",
      "range": {
        "startLine": 144,
        "startChar": 0,
        "endLine": 144,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7ffb57c2_00e6b5ff",
        "filename": "src/apps/icon-o-matic/generic/gui/panel/color_picker/AlphaSlider.cpp",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T15:54:46Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\nAlphaSlider::AlphaSlider(orientation dir, BMessage* message, border_style border)\n\t:\n\tBControl(\"alpha slider\", NULL, message, B_WILL_DRAW | B_FRAME_EVENTS | B_NAVIGABLE),\n\tfBitmap(NULL),\n\tfColor(gBlack),\n\tfDragging(false),\n\tfOrientation(dir),\n\tfBorderStyle(border)\n```",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 29,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1fa43baf_c238c9ef",
        "filename": "src/apps/icon-o-matic/generic/property/specific_properties/ColorProperty.cpp",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T15:54:46Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t:\n\tProperty(identifier),\n\tfValue(gBlack)\n```",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 25,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a7077e5d_ca470427",
        "filename": "src/apps/icon-o-matic/generic/property/specific_properties/ColorProperty.cpp",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T15:54:46Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t:\n\tProperty(archive),\n\tfValue(gBlack)\n```",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 46,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1bed2ad9_3d434209",
        "filename": "src/apps/icon-o-matic/style/CurrentColor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T15:54:46Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t:\n\tObservable(),\n\tfColor(gBlack)\n```",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 19,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "76e1e1fc_916a2e53",
        "filename": "src/kits/bluetooth/DeviceClass.cpp",
        "patchSetId": 1
      },
      "lineNbr": 430,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T15:54:46Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t}\n```",
      "range": {
        "startLine": 430,
        "startChar": 0,
        "endLine": 430,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c981ec47_f6bcb200",
        "filename": "src/kits/bluetooth/DeviceClass.cpp",
        "patchSetId": 1
      },
      "lineNbr": 434,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T15:54:46Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n} // namespace Bluetooth\n```",
      "range": {
        "startLine": 434,
        "startChar": 0,
        "endLine": 434,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "53a0a47d_af8a3f04",
        "filename": "src/kits/tracker/DialogPane.cpp",
        "patchSetId": 1
      },
      "lineNbr": 129,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T15:54:46Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tAddLine(BPoint(bounds.left + 2, bounds.bottom), BPoint(bounds.right - 2, bounds.bottom),\n\t\tgWhite);\n```",
      "range": {
        "startLine": 128,
        "startChar": 0,
        "endLine": 129,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1a09838a_055a98fa",
        "filename": "src/kits/tracker/Utilities.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1343,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T15:54:46Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\tAddLine(bounds.LeftTop() + BPoint(1, 0), bounds.LeftBottom() + BPoint(1, 0), gWhite);\n```",
      "range": {
        "startLine": 1342,
        "startChar": 0,
        "endLine": 1343,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3e53c83_b478717f",
        "filename": "src/kits/tracker/Utilities.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1347,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T15:54:46Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\tAddLine(bounds.LeftTop() + BPoint(0, 1), bounds.RightTop() + BPoint(0, 1), gWhite);\n```",
      "range": {
        "startLine": 1346,
        "startChar": 0,
        "endLine": 1347,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8e2cf2ef_da460a41",
        "filename": "src/libs/icon/style/Style.cpp",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T15:54:46Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t:\n\tIconObject(\"\u003cstyle\u003e\"),\n\tObserver(),\n#else\n\t:\n#endif\n\n\tfColor(gWhite),\n\tfGradient(NULL),\n\tfColors(NULL),\n#ifdef ICON_O_MATIC\n\tfImage(NULL),\n\tfAlpha(255),\n#endif\n\n\tfGammaCorrectedColors(NULL),\n\tfGammaCorrectedColorsValid(false)\n```",
      "range": {
        "startLine": 25,
        "startChar": 0,
        "endLine": 40,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fd6d7ad9_cc5c7364",
        "filename": "src/libs/icon/style/Style.cpp",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T15:54:46Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (insert after):\n```c++\n\n\n```",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 67,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fec9d7c3_19d5c925",
        "filename": "src/libs/icon/style/Style.cpp",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T15:54:46Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t:\n\tIconObject(\"\u003cstyle\u003e\"),\n\tObserver(),\n\n\tfColor(gWhite),\n\tfGradient(NULL),\n\tfColors(NULL),\n\tfImage(image),\n\n\tfGammaCorrectedColors(NULL),\n\tfGammaCorrectedColorsValid(false)\n```",
      "range": {
        "startLine": 69,
        "startChar": 0,
        "endLine": 78,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9e3ed522_f9ce5452",
        "filename": "src/libs/icon/style/Style.cpp",
        "patchSetId": 1
      },
      "lineNbr": 124,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T15:54:46Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t:\n\tIconObject(archive),\n\tObserver(),\n#else\n\t:\n#endif\n\n\tfColor(gWhite),\n\tfGradient(NULL),\n\tfColors(NULL),\n#ifdef ICON_O_MATIC\n\tfImage(NULL),\n\tfAlpha(255),\n#endif\n\n\tfGammaCorrectedColors(NULL),\n\tfGammaCorrectedColorsValid(false)\n```",
      "range": {
        "startLine": 109,
        "startChar": 0,
        "endLine": 124,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a923dbea_2bdb018c",
        "filename": "src/preferences/bluetooth/DeviceListItem.cpp",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T15:54:46Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\trgb_color kHighlight \u003d {156, 154, 156, 0};\n```",
      "range": {
        "startLine": 49,
        "startChar": 0,
        "endLine": 49,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5583ac92_1372dd6c",
        "filename": "src/preferences/bluetooth/DeviceListItem.cpp",
        "patchSetId": 1
      },
      "lineNbr": 119,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T15:54:46Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` is to remove this line/these lines.",
      "range": {
        "startLine": 119,
        "startChar": 0,
        "endLine": 119,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "912740b5_278d69c8",
        "filename": "src/servers/app/drawing/PatternHandler.cpp",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T15:54:46Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t:\n\tfPattern(kSolidHigh),\n\tfHighColor(gBlack),\n\tfLowColor(gWhite),\n\tfXOffset(0),\n\tfYOffset(0)\n```",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 31,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "80c09b61_dbceed90",
        "filename": "src/servers/app/drawing/PatternHandler.cpp",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T15:54:46Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t:\n\tfPattern(pat ? Pattern(pat) : Pattern(kSolidHigh)),\n\tfHighColor(gBlack),\n\tfLowColor(gWhite),\n\tfXOffset(0),\n\tfYOffset(0)\n```",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 47,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c252eab2_6f1dc421",
        "filename": "src/servers/app/drawing/PatternHandler.cpp",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T15:54:46Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t:\n\tfPattern(pat),\n\tfHighColor(gBlack),\n\tfLowColor(gWhite),\n\tfXOffset(0),\n\tfYOffset(0)\n```",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 63,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e1c67616_f13d81ea",
        "filename": "src/servers/app/drawing/PatternHandler.cpp",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T15:54:46Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t:\n\tfPattern(pat),\n\tfHighColor(gBlack),\n\tfLowColor(gWhite),\n\tfXOffset(0),\n\tfYOffset(0)\n```",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 79,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a31e5a8d_3cd126e3",
        "filename": "src/tests/kits/interface/flatten_picture/PictureTestCases.cpp",
        "patchSetId": 1
      },
      "lineNbr": 587,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-02T15:54:46Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\n```",
      "range": {
        "startLine": 587,
        "startChar": 0,
        "endLine": 587,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "0b5b93e1c3395f8bbbe02120b0980c234c0b6a6f",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}