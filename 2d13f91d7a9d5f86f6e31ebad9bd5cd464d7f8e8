{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "5a48b226_a7760ad4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000217
      },
      "writtenOn": "2022-07-06T05:48:05Z",
      "side": 1,
      "message": "I have an updated CR that returns a bounding box for bitmap fonts as well, and also checks/invalidates fBounds, but I don\u0027t see a commit ID in this CR like there used to be - how do I update this without accidentally making a new CR?  using --amend?  Thanks!",
      "revId": "2d13f91d7a9d5f86f6e31ebad9bd5cd464d7f8e8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf7a211f_fe16ec85",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2022-07-06T07:09:43Z",
      "side": 1,
      "message": "You still have to add a commit ID, ammending alone isn\u0027t enough, gerrit seems to no longer show it if you uploaded the patch without the commit hook installed.\n\nSee this email thread for information: https://www.freelists.org/post/haiku-development/Proposal-making-changeids-mandatory,2\n\n(waddlesplash also mentions a way to get the changeID from emails from gerrit there)",
      "parentUuid": "5a48b226_a7760ad4",
      "revId": "2d13f91d7a9d5f86f6e31ebad9bd5cd464d7f8e8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00865d11_fd52f953",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-07-06T08:55:59Z",
      "side": 1,
      "message": "Your change id (from the email notification) is: I8fc42ca0ddc0c77e04e0216001cd17e086ec7495\n\nBut indeed, please set up the commit hook so that next time it is generated locally. For some reason some developers in Haiku asked to not make this mandatory and allow people to get into this stupid situation.",
      "parentUuid": "cf7a211f_fe16ec85",
      "revId": "2d13f91d7a9d5f86f6e31ebad9bd5cd464d7f8e8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7fd5f9d1_c256445f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000217
      },
      "writtenOn": "2022-07-07T04:15:55Z",
      "side": 1,
      "message": "Thank you; I believe that I installed the commit hook for future changes.  Also updated this CR successfully, yey",
      "parentUuid": "00865d11_fd52f953",
      "revId": "2d13f91d7a9d5f86f6e31ebad9bd5cd464d7f8e8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3a9152a_99590973",
        "filename": "src/servers/app/ServerFont.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1082,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-07-05T06:56:55Z",
      "side": 1,
      "message": "what is a scalable style?\n\nIf it isn\u0027t, we currently return a previously computed or invalid bounds. Should this function instead return an error in that case?",
      "revId": "2d13f91d7a9d5f86f6e31ebad9bd5cd464d7f8e8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2524b18b_3b81891e",
        "filename": "src/servers/app/ServerFont.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1082,
      "author": {
        "id": 1000217
      },
      "writtenOn": "2022-07-06T05:48:05Z",
      "side": 1,
      "message": "scalable \u003d vector outline font, as opposed to a bitmap font.  It\u0027s not an error condition.",
      "parentUuid": "d3a9152a_99590973",
      "revId": "2d13f91d7a9d5f86f6e31ebad9bd5cd464d7f8e8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a9ce52b5_00c26833",
        "filename": "src/servers/app/ServerFont.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1082,
      "author": {
        "id": 1000217
      },
      "writtenOn": "2022-07-07T04:15:55Z",
      "side": 1,
      "message": "Added an else clause for non-vector fonts instead of just falling through like before. It looks like the FontStyle constructor gets the metrics for the largest sized bitmap font, so I get the largest width and height of the bitmap fonts similarly. Not sure if this is the best strategy?",
      "parentUuid": "2524b18b_3b81891e",
      "revId": "2d13f91d7a9d5f86f6e31ebad9bd5cd464d7f8e8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a49ea93_4b385b05",
        "filename": "src/servers/app/ServerFont.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1082,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-07-07T07:28:46Z",
      "side": 1,
      "message": "I think you only need one item from the array, the one matching fSize. I don\u0027t know how the matching between fSize and index in the array is done, however. There doesn\u0027t seem to be other code in Haiku doing it, so I assume it happens somewhere inside FreeType?",
      "parentUuid": "a9ce52b5_00c26833",
      "revId": "2d13f91d7a9d5f86f6e31ebad9bd5cd464d7f8e8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2fbaa28_71c5158e",
        "filename": "src/servers/app/ServerFont.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1082,
      "author": {
        "id": 1000223
      },
      "writtenOn": "2022-07-07T16:14:27Z",
      "side": 1,
      "message": "There\u0027s a size field in the available_sizes items, encoded as 26.6 fixed point. You may not find your desired size, of course. Maybe find the biggest (or nearest) one and scale? That\u0027s what the FontStyle constructor is doing to approximate some global metrics. The result won\u0027t be precise anyway, at least given the documented definitions: width is the average width of the glyphs in the strike, so not necessarily enough to fit any glyph, and height is the distance between baselines, again not exactly that of a bounding box.",
      "parentUuid": "2a49ea93_4b385b05",
      "revId": "2d13f91d7a9d5f86f6e31ebad9bd5cd464d7f8e8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d6be2da_647c0a6a",
        "filename": "src/servers/app/ServerFont.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1082,
      "author": {
        "id": 1000217
      },
      "writtenOn": "2022-07-10T06:08:29Z",
      "side": 1,
      "message": "I changed the code to find the closest bitmap to the size specified.  As I mentioned in the other comment, I don\u0027t think we should scale bitmap fonts. I don\u0027t think the FontStyle constructor is scaling - it looks like it\u0027s getting the max bitmap size and using that for the metrics.  It doesn\u0027t appear to be getting the nearest one.  \n\nI am using the \"nominal\" width of x_ppem instead of the width field since I assume \"nominal\" refers to the size before any kind of adjustments?",
      "parentUuid": "b2fbaa28_71c5158e",
      "revId": "2d13f91d7a9d5f86f6e31ebad9bd5cd464d7f8e8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e1b193e_7183ad9b",
        "filename": "src/servers/app/ServerFont.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1082,
      "author": {
        "id": 1000223
      },
      "writtenOn": "2022-07-10T13:53:14Z",
      "side": 1,
      "message": "The FontStyle constructor is not scaling the font, it scales the metrics. Gets the maximum size, then the metrics and it saves those scaled by the size. So it gets, say, the ascent per unit size. Later, when GetHeight is called, those are multiplied by the corresponding size.\n\nx_ppem is the size of the EM box, which is kind of a design grid. Glyphs are free to draw out of that box, not sure if that\u0027s the same for bitmap only fonts, though.",
      "parentUuid": "8d6be2da_647c0a6a",
      "revId": "2d13f91d7a9d5f86f6e31ebad9bd5cd464d7f8e8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0706d071_e0d3b96d",
        "filename": "src/servers/app/ServerFont.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1097,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-07-05T06:56:55Z",
      "side": 1,
      "message": "Either the function should check if fBounds is already calculated:\n\n    if (fBounds.IsValid())\n        return fBounds;\n\nin that case, every function that may change the bounds (SetSize, SetFamily, ...) should invalidate fBounds. Then, the first call to fBounds does the computation, and the next calls don\u0027t need to do anything.\n\nOr, if that\u0027s not needed (the computation is fast enough), then fBounds should not be a class member, just a local variable in this function.",
      "revId": "2d13f91d7a9d5f86f6e31ebad9bd5cd464d7f8e8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c4889148_4e730d26",
        "filename": "src/servers/app/ServerFont.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1097,
      "author": {
        "id": 1000217
      },
      "writtenOn": "2022-07-06T05:48:05Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "0706d071_e0d3b96d",
      "revId": "2d13f91d7a9d5f86f6e31ebad9bd5cd464d7f8e8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6923ccf_4564121c",
        "filename": "src/servers/app/ServerFont.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1097,
      "author": {
        "id": 1000223
      },
      "writtenOn": "2022-07-07T16:14:27Z",
      "side": 1,
      "message": "We are always calling SetSize before BoundingBox, so this is useless without checking that the size has really changed before invalidating fBounds. In fact, this is a new ServerFont each time, maybe the bbox should be calculated in FontStyle and just scaled in ServerFont?",
      "parentUuid": "c4889148_4e730d26",
      "revId": "2d13f91d7a9d5f86f6e31ebad9bd5cd464d7f8e8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f8e115f2_e04d9b0c",
        "filename": "src/servers/app/ServerFont.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1097,
      "author": {
        "id": 1000217
      },
      "writtenOn": "2022-07-10T06:08:29Z",
      "side": 1,
      "message": "When using BFont::BoundingBox then we are always setting the size before calling this method, but I didn\u0027t know if there\u0027d ever be an internal use of the function where that can\u0027t be assumed.  If not then it\u0027s true that it\u0027s not useful.\n\nWe really shouldn\u0027t be scaling bitmap fonts in my opinion.",
      "parentUuid": "e6923ccf_4564121c",
      "revId": "2d13f91d7a9d5f86f6e31ebad9bd5cd464d7f8e8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}