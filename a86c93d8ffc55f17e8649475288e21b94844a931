{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "cc21d115_f6d0319f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2023-04-19T19:34:05Z",
      "side": 1,
      "message": "about testing it\u0027s easy to check the advertised window with tcpdump.",
      "revId": "a86c93d8ffc55f17e8649475288e21b94844a931",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f1c14ba8_53f74dd6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-12-31T16:37:21Z",
      "side": 1,
      "message": "hrev57492 fixed several other problems with TCP. Is it time to revisit this patch? It should be easier to investigate now.",
      "revId": "a86c93d8ffc55f17e8649475288e21b94844a931",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "031bbbea_7f485658",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-12-31T20:45:50Z",
      "side": 1,
      "message": "Not just yet, I think. The entire state machine logic could really use a bunch of rework before we fully activate window scaling. I plan to do some of that, at least, and maybe fix some of our SACK usage to increase efficiency even without window scaling.\n\nAlso we currently clamp the window to 32k no matter what. We can at least double that to 64k, I think, even without this patch.",
      "parentUuid": "f1c14ba8_53f74dd6",
      "revId": "a86c93d8ffc55f17e8649475288e21b94844a931",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1173b2f7_8bb0c011",
        "filename": "src/add-ons/kernel/network/protocols/tcp/TCPEndpoint.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1383,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2023-04-19T18:11:46Z",
      "side": 1,
      "message": "Why \u0027\u003c\u003c 5\u0027? Is the intention to wait for about 32 round trips to change the receive buffer size? But why this number, and why enlarge the receive buffer to include all that has been received in this time frame?\n\nI must admit that I have forgotten pretty much everything about TCP in the mean time, but wouldn\u0027t it make more sense to start with a quite large receive window, and then change its size (in both directions)?",
      "revId": "a86c93d8ffc55f17e8649475288e21b94844a931",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a91ea47b_4d09b9b4",
        "filename": "src/add-ons/kernel/network/protocols/tcp/TCPEndpoint.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1383,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2023-04-19T19:34:05Z",
      "side": 1,
      "message": "well we need to receive enough data to estimate the opportunity of incrementing the window. I tried with \u003c\u003c3 and \u003c\u003c4 in my tests with wget but the received count wasn\u0027t high enough to trigger the scaling up in _UpdateReceiveBuffer(). Empirical evidence indeed, but even with a larger window, looks like the other problems are still limiting the speed.\n\nabout starting with a larger window, other OSes start with about the same window as Haiku.",
      "parentUuid": "1173b2f7_8bb0c011",
      "revId": "a86c93d8ffc55f17e8649475288e21b94844a931",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3113f36_2c81bf51",
        "filename": "src/add-ons/kernel/network/protocols/tcp/TCPEndpoint.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1383,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2024-07-31T18:09:05Z",
      "side": 1,
      "message": "I wonder what the reason is to start with a small receive window? It doesn\u0027t take up any more memory for us, and the send side of the connection should handle all the congestion logic and whatever else based on the ACK/SACK/etc. we send back.\n\nHmm, I guess it would be due to ACK logic. We only send ACKs when we have received at least half the receive window (sooner under unexpected/error conditions.) If we have a receive window that\u0027s much larger than the remote end\u0027s send window, that could cause latency problems I suppose.",
      "parentUuid": "a91ea47b_4d09b9b4",
      "revId": "a86c93d8ffc55f17e8649475288e21b94844a931",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cdcace16_462242a8",
        "filename": "src/add-ons/kernel/network/protocols/tcp/TCPEndpoint.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2326,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2023-04-19T18:11:46Z",
      "side": 1,
      "message": "I\u0027m not sure I understand this logic. What is it doing, and why?",
      "revId": "a86c93d8ffc55f17e8649475288e21b94844a931",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43f2fe90_c53477cb",
        "filename": "src/add-ons/kernel/network/protocols/tcp/TCPEndpoint.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2326,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2023-04-19T19:34:05Z",
      "side": 1,
      "message": "with a default size of 65536, the shift is zero. because 65535 is the maximum value for the window header field, this logic tries to fit a scaled window of 16MB when the initial window is 65536. \nthe shift is often known as scaling factor, and doesn\u0027t change during the session.",
      "parentUuid": "cdcace16_462242a8",
      "revId": "a86c93d8ffc55f17e8649475288e21b94844a931",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f053005_40bdf6dc",
        "filename": "src/add-ons/kernel/network/protocols/tcp/TCPEndpoint.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2326,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2024-01-10T12:35:52Z",
      "side": 1,
      "message": "I ran this code (just these two loops) to generate values for various buffer sizes (from 0 to 1 \u003c\u003c 31) and I\u0027m a bit confused by what I see.\n\nWithout this new code, we get small shifts for small buffer sizes as expected, and then it goes up (quite slowly). Basically it is a log2(buffer_size).\n\nBut with this new code, small buffer sizes (up to a few kilobytes) get a shift in the range of 25 to 10 (decreasing as the packets get larger) and then it slowly goes down, I\u0027d say with some kind of exponential decrease.\n\nI think making the shift smaller as the buffer size gets larger is not what we want here?",
      "parentUuid": "43f2fe90_c53477cb",
      "revId": "a86c93d8ffc55f17e8649475288e21b94844a931",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e042038_abb54840",
        "filename": "src/add-ons/kernel/network/protocols/tcp/TCPEndpoint.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2326,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2024-01-10T13:55:51Z",
      "side": 1,
      "message": "The first loop just makes sure the buffer size can fit within the maximum window size (65536 \u003c\u003c 0), then (65535 \u003c\u003c 1), then (65535 \u003c\u003c 2). It doesn\u0027t make space to scale up the window size. The second loop does this, making sure there is place for increasing the window, until 16MB for a buffer size of 64KB, until 8MB for a buffer size of 32KB, etc.\nFor a buffer size of 64K, this code uses a shift of 8.\nFor a buffer size of 32K, this code uses a shift of 7.\n\nI don\u0027t quite understand what you mean by \"a shift in the range of 25 to 10\". The maximum shift is 14, minimum zero.",
      "parentUuid": "5f053005_40bdf6dc",
      "revId": "a86c93d8ffc55f17e8649475288e21b94844a931",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f1654eb_d8d835b9",
        "filename": "src/add-ons/kernel/network/protocols/tcp/TCPEndpoint.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2326,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2024-01-11T08:05:38Z",
      "side": 1,
      "message": "Ok, I adjusted my test code to limit the shift to 14.\n\nHere is what I see.\n\nBefore this change:\n\nbuffer size -\u003e window shift\n\u003c64K -\u003e 0\n\u003c128K -\u003e 1\n\u003c256K -\u003e 2\n\nand so on, it doubles at every power of two.\n\nWith this change:\n\nFor small buffer sizes, it starts with a shift of 14. It then *decreases* gradually for larger buffer sizes. At 64K we have a shift of 9, at 128K we have 8, at 256K we have 7.\n\nFrom 1MB onwards, there is no effect anymore (we don\u0027t enter the second while loop).\n\nThe fact that the window shift is larger for smaller buffer size values seems counter intuitive to me.\n\nHere is the graph I get (X axis in KiB, blue is the old code, orange is the new code):\n\nhttps://i.ibb.co/M2CxsrM/image.png\n\nThe code used to do this: http://paste.debian.net/1303728/ (then imported the CSV in LibreOffice to graph it)\n\nDid I do something wrong in this test?",
      "parentUuid": "6e042038_abb54840",
      "revId": "a86c93d8ffc55f17e8649475288e21b94844a931",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e835020_fcbe285e",
        "filename": "src/add-ons/kernel/network/protocols/tcp/TCPEndpoint.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2326,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2024-01-11T08:54:00Z",
      "side": 1,
      "message": "Nothing is wrong if the initial buffer size fits in the min/max of the window. Does it fit? Being able to scale up to 16MB was the plan. Maybe it\u0027s off for smaller buffers, 4K should be maximum shift 12:\n``\n\u0026\u0026 (socket-\u003ereceive.buffer_size \u003c\u003c fReceiveWindowShift \u003e 0)\n``",
      "parentUuid": "6f1654eb_d8d835b9",
      "revId": "a86c93d8ffc55f17e8649475288e21b94844a931",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0aa09c75_536a8288",
        "filename": "src/add-ons/kernel/network/protocols/tcp/TCPEndpoint.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2326,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2024-01-11T12:00:26Z",
      "side": 1,
      "message": "If all you need is ensuring the window size can scale up to 16MB, why not use something like this:\n\n    if (fReceiveWindowShift \u003c 8)\n        fReceiveWindowShift \u003d 8;\n        \nOr even simpler, initialize it to 8 before the first loop. Then it is always between 8 and 14, and there are no strange effects for very low buffer_size.\n\nFrom my test, the proposed code will use larger shifts for small buffer_size values, and then go down to a shift of 5, which would not allow 16MB but only 2MB. I don\u0027t understand if this is intentional, and neither why it would be better than just setting the window shift to 8.",
      "parentUuid": "2e835020_fcbe285e",
      "revId": "a86c93d8ffc55f17e8649475288e21b94844a931",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e662a23c_e830cb8e",
        "filename": "src/add-ons/kernel/network/protocols/tcp/TCPEndpoint.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2326,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2024-01-11T14:48:01Z",
      "side": 1,
      "message": "At the moment I don\u0027t see any inconvenient, makes things easier to understand indeed.",
      "parentUuid": "0aa09c75_536a8288",
      "revId": "a86c93d8ffc55f17e8649475288e21b94844a931",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}