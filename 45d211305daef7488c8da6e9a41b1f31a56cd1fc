{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "feb7d892_713f096f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2024-02-27T19:41:09Z",
      "side": 1,
      "message": "Do you already have tools for generating such resources? What\u0027s the plan? Modify xres to edit the ELF file? Add them at link time with a special linker script?\n\n(just curious about it, not really a complaint about the patch :) )",
      "revId": "45d211305daef7488c8da6e9a41b1f31a56cd1fc",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0cd3100_e8322b75",
        "filename": "headers/build/os/kernel/elf.h",
        "patchSetId": 1
      },
      "lineNbr": 339,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2024-02-27T19:41:09Z",
      "side": 1,
      "message": "Can you document how this value was chosen? I see it is in the 0x60000000 range which is operating system specific, but we reuse some values from Linux Standard Base, for example:\n\nhttps://refspecs.linuxfoundation.org/LSB_1.3.0/gLSB/gLSB/progheader.html\nhttps://llvm.org/doxygen/BinaryFormat_2ELF_8h_source.html\n\nHow do we make sure our values doesn\u0027t conflict with someone else? Is there some standard authority for these? (I couldn\u0027t find anything after a quick look, and I guess that makes sense since it is OS specific, but maybe we can at least tell LLVM and GCC devs about it?)",
      "revId": "45d211305daef7488c8da6e9a41b1f31a56cd1fc",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "849a47ac_6f4a43e8",
        "filename": "headers/build/os/kernel/elf.h",
        "patchSetId": 1
      },
      "lineNbr": 339,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2024-02-27T23:04:17Z",
      "side": 1,
      "message": "GNU extensions use \"GNU\" signature, so I used \"HKU\" signature for Haiku resources program header entry (0x60000000 + (\u0027HKU\u0027 \u003c\u003c 4) + 0).",
      "parentUuid": "c0cd3100_e8322b75",
      "revId": "45d211305daef7488c8da6e9a41b1f31a56cd1fc",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0dc6d3fc_e7a1486c",
        "filename": "src/kits/storage/ResourceFile.cpp",
        "patchSetId": 1
      },
      "lineNbr": 591,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2024-02-27T06:32:30Z",
      "side": 1,
      "message": "OffsetFile should be extended to limit access to the segment, because I assume the segment can be anywhere in the file, not just at the end.",
      "revId": "45d211305daef7488c8da6e9a41b1f31a56cd1fc",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}