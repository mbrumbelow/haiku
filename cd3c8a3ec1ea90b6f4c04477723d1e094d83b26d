{
  "comments": [
    {
      "key": {
        "uuid": "7b225461_b2a17890",
        "filename": "headers/os/kernel/OS.h",
        "patchSetId": 8
      },
      "lineNbr": 541,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2021-06-19T14:32:32Z",
      "side": 1,
      "message": "I know this is an internal name, but couldn\u0027t we drop the _etc postfix and just go for _get_cpu_info? This symbol should not clash with the existing get_cpu_info symbol.\n\nI think the _etc postfix is generally used when there is a basic function, and one that takes more parameters (mostly adding a timeout to an otherwise blocking call).",
      "revId": "cd3c8a3ec1ea90b6f4c04477723d1e094d83b26d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b41b2593_8d13d7b5",
        "filename": "src/system/kernel/system_info.cpp",
        "patchSetId": 8
      },
      "lineNbr": 513,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2021-06-19T14:32:32Z",
      "side": 1,
      "message": "Where is the backward compatible get_cpu_info() symbol going?",
      "revId": "cd3c8a3ec1ea90b6f4c04477723d1e094d83b26d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0b61b85_53d2c325",
        "filename": "src/system/kernel/system_info.cpp",
        "patchSetId": 8
      },
      "lineNbr": 513,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2021-06-19T14:49:36Z",
      "side": 1,
      "message": "it can\u0027t be defined because the name get_cpu_info is now a macro in the kernel too.",
      "parentUuid": "b41b2593_8d13d7b5",
      "revId": "cd3c8a3ec1ea90b6f4c04477723d1e094d83b26d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be92cc47_ff254c55",
        "filename": "src/system/kernel/system_info.cpp",
        "patchSetId": 8
      },
      "lineNbr": 513,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2021-06-19T15:05:38Z",
      "side": 1,
      "message": "My bad, I did not realize this was in the kernel.\n\nThe code here can still be simplified more and shared with the __get_cpu_info above.\n\npseudocode (so untested!):\nminsize \u003d sizeof(cpu_info - offsetoff(cpu_info, frequency));\n\nif ((size \u003c minsize) || (size \u003e sizeof(cpu_info))\n    return B_BAD_VALUE;\n\nmemset(info, size*cpuCount);\n\nfor (uint32 i \u003d 0; i \u003c count; i++) {\n    info[i].active_time \u003d cpu_get_active_time(firstCPU + i);\n    info[i].enabled \u003d !gCPU[firstCPU + i].disabled;\n\n    if (size \u003e minsize)\n       info[i].current_frequency \u003d cpu_frequency(i);\n}",
      "parentUuid": "b0b61b85_53d2c325",
      "revId": "cd3c8a3ec1ea90b6f4c04477723d1e094d83b26d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "762c4af5_988620e4",
        "filename": "src/system/kernel/system_info.cpp",
        "patchSetId": 8
      },
      "lineNbr": 513,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2021-11-19T12:55:53Z",
      "side": 1,
      "message": "I\u0027m not convinced, the cpu_info struct size and the offset in the array are different for both calls.",
      "parentUuid": "be92cc47_ff254c55",
      "revId": "cd3c8a3ec1ea90b6f4c04477723d1e094d83b26d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0be703b2_5fe72e36",
        "filename": "src/system/kernel/system_info.cpp",
        "patchSetId": 8
      },
      "lineNbr": 598,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2021-06-19T15:05:51Z",
      "side": 1,
      "message": "`size` argument should be added to syscall. Syscalls are not part of public API so changing it is fine.",
      "revId": "cd3c8a3ec1ea90b6f4c04477723d1e094d83b26d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b4f143e_8c989444",
        "filename": "src/system/kernel/system_info.cpp",
        "patchSetId": 8
      },
      "lineNbr": 598,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2021-11-19T12:55:53Z",
      "side": 1,
      "message": "why add the \u0027size\u0027 argument then?",
      "parentUuid": "0be703b2_5fe72e36",
      "revId": "cd3c8a3ec1ea90b6f4c04477723d1e094d83b26d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "274607d2_94d5bf17",
        "filename": "src/system/kernel/system_info.cpp",
        "patchSetId": 8
      },
      "lineNbr": 598,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2021-11-20T13:03:42Z",
      "side": 1,
      "message": "it makes it easier to add fields to the structure later on. Kernel can detect that the size is different and handle older versions of the structure this way in case you run an old userland on a new kernel.\n\nHowever, our main use case for this currently is haikuports builders, which are running a newer userland on top of an older kernel. And in that case the kernel would just reply with \"I don\u0027t understand what you\u0027re trying to do\" so there is little point in doing it.",
      "parentUuid": "8b4f143e_8c989444",
      "revId": "cd3c8a3ec1ea90b6f4c04477723d1e094d83b26d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dca4dda7_4cc0aac5",
        "filename": "src/system/libroot/os/system_info.cpp",
        "patchSetId": 8
      },
      "lineNbr": 156,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2021-06-19T15:05:38Z",
      "side": 1,
      "message": "This can be simplified:\n\npseudo-code:\nstatus_t\nget_cpu_info(...)\n{ \n   return _get_cpu_info(..., sizeof(cpu_info - offsetof(cpu_info, frequency));\n}",
      "revId": "cd3c8a3ec1ea90b6f4c04477723d1e094d83b26d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "adf2440f_802144d6",
        "filename": "src/system/libroot/os/system_info.cpp",
        "patchSetId": 8
      },
      "lineNbr": 156,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2021-11-12T12:03:13Z",
      "side": 1,
      "message": "I don\u0027t find offsetof hacks really simpler than the current implementation. It also makes things more likely to break if the new structure is changed again later and diverges further from this one, where this code would either still work, or have a compile error.\n\nAlso, padding and packing may make the use of offsetof problematic:\nThe old structure has a bigtime_t (8 bytes) and a bool. It will probably be padded to a total of 12 bytes (with 3 padding bytes after the bool).\nIn the new structure, the frequency could be aligned to 8 bytes since it is a 64bit values, resulting in 4 extra padding bytes after the bool.\n\nIn that case, your computation is incorrect.",
      "parentUuid": "dca4dda7_4cc0aac5",
      "revId": "cd3c8a3ec1ea90b6f4c04477723d1e094d83b26d",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    }
  ]
}