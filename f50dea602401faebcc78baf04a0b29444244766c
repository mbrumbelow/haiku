{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c32f4670_3aa1dc62",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-05-31T01:18:27Z",
      "side": 1,
      "message": "Please add the failing tests in the same commit.",
      "revId": "f50dea602401faebcc78baf04a0b29444244766c",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa5a7382_da7f7973",
        "filename": "src/system/kernel/vm/vm.cpp",
        "patchSetId": 1
      },
      "lineNbr": 680,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-05-31T01:18:08Z",
      "side": 1,
      "message": "const",
      "revId": "f50dea602401faebcc78baf04a0b29444244766c",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de4ac527_e6e753c5",
        "filename": "src/system/kernel/vm/vm.cpp",
        "patchSetId": 1
      },
      "lineNbr": 695,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-05-31T01:18:08Z",
      "side": 1,
      "message": "What\u0027s up with this (and the same in the other B_NO_MEMORY returns)? Shouldn\u0027t it be expanding the area back to the oldSize, not \"Shrink\"\u0027ing it?\n\nPerhaps the allocation should be done first? That\u0027s easier to \"undo\".",
      "revId": "f50dea602401faebcc78baf04a0b29444244766c",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a87e835_18d7818e",
        "filename": "src/system/kernel/vm/vm.cpp",
        "patchSetId": 1
      },
      "lineNbr": 695,
      "author": {
        "id": 1000391
      },
      "writtenOn": "2023-05-31T01:51:32Z",
      "side": 1,
      "message": "https://github.com/haiku/haiku/blob/ca40d4ab5c35ad8f0280d9cbfba189fb3566e8a7/src/system/kernel/vm/vm.cpp#L752\n\nI don\u0027t know, but this is the technique used in existing code to undo the changes on failure.",
      "parentUuid": "de4ac527_e6e753c5",
      "revId": "f50dea602401faebcc78baf04a0b29444244766c",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4cc35217_78718421",
        "filename": "src/system/kernel/vm/vm.cpp",
        "patchSetId": 1
      },
      "lineNbr": 695,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-05-31T01:55:03Z",
      "side": 1,
      "message": "OK.",
      "parentUuid": "8a87e835_18d7818e",
      "revId": "f50dea602401faebcc78baf04a0b29444244766c",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77d65e26_926c4227",
        "filename": "src/system/kernel/vm/vm.cpp",
        "patchSetId": 1
      },
      "lineNbr": 887,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-05-31T01:21:21Z",
      "side": 1,
      "message": "It may make sense at this point to create a small class which handles page_protections, including allocation and shifting, which will reduce code duplication here and elsewhere.",
      "revId": "f50dea602401faebcc78baf04a0b29444244766c",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ebfdfec_8b46853a",
        "filename": "src/system/kernel/vm/vm.cpp",
        "patchSetId": 1
      },
      "lineNbr": 887,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-05-31T01:55:03Z",
      "side": 1,
      "message": "Hmm, that may lead to difficulties with assignment/copy operators. Likely makes sense to have a class with utility functions at least to reduce some of the duplication.",
      "parentUuid": "77d65e26_926c4227",
      "revId": "f50dea602401faebcc78baf04a0b29444244766c",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6cfb278a_415b76cc",
        "filename": "src/system/kernel/vm/vm.cpp",
        "patchSetId": 1
      },
      "lineNbr": 925,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-05-31T01:19:56Z",
      "side": 1,
      "message": "How similar is this block to ones in the mprotect implementation? Should we try and factor it out?",
      "range": {
        "startLine": 908,
        "startChar": 1,
        "endLine": 925,
        "endChar": 3
      },
      "revId": "f50dea602401faebcc78baf04a0b29444244766c",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "111b5a1c_fb900852",
        "filename": "src/system/kernel/vm/vm.cpp",
        "patchSetId": 1
      },
      "lineNbr": 925,
      "author": {
        "id": 1000391
      },
      "writtenOn": "2023-05-31T01:51:32Z",
      "side": 1,
      "message": "It is very different, `mprotect` (and `set_area_protection`) sets everything to the same protection, while this block queries the existing page protection array.",
      "parentUuid": "6cfb278a_415b76cc",
      "range": {
        "startLine": 908,
        "startChar": 1,
        "endLine": 925,
        "endChar": 3
      },
      "revId": "f50dea602401faebcc78baf04a0b29444244766c",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}