{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c32f4670_3aa1dc62",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-05-31T01:18:27Z",
      "side": 1,
      "message": "Please add the failing tests in the same commit.",
      "revId": "f50dea602401faebcc78baf04a0b29444244766c",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7ac7d778_c9f0ba5d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000391
      },
      "writtenOn": "2023-05-31T07:30:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c32f4670_3aa1dc62",
      "revId": "f50dea602401faebcc78baf04a0b29444244766c",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa5a7382_da7f7973",
        "filename": "src/system/kernel/vm/vm.cpp",
        "patchSetId": 1
      },
      "lineNbr": 680,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-05-31T01:18:08Z",
      "side": 1,
      "message": "const",
      "revId": "f50dea602401faebcc78baf04a0b29444244766c",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fd964892_ce1fedca",
        "filename": "src/system/kernel/vm/vm.cpp",
        "patchSetId": 1
      },
      "lineNbr": 680,
      "author": {
        "id": 1000391
      },
      "writtenOn": "2023-05-31T07:30:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aa5a7382_da7f7973",
      "revId": "f50dea602401faebcc78baf04a0b29444244766c",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de4ac527_e6e753c5",
        "filename": "src/system/kernel/vm/vm.cpp",
        "patchSetId": 1
      },
      "lineNbr": 695,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-05-31T01:18:08Z",
      "side": 1,
      "message": "What\u0027s up with this (and the same in the other B_NO_MEMORY returns)? Shouldn\u0027t it be expanding the area back to the oldSize, not \"Shrink\"\u0027ing it?\n\nPerhaps the allocation should be done first? That\u0027s easier to \"undo\".",
      "revId": "f50dea602401faebcc78baf04a0b29444244766c",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a87e835_18d7818e",
        "filename": "src/system/kernel/vm/vm.cpp",
        "patchSetId": 1
      },
      "lineNbr": 695,
      "author": {
        "id": 1000391
      },
      "writtenOn": "2023-05-31T01:51:32Z",
      "side": 1,
      "message": "https://github.com/haiku/haiku/blob/ca40d4ab5c35ad8f0280d9cbfba189fb3566e8a7/src/system/kernel/vm/vm.cpp#L752\n\nI don\u0027t know, but this is the technique used in existing code to undo the changes on failure.",
      "parentUuid": "de4ac527_e6e753c5",
      "revId": "f50dea602401faebcc78baf04a0b29444244766c",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4cc35217_78718421",
        "filename": "src/system/kernel/vm/vm.cpp",
        "patchSetId": 1
      },
      "lineNbr": 695,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-05-31T01:55:03Z",
      "side": 1,
      "message": "OK.",
      "parentUuid": "8a87e835_18d7818e",
      "revId": "f50dea602401faebcc78baf04a0b29444244766c",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77d65e26_926c4227",
        "filename": "src/system/kernel/vm/vm.cpp",
        "patchSetId": 1
      },
      "lineNbr": 887,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-05-31T01:21:21Z",
      "side": 1,
      "message": "It may make sense at this point to create a small class which handles page_protections, including allocation and shifting, which will reduce code duplication here and elsewhere.",
      "revId": "f50dea602401faebcc78baf04a0b29444244766c",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ebfdfec_8b46853a",
        "filename": "src/system/kernel/vm/vm.cpp",
        "patchSetId": 1
      },
      "lineNbr": 887,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-05-31T01:55:03Z",
      "side": 1,
      "message": "Hmm, that may lead to difficulties with assignment/copy operators. Likely makes sense to have a class with utility functions at least to reduce some of the duplication.",
      "parentUuid": "77d65e26_926c4227",
      "revId": "f50dea602401faebcc78baf04a0b29444244766c",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa045392_18c3f26e",
        "filename": "src/system/kernel/vm/vm.cpp",
        "patchSetId": 1
      },
      "lineNbr": 887,
      "author": {
        "id": 1000391
      },
      "writtenOn": "2023-05-31T02:56:31Z",
      "side": 1,
      "message": "If that\u0027s the case, wouldn\u0027t a few static functions make more sense?",
      "parentUuid": "7ebfdfec_8b46853a",
      "revId": "f50dea602401faebcc78baf04a0b29444244766c",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15995847_d3706a80",
        "filename": "src/system/kernel/vm/vm.cpp",
        "patchSetId": 1
      },
      "lineNbr": 887,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-05-31T03:01:11Z",
      "side": 1,
      "message": "yes.",
      "parentUuid": "aa045392_18c3f26e",
      "revId": "f50dea602401faebcc78baf04a0b29444244766c",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9c09d61_5a8f0f29",
        "filename": "src/system/kernel/vm/vm.cpp",
        "patchSetId": 1
      },
      "lineNbr": 887,
      "author": {
        "id": 1000391
      },
      "writtenOn": "2023-05-31T07:30:11Z",
      "side": 1,
      "message": "It seems hard to unite the allocation and shifting into one function, because for each case a different method is used to ensure that every change is undone on error.\n\nThe first case (shrink tail) uses `realloc` because that is the most obvious way to shrink an array.\n\nThe second case (shrink head) uses `malloc` for the new buffer, shifts the old buffer, copies the remaining part into the new buffer, and then frees the old buffer. Shifting directly in the old buffer might not work because `realloc` may fail, and the shift is irrecoverable.\n\nThe third case (split into two areas) allocates two new buffers before doing complex work. After that, the protections get copied into the first buffer, and then shifted and copied into the second buffer. Finally, the old buffer gets freed.\n\nChanging any of these details makes it hard to implement rollback on error.",
      "parentUuid": "15995847_d3706a80",
      "revId": "f50dea602401faebcc78baf04a0b29444244766c",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "769490e5_074190b6",
        "filename": "src/system/kernel/vm/vm.cpp",
        "patchSetId": 1
      },
      "lineNbr": 887,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-05-31T16:42:18Z",
      "side": 1,
      "message": "At least you can make a utility function to allocate/reallocate with the size-rounding calculation.\n\nAlso note that (1) realloc(NULL) is perfectly legal and will behave like malloc, and (2) when realloc fails, the old memory has not been freed. I think using these two facts you can merge the first and second cases into one, maybe?",
      "parentUuid": "e9c09d61_5a8f0f29",
      "revId": "f50dea602401faebcc78baf04a0b29444244766c",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6cfb278a_415b76cc",
        "filename": "src/system/kernel/vm/vm.cpp",
        "patchSetId": 1
      },
      "lineNbr": 925,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-05-31T01:19:56Z",
      "side": 1,
      "message": "How similar is this block to ones in the mprotect implementation? Should we try and factor it out?",
      "range": {
        "startLine": 908,
        "startChar": 1,
        "endLine": 925,
        "endChar": 3
      },
      "revId": "f50dea602401faebcc78baf04a0b29444244766c",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "111b5a1c_fb900852",
        "filename": "src/system/kernel/vm/vm.cpp",
        "patchSetId": 1
      },
      "lineNbr": 925,
      "author": {
        "id": 1000391
      },
      "writtenOn": "2023-05-31T01:51:32Z",
      "side": 1,
      "message": "It is very different, `mprotect` (and `set_area_protection`) sets everything to the same protection, while this block queries the existing page protection array.",
      "parentUuid": "6cfb278a_415b76cc",
      "range": {
        "startLine": 908,
        "startChar": 1,
        "endLine": 925,
        "endChar": 3
      },
      "revId": "f50dea602401faebcc78baf04a0b29444244766c",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}