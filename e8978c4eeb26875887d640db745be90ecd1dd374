{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7a18b612_53fb9184",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000372
      },
      "writtenOn": "2022-09-06T08:11:33Z",
      "side": 1,
      "message": "One more stuff, linux-xfs developers changed structure of Node Attributes even further. \n(Previously it was covered under B+Tree) \n\nlike now it is something like this:\n NodeBuffer0-\u003e NodeBuffer01 -\u003e LeafBuffer1 -\u003e Attr1\n                                           -\u003e Attr2\n                                           -\u003e Attr3....\n           \n                            -\u003e LeafBuffer2 -\u003e Attr1\n                                           -\u003e Attr2...\n\n            -\u003e NodeBuffer02 -\u003e LeafBuffer1 -\u003e Attr1\n                                           -\u003e Attr2\n                                           -\u003e Attr3....\n           \n                            -\u003e LeafBuffer2 -\u003e Attr1\n                                           -\u003e Attr2...\n\nNodeBuffer1-\u003e\n             and so on.....\n\nSo something like Triple pointer...\n\nI can Make Lookup() efficient here by just traversing all the levels of Node buffer, but any Idea to make GetNext() function here?\n\nSomething like this was previously handled in B+Tree but I guess they changed it to Node to be more efficient.\n",
      "revId": "e8978c4eeb26875887d640db745be90ecd1dd374",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33c9535c_eca1cad0",
        "filename": "src/add-ons/kernel/file_systems/xfs/NodeAttribute.cpp",
        "patchSetId": 3
      },
      "lineNbr": 251,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-09-11T08:42:28Z",
      "side": 1,
      "message": "nEntry or nodeEntry (variable names should start with lowercase)",
      "revId": "e8978c4eeb26875887d640db745be90ecd1dd374",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d326e02_4ed03125",
        "filename": "src/add-ons/kernel/file_systems/xfs/NodeAttribute.cpp",
        "patchSetId": 3
      },
      "lineNbr": 253,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-09-11T08:42:28Z",
      "side": 1,
      "message": "totalNodeEntries",
      "revId": "e8978c4eeb26875887d640db745be90ecd1dd374",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43974ae3_989e2a10",
        "filename": "src/add-ons/kernel/file_systems/xfs/NodeAttribute.cpp",
        "patchSetId": 3
      },
      "lineNbr": 258,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-09-11T08:42:28Z",
      "side": 1,
      "message": "this looks like it is doing useless iteration\n\nwhy not start directly from the right place, for example:\n\n    NodeEntry* baseEntry \u003d (NodeEntry*)(fNodeBuffer + SizeOfNodeHeader(fInode));\n    for (int i \u003d fLastNodeOffset; i \u003c totalNodeEntries; i++) {\n        nEntry \u003d baseEntry + i; // or \u0026baseEntry[i] if you prefer\n        ...\n    }\n\nProbably i can be removed and the loop can be made directly using fLastNodeOffset, even:\n\n    for (; fLastNodeOffset \u003c totalNodeEntries; fLastNodeOffset++) {\n        ...\n    }",
      "revId": "e8978c4eeb26875887d640db745be90ecd1dd374",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e28cd97e_949d3e14",
        "filename": "src/add-ons/kernel/file_systems/xfs/NodeAttribute.cpp",
        "patchSetId": 3
      },
      "lineNbr": 270,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2022-10-04T05:14:30Z",
      "side": 1,
      "message": "LogicalBlock \u003d\u003e logicalBlock",
      "revId": "e8978c4eeb26875887d640db745be90ecd1dd374",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04ed898d_29b63070",
        "filename": "src/add-ons/kernel/file_systems/xfs/NodeAttribute.cpp",
        "patchSetId": 3
      },
      "lineNbr": 276,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-09-11T08:42:28Z",
      "side": 1,
      "message": "missing space after ,",
      "revId": "e8978c4eeb26875887d640db745be90ecd1dd374",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fdaf48f5_9586b168",
        "filename": "src/add-ons/kernel/file_systems/xfs/NodeAttribute.cpp",
        "patchSetId": 3
      },
      "lineNbr": 279,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2022-10-04T05:14:30Z",
      "side": 1,
      "message": "TotalEntries \u003d\u003e totalEntries",
      "revId": "e8978c4eeb26875887d640db745be90ecd1dd374",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}