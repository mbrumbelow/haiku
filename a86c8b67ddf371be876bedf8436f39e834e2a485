{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d17394ed_b714bab0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2023-04-20T14:09:36Z",
      "side": 1,
      "message": "My apologies if I overstepped my bounds here. I renamed method to ShouldDraw() and reversed the logic, otherwise it is the same as before.",
      "revId": "a86c8b67ddf371be876bedf8436f39e834e2a485",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d753ca79_6bf2797e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2023-04-20T14:25:10Z",
      "side": 1,
      "message": "Looks to me like you pushed only the change to the header?",
      "parentUuid": "d17394ed_b714bab0",
      "revId": "a86c8b67ddf371be876bedf8436f39e834e2a485",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3102f8c_cf241bf2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2023-04-20T14:28:29Z",
      "side": 1,
      "message": "I forgot to include the header change in PS4 and updated it in PS5, build-bot may complain.",
      "parentUuid": "d753ca79_6bf2797e",
      "revId": "a86c8b67ddf371be876bedf8436f39e834e2a485",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8bf6ee35_22f25540",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2023-04-20T14:33:25Z",
      "side": 1,
      "message": "Ah okay, gerrit decided to hide the change to upload change 4 for some reason.",
      "parentUuid": "d3102f8c_cf241bf2",
      "revId": "a86c8b67ddf371be876bedf8436f39e834e2a485",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fa48d846_17978271",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2023-04-20T15:16:04Z",
      "side": 1,
      "message": "no complaints from buildbot, yay",
      "parentUuid": "8bf6ee35_22f25540",
      "revId": "a86c8b67ddf371be876bedf8436f39e834e2a485",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68ae07b1_bdaa0475",
        "filename": "src/kits/interface/ControlLook.cpp",
        "patchSetId": 5
      },
      "lineNbr": 77,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-04-20T15:50:56Z",
      "side": 1,
      "message": "How expensive is this function? We are now going to be invoking it every time a redraw occurs. Did you benchmark the drawing routines before/after this change?",
      "revId": "a86c8b67ddf371be876bedf8436f39e834e2a485",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82a49a86_1d725354",
        "filename": "src/kits/interface/ControlLook.cpp",
        "patchSetId": 5
      },
      "lineNbr": 77,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-04-21T13:17:41Z",
      "side": 1,
      "message": "Let\u0027s make things correct before we make them fast?\n\nA possible optimization is completely removing this check if sending the drawing commands ends up being cheaper than the testing. We can experiment with that once this is merged.\n\nBut if the decision is between the code before this change (fast but broken) and this new code (correct but possibly a little slower) there is really no question?",
      "parentUuid": "68ae07b1_bdaa0475",
      "revId": "a86c8b67ddf371be876bedf8436f39e834e2a485",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5a7437a_03a34d82",
        "filename": "src/kits/interface/ControlLook.cpp",
        "patchSetId": 5
      },
      "lineNbr": 77,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-04-21T15:01:58Z",
      "side": 1,
      "message": "I would just prefer to see some basic benchmarks done using system_time, so we have an idea. I can do that myself later today, I suppose.",
      "parentUuid": "82a49a86_1d725354",
      "revId": "a86c8b67ddf371be876bedf8436f39e834e2a485",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c3073f3_eb6fd35c",
        "filename": "src/kits/interface/ControlLook.cpp",
        "patchSetId": 5
      },
      "lineNbr": 77,
      "author": {
        "id": 1000223
      },
      "writtenOn": "2023-04-22T17:59:38Z",
      "side": 1,
      "message": "You are right, I should have gotten those numbers, considering I knew the previous check was free compared to drawing operations and this one includes at least a server roundtrip most times. I quite often get focused on one specific detail and forget about everything else.\n\nI have produced some counters for the check condition, will try to get time numbers later. I\u0027ve used LookTest (https://git.haiku-os.org/haiku/tree/src/tests/kits/interface/look) for some synthetic tests.\n\nMoving a small window over its top area we get 10% of invalid rects (this is the only case where this is significant), the other 90% of calls always ask for drawing. When we hit the scrollbars, though, the hit test avoids having to draw 64% of the times. 42% in the buttons area and then no savings for the sliders.\n\nWhen another window is shown completely covering the test app and then hidden again, hit testing is useless and saves nothing.\n\nPressing the tab key so that focus changes between controls gives us 23% fast exit. And list scrolling 27%.\n\nBut then I went with real use and WebPositive produced almost no fast exits, as did Deskbar (which is by a big difference the one hitting this code the most), DeskCalc and ActivityMonitor. MediaPlayer got 6%. HaikuDepot went with 12%. Pe, depending on activity, gave about 27%, I wonder if that was also the scrollbars.\n\nSo I don\u0027t know. Maybe I should not even try to time it. After all, I think Interface Kit controls are their own views and you don\u0027t scale, change origin or transform them, or do you? In that case, they know the drawing and update rects are in the same coordinate system and can do their own cheap hit testing if needed.",
      "parentUuid": "b5a7437a_03a34d82",
      "revId": "a86c8b67ddf371be876bedf8436f39e834e2a485",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57728c38_8bc088d2",
        "filename": "src/kits/interface/ControlLook.cpp",
        "patchSetId": 5
      },
      "lineNbr": 77,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-04-22T19:57:03Z",
      "side": 1,
      "message": "Honestly it should be pretty simple to add a \"static bigtime_t\" to TransformTo and use atomic_add to increment it, then print the cumulative time spent in it. I\u0027m not so concerned about what is a fast-exit and what isn\u0027t...",
      "parentUuid": "3c3073f3_eb6fd35c",
      "revId": "a86c8b67ddf371be876bedf8436f39e834e2a485",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cebedc3_552ef08e",
        "filename": "src/kits/interface/ControlLook.cpp",
        "patchSetId": 5
      },
      "lineNbr": 77,
      "author": {
        "id": 1000223
      },
      "writtenOn": "2023-04-23T10:34:32Z",
      "side": 1,
      "message": "It is simple indeed: min 0, max 316, avg 26.24 after more than 50K calls in the ControlLook method in a 12-core Intel i5-10400 @ 2.90 GHz.\n\nBut isn\u0027t the important thing how much it saves or adds globally, not how much it costs by itself? It may be very fast, but if it is not discriminating it\u0027s all waste. Or it may be slow but if it avoids running slower stuff it\u0027d still be worth the cost.",
      "parentUuid": "57728c38_8bc088d2",
      "revId": "a86c8b67ddf371be876bedf8436f39e834e2a485",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1909909_54b8e418",
        "filename": "src/kits/interface/ControlLook.cpp",
        "patchSetId": 5
      },
      "lineNbr": 77,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-04-23T13:17:15Z",
      "side": 1,
      "message": "316 microseconds is not bad at all, even across 50k calls that\u0027s only 15ms, or about 1 frame\u0027s worth of time.\n\nI guess if you want to look at more, you can, but I\u0027m satisfied.",
      "parentUuid": "8cebedc3_552ef08e",
      "revId": "a86c8b67ddf371be876bedf8436f39e834e2a485",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}