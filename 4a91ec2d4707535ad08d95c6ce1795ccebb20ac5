{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f7c605d0_ecb7ae0f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2022-07-22T09:44:11Z",
      "side": 1,
      "message": "this breaks users of get_cpu_topology_info().",
      "revId": "4a91ec2d4707535ad08d95c6ce1795ccebb20ac5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9fd5275e_d8257de0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-07-23T00:17:09Z",
      "side": 1,
      "message": "This is definitely an api / abi breaking change.   The get_cpu_topology calls are haiku-specific and not BeOS comapt however.\n\nFrom a api standpoint, storing the CPU vendor as a string makes a lot more sense over an arbitrary enum... especially since companies come and go.  (ex: we have Sun Microsystems vendor for SPARC... except Sun Microsystems is no longer a company that exists.  Are we going to keep Sun as a enum forever for api compatibility?\n\nThat\u0027s some of the logic behind this change.  Instead of trying to track every manufacturer of silicon in an enum, we should just use a reasonable sized string.\n\n\"Intel\" is \"Intel\" and can be compared against.  It\u0027s not scientific, but it will stand the test of time better.",
      "parentUuid": "f7c605d0_ecb7ae0f",
      "revId": "4a91ec2d4707535ad08d95c6ce1795ccebb20ac5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4c57f157_567d367e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2022-07-23T00:33:37Z",
      "side": 1,
      "message": "I don\u0027t see that as a good argument. Sun manufactured the CPU, whether they\u0027re still around or not, a string doesn\u0027t \"stand the test of time\" any more than B_CPU_SUN would, except it\u0027s slower to compare against.",
      "parentUuid": "9fd5275e_d8257de0",
      "revId": "4a91ec2d4707535ad08d95c6ce1795ccebb20ac5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f200872_d8aedb4e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-07-23T02:25:51Z",
      "side": 1,
      "message": "So you support adding the following at minimum to the cpu_vendor enum?\n\nB_CPU_VENDOR_ALLWINNER\nB_CPU_VENDOR_SAMSUNG\nB_CPU_VENDOR_SIFIVE\nB_CPU_VENDOR_BROADCOM\nB_CPU_VENDOR_NVIDIA\nB_CPU_VENDOR_ROCKCHIP\nB_CPU_VENDOR_SOLIDRUN\nB_CPU_VENDOR_MEDIATEK\nB_CPU_VENDOR_QUALCOMM\nB_CPU_VENDOR_LSI\nB_CPU_VENDOR_WESTERNDIGITAL\nB_CPU_VENDOR_AMLOGIC",
      "parentUuid": "4c57f157_567d367e",
      "revId": "4a91ec2d4707535ad08d95c6ce1795ccebb20ac5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42a89212_78f3ec14",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-07-23T07:54:17Z",
      "side": 1,
      "message": "We already discussed that for ARM, the CPU vendor is always ARM as they are the one doing the CPU cores, except in the case of Apple who designed their own cores for the M1.\n\nThat\u0027s the info you want here, so then you can dig into deeper details. It is an ARM core design. Is it a Cortex A57? Is it an old ARM926EJS?\n\nWhat you have listed is not CPU vendors but system-on-chip vendors, and that info has nothing to do in the CPU core info struct.\n\nThe situation might be a bit different for RISC-V but there are not that many companies designing CPU cores, at least in the range we can hope to run Haiku on (there are more for smaller embedded devices).",
      "parentUuid": "9f200872_d8aedb4e",
      "revId": "4a91ec2d4707535ad08d95c6ce1795ccebb20ac5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0da79d7d_2ae64b85",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-07-24T01:33:05Z",
      "side": 1,
      "message": "I don\u0027t think it\u0027s that clear cut.  Think about AMD technically licensing Intel\u0027s x86 patents with that argument.  Things rapidly get into a weird gray area under this logic. Agreements between silicon and IP licensees being determinate of the contents of this array makes everything fuzzy and undefined.\n\nThe original intent of these enums were physical manufacturers as multiple historically \"merged\" companies like Cyrix and National Semiconductor in the enum.\n\nI think as an alternative, the enum growing exponentially based on physical chip manufacturers is fine too, however identifying vendors by arbitrary integers (not based on any standard) seems just as random as identifying them by defined strings.\n\nAs for performance concerns about using a string vs an int.  I really don\u0027t think we\u0027re rapidly parsing the cpu vendor over and over.  If we are, we\u0027re doing something wrong.",
      "parentUuid": "42a89212_78f3ec14",
      "revId": "4a91ec2d4707535ad08d95c6ce1795ccebb20ac5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9642b814_78c04990",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2022-07-24T07:50:56Z",
      "side": 1,
      "message": "For me it is very clear cut. Give me any system on chip and I can tell you who designed the CPU core in it. As I said for ARM it is very easy, there is only designs by ARM, licensed by others, and designed by Apple.\n\nFor x86 it is also very clear. Your CPU core is either designed by Intel or designed by AMD. Even if AMD licensed some patents from Intel, you can\u0027t buy an AMD branded Core i5.\n\nFor x86 it is very simple, we have a string in the CPUID (\"GenuineIntel\" or \"AuthenticAMD\" for example) and if there is a new string there, we add a new enty. You can find a list of these here: https://en.wikipedia.org/wiki/CPUID#EAX\u003d0:_Highest_Function_Parameter_and_Manufacturer_ID (and indeed we don\u0027t implement them all, some are obscure enough or never manufactured CPUs that Haiku could run on).\n\nSo, how does it go for ARM? It turns out, we have something even better, because ARM does not use a string like that to define who made the CPU core, it uses a single byte which is defined here: file:///C:/Users/pulkomandy/Downloads/DAI0099C_core_type_rev_id.pdf (\"Implementer bits\" in section 2.1). As of 2003 they had a grand total of... 3. ARM, DEC, and Intel. I suspect now they have added Apple to this list.\n\nSo that\u0027s 3 entries to add to the list and we can\u0027t just make up new ones, it\u0027s defined by the CPU architecture.\n\nOn ARM64 the situation is similar, the register is named MIDR_EL1 and the list of allowed values is here: https://developer.arm.com/documentation/ddi0595/2020-12/AArch64-Registers/MIDR-EL1--Main-ID-Register\n\nThere are 14 values defined here. That\u0027s a bit larger but still manageable, especially as we can probably ignore quite a few of them (DEC won\u0027t build CPUs that Haiku can run on). As you can see, we really don\u0027t need to list every system-on-chip manufacturer, and what can get into this enum is quite well-defined, and in fact, is more limited for ARM (we have a single byte so only 256 possible values) than it is for x86 (where the value is a 16 character string with a lot more possibilities).\n\nWe can also look at RISC-V. How does it work there? There is an \"mvendorid\" register and they use 32-bit manufacturer codes defined by JEDEC (this was decided here: https://github.com/riscv/riscv-isa-manual/issues/32). But we don\u0027t have to list every possible RISC-V manufacturer, only the ones that built CPU cores that Haiku can run on. And it is already a number, so in fact we don\u0027t even need an enum there: we can directly fill this field in the structure with the value from the register.\n\nConclusion: no need to switch to a string in any case.",
      "parentUuid": "0da79d7d_2ae64b85",
      "revId": "4a91ec2d4707535ad08d95c6ce1795ccebb20ac5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}