{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3d816e16_21d638f2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000341
      },
      "writtenOn": "2022-07-29T14:03:36Z",
      "side": 1,
      "message": "patchset v2: remove wip tag and debug code.\n\nI\u0027m still a bit worried about the reserve_io_interrupt_vectors vs riscv64.\narm32: we can get away without any call to reserve_io_interrupt_vectors\narm64: we need to use reserve_io_interrupt_vectors\nriscv64: there\u0027s a hard coded call to reserve_io_interrupt_vectors in arch_int which reserves 128 vectors. If I remove the hard coded call, it still boots up on qemu but that may be only a matter of luck.\n\nadding x512 in cc",
      "revId": "f116a8a05b3f01417d01964eeeadd890d08ef632",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "730b1b89_ad7cbc4b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-08-09T14:58:53Z",
      "side": 1,
      "message": "I\u0027ll take a look.",
      "revId": "f116a8a05b3f01417d01964eeeadd890d08ef632",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45268b4b_fc939a82",
        "filename": "src/add-ons/kernel/busses/virtio/virtio_mmio/Jamfile",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-08-04T09:44:28Z",
      "side": 1,
      "message": "We can\u0027t depend on ACPICA directly, only the ACPI module. So anything we need should be from our headers, not ACPICA. Otherwise we cannot update the ACPI module with newer ACPICA versions.",
      "revId": "f116a8a05b3f01417d01964eeeadd890d08ef632",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc758432_2e7402b4",
        "filename": "src/add-ons/kernel/busses/virtio/virtio_mmio/Jamfile",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1000341
      },
      "writtenOn": "2022-08-04T11:19:35Z",
      "side": 1,
      "message": "ok i\u0027ll take a look... I think I had to use this because of walk_resources() which calls a callback with an acpi_resource* / ACPI_RESOURCE* argument. I couldn\u0027t find a way to unpack acpi_resource using the ACPI module defined in os/drivers/ACPI.h.",
      "parentUuid": "45268b4b_fc939a82",
      "revId": "f116a8a05b3f01417d01964eeeadd890d08ef632",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0a8a27e_80a2e76a",
        "filename": "src/add-ons/kernel/busses/virtio/virtio_mmio/Jamfile",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-08-04T11:42:42Z",
      "side": 1,
      "message": "Yes iterating is annoying. If you look at Module.cpp in acpi busmanager, it creates ACPI nodes for all devices, You can see this in Devices app in Haiku as well. Perhaps you can use the nodes directly? It is good if we can avoid as many walks as possible. Also display_adapter does some small ACPI work as an example.",
      "parentUuid": "fc758432_2e7402b4",
      "revId": "f116a8a05b3f01417d01964eeeadd890d08ef632",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac59f965_f7245c23",
        "filename": "src/add-ons/kernel/busses/virtio/virtio_mmio/Jamfile",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2022-08-04T12:04:40Z",
      "side": 1,
      "message": "This shouldn\u0027t be the problem of ACPI users. If the API isn\u0027t complete, let them use the private headers.",
      "parentUuid": "d0a8a27e_80a2e76a",
      "revId": "f116a8a05b3f01417d01964eeeadd890d08ef632",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "237f15a2_3cbc4c0b",
        "filename": "src/add-ons/kernel/busses/virtio/virtio_mmio/Jamfile",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-08-04T12:33:38Z",
      "side": 1,
      "message": "I strongly disagree, and we have always strived for modularity before.\nIt hardcodes dependency on an internal version of a library. If it would be a third party driver, it would cause all kinds of problems to upgrade.\nWe have public ACPI headers and a ACPI module just for avoid that kind of mess. Otherwise we could add ACPICA directly to kernel but be stuck with a old ACPI version forever. It would not allow us to add ARM64 or RiscV versions of ACPICA without breaking everything.\n\nAnd as long as I am the one to do all ACPICA updates I insist to do it in a modular way.",
      "parentUuid": "ac59f965_f7245c23",
      "revId": "f116a8a05b3f01417d01964eeeadd890d08ef632",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c32b022_b1ee0ae1",
        "filename": "src/add-ons/kernel/busses/virtio/virtio_mmio/Jamfile",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2022-08-04T13:33:58Z",
      "side": 1,
      "message": "You can disagree as much as you want, public ACPI headers are incomplete. So developers *have* to use the private headers or redefine the acpica structures in code.",
      "parentUuid": "237f15a2_3cbc4c0b",
      "revId": "f116a8a05b3f01417d01964eeeadd890d08ef632",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45dfbe62_3ab2bcad",
        "filename": "src/add-ons/kernel/busses/virtio/virtio_mmio/Jamfile",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-08-04T13:40:03Z",
      "side": 1,
      "message": "It still needs to be done in a correct way. Add the info you need to a proper header. The reason the lib was but inside of the bus manager was that it is not allowed to use outside of it.\nI am not the one who did that design, but I do agree with that decision. \n\nNot sure why you just want to throw the design away, but if you do perhaps you have a better maintainable solution and have the time to implement it. Adding functions are not that hard, and if you just need some value you can make a copy in your driver if you are to lazy to create a feature request or do the right thing.\n\nAnd I can disagree by asking for changes in PR\u0027s, like I did in this change request. If needed I can even help make changes. Is there anything that you want help or make a feature request with?",
      "parentUuid": "5c32b022_b1ee0ae1",
      "revId": "f116a8a05b3f01417d01964eeeadd890d08ef632",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a77482c_bcd7d92c",
        "filename": "src/add-ons/kernel/busses/virtio/virtio_mmio/Jamfile",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2022-08-04T14:11:38Z",
      "side": 1,
      "message": "Basically everything from https://cgit.haiku-os.org/haiku/tree/src/add-ons/kernel/bus_managers/acpi/acpica/include/acrestyp.h is needed.",
      "parentUuid": "45dfbe62_3ab2bcad",
      "revId": "f116a8a05b3f01417d01964eeeadd890d08ef632",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec3fb5b9_667f7284",
        "filename": "src/add-ons/kernel/busses/virtio/virtio_mmio/Jamfile",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-08-04T14:29:48Z",
      "side": 1,
      "message": "Either we need to do as some other OS\u0027es do and transform headers to have correct types and defines to expose it on its own, or we continue the path that was started and update https://cgit.haiku-os.org/haiku/tree/headers/os/drivers/ACPI.h when there is something needed.\n\nThe bigger idea is that you should use the ACPI device nodes and not need to do most of these things. For PCI roots it is a chicken and egg problem, and there are still a lot to work out for better modularity, but we need to find a good way not just include private headers.",
      "parentUuid": "7a77482c_bcd7d92c",
      "revId": "f116a8a05b3f01417d01964eeeadd890d08ef632",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dcbe02ba_29709234",
        "filename": "src/add-ons/kernel/busses/virtio/virtio_mmio/Jamfile",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1000341
      },
      "writtenOn": "2022-08-04T18:12:44Z",
      "side": 1,
      "message": "basically we need the equivalent of fdt_device_get_reg() and fdt_device_get_interrupt() for ACPI here\n\nas I understood the ACPI module does not publish these in the device tree so we can either add a new API for this (like in FDT) or do it like in this patch",
      "parentUuid": "ec3fb5b9_667f7284",
      "revId": "f116a8a05b3f01417d01964eeeadd890d08ef632",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "278a51a3_0232e55c",
        "filename": "src/add-ons/kernel/busses/virtio/virtio_mmio/Jamfile",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1000341
      },
      "writtenOn": "2022-08-09T14:55:18Z",
      "side": 1,
      "message": "can i get some suggestion on how to move on with this?\n\nbasically i see the following options\n1. keep it as it is\n2. expose ACPI headers\n3. add some new methods to the ACPI modules, equivalent to get_reg and get_interrupt for the fdt\n\nor is there any other better approach that i haven\u0027t thought of?",
      "parentUuid": "dcbe02ba_29709234",
      "revId": "f116a8a05b3f01417d01964eeeadd890d08ef632",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c9b8d59_3ab88fb6",
        "filename": "src/add-ons/kernel/busses/virtio/virtio_mmio/Jamfile",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2022-08-09T17:12:59Z",
      "side": 1,
      "message": "Calling and functionality looks correct with acpimodule-\u003ewalkresources. The use of the internal header from inside the acpi busmanager directory just needs to be removed. Fix any missing types with types form \u003cacpi.h\u003e. Add any struct or define that is missing to \u003cacpi.h\u003e.\n\nIt it mostly just equivalent but lowercase definitions, that people have added when they needed them.: https://github.com/haiku/haiku/blob/8f16317a5b6db5c672f331814273e5857555020f/headers/os/drivers/ACPI.h",
      "parentUuid": "278a51a3_0232e55c",
      "revId": "f116a8a05b3f01417d01964eeeadd890d08ef632",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6688d1f9_e50d29a9",
        "filename": "src/add-ons/kernel/busses/virtio/virtio_mmio/Jamfile",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1000341
      },
      "writtenOn": "2022-08-09T18:16:51Z",
      "side": 1,
      "message": "ok let\u0027s try it with \u003cacpi.h\u003e then.",
      "parentUuid": "3c9b8d59_3ab88fb6",
      "revId": "f116a8a05b3f01417d01964eeeadd890d08ef632",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}