{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "04a9497a_5cd3ff02",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2023-10-01T20:14:10Z",
      "side": 1,
      "message": "Added a suggestion. I think this would also apply to the other class. And also suggestion to bump the copyright year in the header.",
      "revId": "07e644728553b72346d8825182792f50361506ad",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "754a4897_ae3af036",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-10-04T16:55:11Z",
      "side": 1,
      "message": "Why not just add a detach function to the existing ScopeExit?",
      "revId": "07e644728553b72346d8825182792f50361506ad",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8243f796_c418188d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2023-10-04T22:03:10Z",
      "side": 1,
      "message": "To not add overhead when it is not needed. Maybe it can be optimized by compiler, but I am not sure.",
      "parentUuid": "754a4897_ae3af036",
      "revId": "07e644728553b72346d8825182792f50361506ad",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c4f68c25_ba76ee58",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2023-10-05T06:58:57Z",
      "side": 1,
      "message": "The C++ experimental scope_exit only has one variety, which is also the function object and a bool. The reason they have one variety, is that for correctness, the object needs to be deactivated if it is moved. See: https://git.haiku-os.org/buildtools/tree/gcc/libstdc++-v3/include/experimental/scope and https://en.cppreference.com/w/cpp/experimental/scope_exit\n\nI think that if we are going to want to force users to use this correctly,we are going to have to make the Detachable version the default (i.e. just have one, like PulkoMandy said).",
      "parentUuid": "8243f796_c418188d",
      "revId": "07e644728553b72346d8825182792f50361506ad",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd66cedc_2d4527b4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-10-05T20:18:36Z",
      "side": 1,
      "message": "The current ScopedExit seems to expect to solve this by using a move on the underlying F type. Indeed I\u0027m not sure this will work in all cases.\n\nSo, should we remove that move constructor to be safe about that, then?\n\nPersonally I would lean towards having only a ScopedExit which can always be detachable. Even if there is some overhead, it will be easier to use, which I think is more important until proven otherwise.",
      "parentUuid": "c4f68c25_ba76ee58",
      "revId": "07e644728553b72346d8825182792f50361506ad",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "321d874d_0c0d860e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2023-10-05T22:22:12Z",
      "side": 1,
      "message": "On my linux machine, the current version actually does not work.\n\nGiven the following:\n```\nint\nmain(int argc, char** argv)\n{\n        auto exit1 \u003d ScopeExit([]{ std::cout \u003c\u003c \"the end\" \u003c\u003c std::endl; });\n        auto exit2 \u003d std::move(exit1);\n        return 0;\n}\n```\n\nmy output is:\n\n\n```\nthe end\nthe end\n```\n\nWhich is not entirely surprising: moving does not make any guarantees about the state of the object that is moved from. A lambda generates a closure type. I don\u0027t think the standard specifies what should be done in case of a move, but I suspect that this type is trivially copyable (I am imagining it as a pointer to a bit of executable code), so that\u0027s what it does on a move.\n\nSo yes, I think that if there is a good argument to keep a simple scope exit, then the move constructor and operator should also be deleted.",
      "parentUuid": "fd66cedc_2d4527b4",
      "revId": "07e644728553b72346d8825182792f50361506ad",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6954405_77833674",
        "filename": "headers/private/shared/ScopeExit.h",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2023-10-05T23:32:15Z",
      "side": 1,
      "message": "other.Detach() should be called here.",
      "revId": "07e644728553b72346d8825182792f50361506ad",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05541cd8_4ddc2c93",
        "filename": "headers/private/shared/ScopeExit.h",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1000012
      },
      "writtenOn": "2023-10-01T20:14:10Z",
      "side": 1,
      "message": "It looks like these are private solely for disabling them. This should not be necessary; if I interpret the spec correctly, implicit copy constructors are marked as deleted if a move constructor is present. If you want to be explicit about it, I would suggest using the \u003ddelete syntax to express it.",
      "revId": "07e644728553b72346d8825182792f50361506ad",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}