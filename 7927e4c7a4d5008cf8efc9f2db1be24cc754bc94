{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e814518c_558f372b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2025-03-06T16:06:06Z",
      "side": 1,
      "message": "I think we should use the c++14 Deprecated attribute instead. This will allow us to formulate the deprecation message directly, and allow people to get proper debug output from their compiler as to what they should do instead.",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1415f613_8a601b0f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-03-06T16:12:10Z",
      "side": 1,
      "message": "1: That won\u0027t work in C mode, so we need to use the attribute for C anyway.\n\n2: It also won\u0027t work in C++11 mode or anything before it, so we would need a macro anyway to disable using that in public headers if the C version is below C++11. And furthermore I don\u0027t think we should leave people who use a C++ version below C++11 out of deprecation warnings and messages.\n\n3: We have a general policy of not including documentation in headers. If you get a deprecation warning, wouldn\u0027t the first instinct be to go read the documentation anyway? Why do we need custom messages about deprecation in headers?\n\n4: Adding messages will increase the size of the header files as well as compilation time. Presently we have either brief notices about deprecation in source code comments (which we can have just one for a whole block of deprecated methods, like in BMessage, and not need to copy/paste the same string multiple times in the same file), or nothing at all. If we have a string per deprecated method then the compiler needs to store it specially, which will increase parsing time and memory usage.\n\nSo on the whole I think the downsides to using the C++14 version here far outweigh any advantages.",
      "parentUuid": "e814518c_558f372b",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e002bdc4_04e4daf7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-03-06T16:12:58Z",
      "side": 1,
      "message": "(And the C++14 attribute apparently goes before the function and not after it, so to use both would clutter up the source code significantly.",
      "parentUuid": "1415f613_8a601b0f",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4f806f9_d7c27eb5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000075
      },
      "writtenOn": "2025-03-08T10:31:39Z",
      "side": 1,
      "message": "C supports the attribute since C23: https://en.cppreference.com/w/c/language/attributes/deprecated\n\nBut being compatible with older language standards is better, so I think @waddlesplash is still right.\n\nThe gcc attribute also supports an optional message to be specified: https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-deprecated-function-attribute",
      "parentUuid": "e002bdc4_04e4daf7",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6a15d23f_f31fee3c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-03-08T13:17:54Z",
      "side": 1,
      "message": "Then there\u0027s really no reason not to go with this, even if we should decide to have inline messages.",
      "parentUuid": "d4f806f9_d7c27eb5",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9588dad0_c7a6f79b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2025-03-08T17:11:59Z",
      "side": 1,
      "message": "_DEPRECATED(message) could be added then?",
      "parentUuid": "6a15d23f_f31fee3c",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8b43d83b_8820bca6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-03-08T17:14:53Z",
      "side": 1,
      "message": "We\u0027d need a separate macro for the version with a message (again, if we actually decide to use it) since macros can\u0027t be overloaded.",
      "parentUuid": "9588dad0_c7a6f79b",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4752d5c_19fc7646",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2025-03-08T22:00:05Z",
      "side": 1,
      "message": "Please add this variant to this review then",
      "parentUuid": "8b43d83b_8820bca6",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc120d12_a9bad726",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-03-08T22:39:18Z",
      "side": 1,
      "message": "No, I still don\u0027t think it makes sense to add for the other reasons I listed (we have a policy of keeping documentation out of headers with rare exceptions, and I don\u0027t think it is one.) I merely meant that, if for whatever reason we do decide to add it and/or change things to use it, it wouldn\u0027t be so invasive as re-ordering things to use the C23/C++14 version would be.",
      "parentUuid": "d4752d5c_19fc7646",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0dccd44_65c6f398",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2025-03-09T09:05:20Z",
      "side": 1,
      "message": "the idea was more about version. deprecated since r1beta6. so it can be defined one time and reused in headers.",
      "parentUuid": "dc120d12_a9bad726",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54c7896c_62afd110",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2025-03-09T09:19:32Z",
      "side": 1,
      "message": "a) this is not documentation\nand b) this doesn\u0027t have anything to do with adding the define.\n\nIf you think something is relevant or not relevant to be annotated for a deprecation then you can mention it on the code review adding that specific deprecation, adding a blanket ban here solely because you think it might not be a case makes no sense.\n\nIf there is a \"policy\" for this, please link it. Thus far you have only claimed severall times there is a policy, but again, marking stuff as deprecated is not documentation. If anything the random comments in headers that just say \"deprecated\" qualify more as documentation than this attribute might.\n\nSetting -2 since this discussion is not resolved any you\u0027ve again +2\u0027d your own change and resolved the comment chain on your own.",
      "parentUuid": "d0dccd44_65c6f398",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "489c34dd_17a5f595",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-03-09T23:28:58Z",
      "side": 1,
      "message": "\u003e b) this doesn\u0027t have anything to do with adding the define.\n\nIt absolutely has something to do with adding the define: if we are never going to use the version with a specific message, then adding a define for that use makes no sense.\n\n\u003e If there is a \"policy\" for this, please link it. \n\nhttps://www.haiku-os.org/development/coding-guidelines/ \"Please note, this is not a place for end-user documentation\"\n\nThere are also references in old docs to why this was chosen e.g. https://www.haiku-os.org/documents/dev/a_crash_course_in_inline_source_code_documentation_with_doxygen \"we\u0027ve tended to include all Storage Kit documentation in our source files, leaving the headers clean and easy to browse\". (I suppose this, from 2002, was before it was basically universal that the docs were kept out of headers and was still sometimes chosen between.)\n\nIt makes sense to sometimes add documentation to headers in exceptional cases, but I think those are rare. The one that comes to mind is the comment by our \"ioctl\" implementation, because it has the potential to generate cryptic compiler errors which aren\u0027t clear whether the problem is with Haiku, the program being compiled, or the compiler configuration. A deprecation message on the other hand is not cryptic at all, and so doesn\u0027t need inline annotation.\n\n\u003e marking stuff as deprecated is not documentation. If anything the random comments in headers that just say \"deprecated\" qualify more as documentation than this attribute might\n\nI agree that the attribute itself isn\u0027t documentation; it\u0027s the message that would be. If `// deprecated: use XYZ instead` would be documentation in your view, how would a deprecated attribute with the same message `\"use XYZ instead\"` *not* be documentation? That doesn\u0027t make sense to me.\n\nFurthermore, how is that sort of documentation really useful here? For a specific example, `BBitmap::SetBits` is deprecated, and `ImportBits` should be used instead. But the parameters to `ImportBits` aren\u0027t the same as `SetBits`; even some of the ones with the same name and type actually behave slightly differently. So unless you already know how these methods are to be used, when encountering the deprecation message you are going to have to read the documentation anyway to figure out what to do instead. So, how does adding specific messages really provide much benefit, anyway?\n\n\u003e Setting -2 since this discussion is not resolved \n\nI added +2 because I don\u0027t think this discussion needs to hold the change up. It doesn\u0027t need to be resolved in order to merge this anymore: because even if we did decide to insert messages, we could just do that building on this change, we wouldn\u0027t have to revert all the changes and re-do them as we would in the C/C++ native attribute case.\n\nSo what do you find objectionable about the change as it is? It doesn\u0027t contain something you think it should have, but it doesn\u0027t actually prevent adding that in the future. So, unless you think literally every single deprecation attribute ought to have an accompanying message, I don\u0027t see why you have voted -2.",
      "parentUuid": "54c7896c_62afd110",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "894732b9_f28c8b66",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2025-03-10T13:18:54Z",
      "side": 1,
      "message": "I don\u0027t agree that this is documentation solely because it is not intended to be gotten by looking in a header. There are only two places you\u0027d get this information from, either the api docs on the website, or the warnings (or errors) from the compiler.\n\nCompiler warnings are already usually a hassle to deal with, since those are not always clear what their problem is, especially for newcomers to the language, and something like picking a wrong variant of a function that is only half-deprecated is easy to do.\nespecially since not everyone is good with the \"check the doc\" variant. I will for example search for examples in the haiku source instead for how to use something, if it is not clear to me based on the doc alone. And this will often be the case. For instance where functions want a bitmask but their documented type is \"uint32\" and doxygen just tells you this is a number type and such.\n\nNow, I\u0027d use an example, see it is deprecated and move on. Instead of figuring out that the prototype is deprecated.\n\nIf you pick for example GetInt32 for BMessage, and use the wrong function prototype it will say that the function is deprecated. So as a programmer you will immidiently search for another function to use. The deprecation warning has to *at least* include the information that this *specific* prototype is deprecated, and not the othe prototypes of the function.\n\nIt doesn\u0027t really help that the documentation currently explains functions or prototypes of the functions first, and adds a \"btw this is deprecated\" below it. Making it not so clear that this only referes to a protoype and not a function.",
      "parentUuid": "489c34dd_17a5f595",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4d98c9f_23c01043",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-03-10T14:09:21Z",
      "side": 1,
      "message": "\u003e I don\u0027t agree that this is documentation solely because it is not intended to be gotten by looking in a header. \n\nWhere is this idea coming from? You don\u0027t get most documentation by \"looking in headers\", you get it from websites.\n\n\u003e Compiler warnings are already usually a hassle to deal with, since those are not always clear what their problem is\n\nAnd as I noted before, the `ioctl` comment in the header makes sense because indeed the compiler messages will be confusing -- but in this case, the compiler messages will be very clear: this method is marked as deprecated. How is that \"not clear what the problem is\"?\n\n\u003e especially for newcomers to the language ... especially since not everyone is good with the \"check the doc\" variant\n\nI don\u0027t understand this. If they are a newcomer to the language, how will they know how to use the API at all without reading the documentation? We should try to make it easier for them to read the docs rather than making assumptions that they will not be able to and finding workarounds for that.\n\n\u003e For instance where functions want a bitmask but their documented type is \"uint32\" and doxygen just tells you this is a number type and such.\n\nThis is a problem with our documentation, not Doxygen in particular (and maybe even declarations in headers.) We should improve any documentation we have with this problem. But that is unrelated to this.\n\n\u003e The deprecation warning has to at least include the information that this specific prototype is deprecated, and not the othe prototypes of the function.\n\nBut that information by itself is still not useful. The message could indicate that, but then the programmer will wonder if the others will soon be deprecated too? Really, to explain the BMessage case, we need a full paragraph or more to explain the situation. And this paragraph will be for all the functions with this problem, not just one; we don\u0027t want to have to copy/paste it for every single one of these methods, we want to have one section in the API docs that explains the situation clearly.\n\n\u003e It doesn\u0027t really help that the documentation currently explains functions or prototypes of the functions first, and adds a \"btw this is deprecated\" below it. \n\nThen we should fix that in the documentation.",
      "parentUuid": "894732b9_f28c8b66",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0cf28d5_30d6f15e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2025-03-10T14:54:48Z",
      "side": 1,
      "message": "The documentation in doxygen beeing up to par doesn\u0027t matter that much, If it was better we still should include this information in the warning. I don\u0027t see why someone would be \"wondering\" if something will be deprecated. That\u0027s not a thing. A deprecation means something is still available, but you should consider not using it, and in the future it will be removed.\nAs soon as you mark something as consideration for that, it too is deprecated effectively. The only difference would be formalizing that. But this has nothing to do with the compiler warning. There isn\u0027t really a thing as something beeing deprecated in the future. You can have something like an \"inofficial\" deprecation, like for the outline list, where it was not officially deprecated, but severall devs think it should be. This won\u0027t be the case for function prototypes, since you\u0027d just have deprecated all in one single go. And not wait a couple of months for no reason to then deprecate the rest.\n\nIf compiler warnings are vague or wrong I don\u0027t go check in the Haiku api documentation for random functions if something is more clearly explained there. If the compiler sais the *function* is deprecated I would trust this normally.\n\nMarking these variants as deprecated in the compiler without adding the info that only the prototype is deprecated is wrong.\n\n\u003e Where is this idea coming from? You don\u0027t get most documentation by \"looking in headers\", you get it from websites.\n... Yes? So where is your idea coming from that this is documentation *in the headers* and users would look for it there?\n\n\n\u003e I don\u0027t understand this. If they are a newcomer to the language, how will they know how to use the API at all without reading the documentation? We should try to make it easier for them to read the docs rather than making assumptions that they will not be able to and finding workarounds for that.\n\nHow would you figure out how to use *anything* in our api with only reading the documentation?\nIt doesn\u0027t really explain any programming pattersn we use, and is really really lacking in any examples. To be honest it is barely more than looking at the function declarations themselves. And the only way this is better than looking at source code only is the sparse places where it does explain what something is for, or how it should be used. \n(And on a side note, it is really difficult to improve this when documentation commits go unreviewed... Those especially need more review since wrong information there hurts us down the line, where a wrong commit can \"easily\" be fixed...)\n\nBut ignoring all that, I don\u0027t understand why you go from \"the documentation should be better\" to \"therefore the compiler warning should be vague or bad\". Those are unrealted issues on their own, and if anything if the documentation is already subpar then blocking the compiler message beeing better (So you as an api user actually look at the *correct* documentation) seems really wierd.\n\nYes, the paragraph for why this prototype in BMessage is deprecated is needed. Yes the documentation should make it better visible what is and what isn\u0027t deprecated. But still, this does not in any way imply we should make the compiler warning vague or less usefull.\n\nkorlis point about adding the version this was deprecated in is relevant aswell.",
      "parentUuid": "b4d98c9f_23c01043",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "564e0b43_5c7c1f34",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-03-10T15:11:52Z",
      "side": 1,
      "message": "\u003e without adding the info that only the prototype is deprecated is wrong.\n\nBut we do have that info: we will mark the one function prototype that is deprecated as deprecated, and not the other prototypes. The attributes will then indicate exactly what we mean to indicate, no more, and no less. So the info is already \"added\" in that case.\n\n\u003e So where is your idea coming from that this is documentation in the headers and users would look for it there?\n\nIt is documentation, and it is in the headers. The fact that users will not \"look\" for it there, but instead the compiler will present it to the users, is irrelevant. Doxygen-style comments will be presented to users by many IDEs if they are in the headers, too, for that matter.\n\n\u003e How would you figure out how to use anything in our api with only reading the documentation? It doesn\u0027t really explain any programming pattersn we use, and is really really lacking in any examples. \n\nThis again is a shortcoming in our documentation, and is not something we should try to solve anywhere other than the documentation itself.\n\n\u003e when documentation commits go unreviewed... Those especially need more review since wrong information there hurts us down the line, where a wrong commit can \"easily\" be fixed\n\nBad documentation can easily be fixed too. And I agree it\u0027s not great that there are pending documentation changes that aren\u0027t being reviewed; I had hoped that someone besides me would take care of this (indeed PulkoMandy did the last rounds of review, I\u0027ve gone ahead and done another on one of the pending changes today). For that matter, you are a developer, and it seems you feel strongly that we should improve documentation more. So why not spend some time reviewing those changes yourself?\n\n\u003e \"therefore the compiler warning should be vague or bad\". \n\n\"This function [overload] is deprecated\" is not vague at all.\n\nAnd I don\u0027t see how it\u0027s \"bad\" either. Sufficiently explaining why it is deprecated, or what should be used instead (and how to use it), will take more than 3 or 5 words, rather it will take multiple sentences or more (if you think version information should be included, that would be 3 or 5 words by itself, never mind any other information). If we were to include messages that long, it would make the compiler output extremely verbose and hard to scroll through, and that wouldn\u0027t be nice; furthermore it would, as I have repeatedly mentioned, put documentation in headers, which we have policies against. So really, the best solution is to just have a single \"deprecated\" message, automatically generated by the compiler, and the API documentation can explain the rest as verbosely or as succinctly as it needs to.",
      "parentUuid": "e0cf28d5_30d6f15e",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59353560_94cd5a5a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2025-03-10T15:27:21Z",
      "side": 1,
      "message": "\u003e But we do have that info: we will mark the one function prototype that is deprecated as deprecated, and not the other prototypes. The attributes will then indicate exactly what we mean to indicate, no more, and no less. So the info is already \"added\" in that case.\n\nObtaining this info would require looking into the header itself, where you ought to not look, since as you said, it should not contain documentation. Adding the info that only one protoype is deprecated will remove the need to check in the header. This will also not mislead people into thinking all prototypes are deprecated.\n\n\u003e For that matter, you are a developer, and it seems you feel strongly that we should improve documentation more. So why not spend some time reviewing those changes yourself?\n\nCurrently, I am trying to document high-level stuff. If I write it it is obviously bound by my knowledge. As for wether something extracted automatically by doxygen passes doxygens syntax checks or not I can\u0027t review because a) I don\u0027t know enough about the doxygen syntax and b) This should be done by a robot instead. Me thinking something is valid or not does not matter, the robot can decide this properly.\n(e.g this beeing stuck in review for about a month with no technical details added: https://review.haiku-os.org/c/haiku/+/8968)\n\nI will also only review documentation changes I know about, the BTranslationUtils one you just reviewed for example I really have no clue about. I\u0027ve not used that class or investigated what it does.\nAdding documentation for stuff that is not documented at all is good. But if there is no additioonal sufficient documentation, like examples, high level overviews, documented caveats etc and only the functions themselves are documented this just makes it more \"bad\" documentation to sift through. Bad in the Short term, but neccesary for the long term. I guess. But no real reasson to commit changes if they have only the prototypes named. Some classes are in the book entirely with \"undocumented public method\". In that case not having this page would be easier to sort through, atleast you know directly you have to get into the source :)\n\nThe deprecation messages should include: The version this was deprecated in, the info that only this prototype is deprecated, if that is the case.\n\nIf you want programming advice you should indeed look at the docs. But not getting the info that other prototypes exist basically sais that all protoypes are deprecated. And I am strongly against that. (See the change from John where GetInt32 was removed and replaced by another version where the error code is also ignored because it was not clear only the prototype is deprecated)",
      "parentUuid": "564e0b43_5c7c1f34",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15eefe3c_b48d66a4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-03-10T15:38:26Z",
      "side": 1,
      "message": "\u003e where you ought to not look\n\nWhy not? I look into headers all the time. It\u0027s quite useful to do so, it provides a nice overview of the class. The fact that it \"doesn\u0027t contain documentation\" is an advantage here, if present that would make it harder to scroll through.\n\n\u003e This will also not mislead people into thinking all prototypes are deprecated.\n\nOnce again: How will they know what to do without reading the documentation and/or other source code anyway? They will need to pick some other function to replace the deprecated one, and learn how to use it. How do you expect they are going to do that? What is it they will do that will result in them being \"mislead\"?\n\n\u003e this beeing stuck in review for about a month with no technical details added\n\nWhat do you mean by \"no technical details\"? It looks like humdinger reviewed it at least once. I didn\u0027t look at the change at all (again, humdinger reviewed it, so I assume he will follow up with more comments if requested.)\n\n\u003e Me thinking something is valid or not does not matter, the robot can decide this properly.\n\nMost of the review of new documentation is to check that the new docs actually make sense and properly describe the methods. Checking that the new documentation renders properly is quite easy; having a bot would be nice, but it\u0027s not hard to download the change and run Doxygen locally.\n\n\u003e the BTranslationUtils one you just reviewed for example I really have no clue about. I\u0027ve not used that class or investigated what it does.\n\nSounds like a great way to learn more about Haiku while you are reviewing the changes then! You can read the docs and say \"is that how it really works / what it really does?\" and then read the source code enough to determine whether the description is accurate or not. In most cases for userland APIs this should not be too difficult either.\n\n\u003e the functions themselves are documented this just makes it more \"bad\" documentation to sift through. Bad in the Short term\n\nI fail to see how this is the case. It\u0027s not as helpful as it could be, sure, but having documentation that describes what the function does and what the parameters do is often quite helpful, even if I often want more than that. That\u0027s not \"bad\", it\u0027s just not as good as it could be.\n\n\u003e But not getting the info that other prototypes exist basically sais that all protoypes are deprecated. \n\nHow do you know that other prototypes do or don\u0027t exist without reading either the header or the docs? So again, what assumptions are really being made here?\n\n\u003e because it was not clear only the prototype is deprecated\n\nRight now the documentation *and* the headers are both unclear on this. We should fix the documentation to be clear, and we should fix the headers to have annotations on only the deprecated prototypes. Then, IMO, both would be clear, and that should suffice to prevent that problem from happening.",
      "parentUuid": "59353560_94cd5a5a",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02739480_0c58116b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2025-03-10T15:49:42Z",
      "side": 1,
      "message": "Again, the info of \"what is deprecated\" is missing\nThis should say if a) the class b) the method or c) the protoype is deprecated.\n\nAgain, this is only for compiler output and not inline documentation. You could remove all named paramaters by the same argument.\n\n\u003eHow do you know that other prototypes do or don\u0027t exist without reading either the header or the docs? So again, what assumptions are really being made here?\n??\nIf the message sais \"this function is deprecated\" it doesn\u0027t matter. if it sais \"this prototype is deprecated\" I know that different ones are available.\nDon\u0027t need to check the header to get rid of this ambiquity if the conpiler includes the proper message.",
      "parentUuid": "15eefe3c_b48d66a4",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e35e2bbb_f7d6bd5b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2025-03-10T15:54:34Z",
      "side": 1,
      "message": "\u003e What do you mean by \"no technical details\"? It looks like humdinger reviewed it at least once. I didn\u0027t look at the change at all (again, humdinger reviewed it, so I assume he will follow up with more comments if requested.)\n\nHumdinger gave usefull suggestioms on wording, but did not comment om the technical acuracy of the change. Seeing as this topic caused confusion in the paast I want to make extra sure this is acuracte.",
      "parentUuid": "02739480_0c58116b",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ac8b0da_e6e5a603",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-03-10T15:57:27Z",
      "side": 1,
      "message": "\u003e This should say if a) the class b) the method or c) the protoype is deprecated.\n\nAh, I see the problem: You are drawing a distinction between \"the method\" and \"the prototype\" which doesn\u0027t really exist. Two functions in C++ which have the same name but different parameters are *different functions*. The documentation is clear about this, e.g.: https://en.cppreference.com/w/cpp/language/functions\n\n\u003e Multiple functions in the same scope may have the same name, as long as their parameter lists and, for non-static member functions, cv/ref-qualifications are different. This is known as function overloading.\n\nSo in fact, definitionally, the functions with different prototypes are different functions. Deprecating one should thus say absolutely nothing about any of the others, neither to the compiler, nor to the user.\n\nThe compiler then saying \"this function is deprecated\" is exactly the same as saying \"this prototype is deprecated\", from a C++ standpoint.",
      "parentUuid": "02739480_0c58116b",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85cfd03e_6c58ed20",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2025-03-10T16:02:06Z",
      "side": 1,
      "message": "From a purely language theoretical standpoint you are correct. But the GetInt32 confusion shows me that developers are not always aware that different prototypes for the same function name exist, and that those would or would not be deprecated.\n\nIn this case it seems that the \"other\" prototype exists to fix an error in the old one, so knowing it exists by explicitly stating that only this one of many prototypes is deprecated removes that ambiquity.",
      "parentUuid": "6ac8b0da_e6e5a603",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fac84af4_ba13fcdb",
        "filename": "headers/os/BeBuild.h",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-03-06T15:38:46Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n#define _DEPRECATED __attribute__((__deprecated__))\n```",
      "range": {
        "startLine": 93,
        "startChar": 0,
        "endLine": 93,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5df52948_472c64e7",
        "filename": "headers/os/BeBuild.h",
        "patchSetId": 2
      },
      "lineNbr": 97,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-03-06T15:38:46Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n#define _DEPRECATED\n```",
      "range": {
        "startLine": 97,
        "startChar": 0,
        "endLine": 97,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}