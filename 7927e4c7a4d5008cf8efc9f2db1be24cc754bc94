{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e814518c_558f372b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2025-03-06T16:06:06Z",
      "side": 1,
      "message": "I think we should use the c++14 Deprecated attribute instead. This will allow us to formulate the deprecation message directly, and allow people to get proper debug output from their compiler as to what they should do instead.",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1415f613_8a601b0f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-03-06T16:12:10Z",
      "side": 1,
      "message": "1: That won\u0027t work in C mode, so we need to use the attribute for C anyway.\n\n2: It also won\u0027t work in C++11 mode or anything before it, so we would need a macro anyway to disable using that in public headers if the C version is below C++11. And furthermore I don\u0027t think we should leave people who use a C++ version below C++11 out of deprecation warnings and messages.\n\n3: We have a general policy of not including documentation in headers. If you get a deprecation warning, wouldn\u0027t the first instinct be to go read the documentation anyway? Why do we need custom messages about deprecation in headers?\n\n4: Adding messages will increase the size of the header files as well as compilation time. Presently we have either brief notices about deprecation in source code comments (which we can have just one for a whole block of deprecated methods, like in BMessage, and not need to copy/paste the same string multiple times in the same file), or nothing at all. If we have a string per deprecated method then the compiler needs to store it specially, which will increase parsing time and memory usage.\n\nSo on the whole I think the downsides to using the C++14 version here far outweigh any advantages.",
      "parentUuid": "e814518c_558f372b",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e002bdc4_04e4daf7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-03-06T16:12:58Z",
      "side": 1,
      "message": "(And the C++14 attribute apparently goes before the function and not after it, so to use both would clutter up the source code significantly.",
      "parentUuid": "1415f613_8a601b0f",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4f806f9_d7c27eb5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000075
      },
      "writtenOn": "2025-03-08T10:31:39Z",
      "side": 1,
      "message": "C supports the attribute since C23: https://en.cppreference.com/w/c/language/attributes/deprecated\n\nBut being compatible with older language standards is better, so I think @waddlesplash is still right.\n\nThe gcc attribute also supports an optional message to be specified: https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-deprecated-function-attribute",
      "parentUuid": "e002bdc4_04e4daf7",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fac84af4_ba13fcdb",
        "filename": "headers/os/BeBuild.h",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-03-06T15:38:46Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n#define _DEPRECATED __attribute__((__deprecated__))\n```",
      "range": {
        "startLine": 93,
        "startChar": 0,
        "endLine": 93,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5df52948_472c64e7",
        "filename": "headers/os/BeBuild.h",
        "patchSetId": 2
      },
      "lineNbr": 97,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-03-06T15:38:46Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n#define _DEPRECATED\n```",
      "range": {
        "startLine": 97,
        "startChar": 0,
        "endLine": 97,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}