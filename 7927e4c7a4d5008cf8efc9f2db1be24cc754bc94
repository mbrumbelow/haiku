{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e814518c_558f372b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2025-03-06T16:06:06Z",
      "side": 1,
      "message": "I think we should use the c++14 Deprecated attribute instead. This will allow us to formulate the deprecation message directly, and allow people to get proper debug output from their compiler as to what they should do instead.",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1415f613_8a601b0f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-03-06T16:12:10Z",
      "side": 1,
      "message": "1: That won\u0027t work in C mode, so we need to use the attribute for C anyway.\n\n2: It also won\u0027t work in C++11 mode or anything before it, so we would need a macro anyway to disable using that in public headers if the C version is below C++11. And furthermore I don\u0027t think we should leave people who use a C++ version below C++11 out of deprecation warnings and messages.\n\n3: We have a general policy of not including documentation in headers. If you get a deprecation warning, wouldn\u0027t the first instinct be to go read the documentation anyway? Why do we need custom messages about deprecation in headers?\n\n4: Adding messages will increase the size of the header files as well as compilation time. Presently we have either brief notices about deprecation in source code comments (which we can have just one for a whole block of deprecated methods, like in BMessage, and not need to copy/paste the same string multiple times in the same file), or nothing at all. If we have a string per deprecated method then the compiler needs to store it specially, which will increase parsing time and memory usage.\n\nSo on the whole I think the downsides to using the C++14 version here far outweigh any advantages.",
      "parentUuid": "e814518c_558f372b",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e002bdc4_04e4daf7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-03-06T16:12:58Z",
      "side": 1,
      "message": "(And the C++14 attribute apparently goes before the function and not after it, so to use both would clutter up the source code significantly.",
      "parentUuid": "1415f613_8a601b0f",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4f806f9_d7c27eb5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000075
      },
      "writtenOn": "2025-03-08T10:31:39Z",
      "side": 1,
      "message": "C supports the attribute since C23: https://en.cppreference.com/w/c/language/attributes/deprecated\n\nBut being compatible with older language standards is better, so I think @waddlesplash is still right.\n\nThe gcc attribute also supports an optional message to be specified: https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-deprecated-function-attribute",
      "parentUuid": "e002bdc4_04e4daf7",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6a15d23f_f31fee3c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-03-08T13:17:54Z",
      "side": 1,
      "message": "Then there\u0027s really no reason not to go with this, even if we should decide to have inline messages.",
      "parentUuid": "d4f806f9_d7c27eb5",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9588dad0_c7a6f79b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2025-03-08T17:11:59Z",
      "side": 1,
      "message": "_DEPRECATED(message) could be added then?",
      "parentUuid": "6a15d23f_f31fee3c",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8b43d83b_8820bca6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-03-08T17:14:53Z",
      "side": 1,
      "message": "We\u0027d need a separate macro for the version with a message (again, if we actually decide to use it) since macros can\u0027t be overloaded.",
      "parentUuid": "9588dad0_c7a6f79b",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4752d5c_19fc7646",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2025-03-08T22:00:05Z",
      "side": 1,
      "message": "Please add this variant to this review then",
      "parentUuid": "8b43d83b_8820bca6",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc120d12_a9bad726",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-03-08T22:39:18Z",
      "side": 1,
      "message": "No, I still don\u0027t think it makes sense to add for the other reasons I listed (we have a policy of keeping documentation out of headers with rare exceptions, and I don\u0027t think it is one.) I merely meant that, if for whatever reason we do decide to add it and/or change things to use it, it wouldn\u0027t be so invasive as re-ordering things to use the C23/C++14 version would be.",
      "parentUuid": "d4752d5c_19fc7646",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0dccd44_65c6f398",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2025-03-09T09:05:20Z",
      "side": 1,
      "message": "the idea was more about version. deprecated since r1beta6. so it can be defined one time and reused in headers.",
      "parentUuid": "dc120d12_a9bad726",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54c7896c_62afd110",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2025-03-09T09:19:32Z",
      "side": 1,
      "message": "a) this is not documentation\nand b) this doesn\u0027t have anything to do with adding the define.\n\nIf you think something is relevant or not relevant to be annotated for a deprecation then you can mention it on the code review adding that specific deprecation, adding a blanket ban here solely because you think it might not be a case makes no sense.\n\nIf there is a \"policy\" for this, please link it. Thus far you have only claimed severall times there is a policy, but again, marking stuff as deprecated is not documentation. If anything the random comments in headers that just say \"deprecated\" qualify more as documentation than this attribute might.\n\nSetting -2 since this discussion is not resolved any you\u0027ve again +2\u0027d your own change and resolved the comment chain on your own.",
      "parentUuid": "d0dccd44_65c6f398",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "489c34dd_17a5f595",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-03-09T23:28:58Z",
      "side": 1,
      "message": "\u003e b) this doesn\u0027t have anything to do with adding the define.\n\nIt absolutely has something to do with adding the define: if we are never going to use the version with a specific message, then adding a define for that use makes no sense.\n\n\u003e If there is a \"policy\" for this, please link it. \n\nhttps://www.haiku-os.org/development/coding-guidelines/ \"Please note, this is not a place for end-user documentation\"\n\nThere are also references in old docs to why this was chosen e.g. https://www.haiku-os.org/documents/dev/a_crash_course_in_inline_source_code_documentation_with_doxygen \"we\u0027ve tended to include all Storage Kit documentation in our source files, leaving the headers clean and easy to browse\". (I suppose this, from 2002, was before it was basically universal that the docs were kept out of headers and was still sometimes chosen between.)\n\nIt makes sense to sometimes add documentation to headers in exceptional cases, but I think those are rare. The one that comes to mind is the comment by our \"ioctl\" implementation, because it has the potential to generate cryptic compiler errors which aren\u0027t clear whether the problem is with Haiku, the program being compiled, or the compiler configuration. A deprecation message on the other hand is not cryptic at all, and so doesn\u0027t need inline annotation.\n\n\u003e marking stuff as deprecated is not documentation. If anything the random comments in headers that just say \"deprecated\" qualify more as documentation than this attribute might\n\nI agree that the attribute itself isn\u0027t documentation; it\u0027s the message that would be. If `// deprecated: use XYZ instead` would be documentation in your view, how would a deprecated attribute with the same message `\"use XYZ instead\"` *not* be documentation? That doesn\u0027t make sense to me.\n\nFurthermore, how is that sort of documentation really useful here? For a specific example, `BBitmap::SetBits` is deprecated, and `ImportBits` should be used instead. But the parameters to `ImportBits` aren\u0027t the same as `SetBits`; even some of the ones with the same name and type actually behave slightly differently. So unless you already know how these methods are to be used, when encountering the deprecation message you are going to have to read the documentation anyway to figure out what to do instead. So, how does adding specific messages really provide much benefit, anyway?\n\n\u003e Setting -2 since this discussion is not resolved \n\nI added +2 because I don\u0027t think this discussion needs to hold the change up. It doesn\u0027t need to be resolved in order to merge this anymore: because even if we did decide to insert messages, we could just do that building on this change, we wouldn\u0027t have to revert all the changes and re-do them as we would in the C/C++ native attribute case.\n\nSo what do you find objectionable about the change as it is? It doesn\u0027t contain something you think it should have, but it doesn\u0027t actually prevent adding that in the future. So, unless you think literally every single deprecation attribute ought to have an accompanying message, I don\u0027t see why you have voted -2.",
      "parentUuid": "54c7896c_62afd110",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fac84af4_ba13fcdb",
        "filename": "headers/os/BeBuild.h",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-03-06T15:38:46Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n#define _DEPRECATED __attribute__((__deprecated__))\n```",
      "range": {
        "startLine": 93,
        "startChar": 0,
        "endLine": 93,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5df52948_472c64e7",
        "filename": "headers/os/BeBuild.h",
        "patchSetId": 2
      },
      "lineNbr": 97,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-03-06T15:38:46Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n#define _DEPRECATED\n```",
      "range": {
        "startLine": 97,
        "startChar": 0,
        "endLine": 97,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "7927e4c7a4d5008cf8efc9f2db1be24cc754bc94",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}