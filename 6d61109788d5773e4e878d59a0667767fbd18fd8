{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d1565a33_ce43a9dc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-04-01T21:46:43Z",
      "side": 1,
      "message": "Considering our thread scheduler doesn\u0027t make any use of this value itself, does it really make sense to expose it? In many ways this is a \"legacy UNIX\" value, isn\u0027t it?\n\nWhy not just expose the Core \"Load\" value to userland instead? It sounds like OpenMP would be satisfied with that?\n\nAlternatively if we do go with this, why not put it in its own file: scheduler_load.cpp? (That way if we add a proper \"Haiku-native\" load average tracking, based around \"needed load\" like our scheduler uses internally, it can go there too.)\n\n(Maybe we can just expose the \"needed load\" values as this, anyway? I.e. if there\u0027s 10 threads waiting to run, but each only needs 10% CPU, then \"needed load\" should be 1.0 (plus that of the running thread), and not 10.0.)",
      "revId": "6d61109788d5773e4e878d59a0667767fbd18fd8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d6cfc07_aee34c2e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2025-04-02T05:07:14Z",
      "side": 1,
      "message": "\u003e Considering our thread scheduler doesn\u0027t make any use of this value itself, does it really make sense to expose it? In many ways this is a \"legacy UNIX\" value, isn\u0027t it?\n\nYou mean the thread count per core? As for the API, I\u0027ve already seen a few applications (ninja, openmp, samurai) using it, so it makes sense to me to provide at least a bit meaningful values. The fact that these are sampled every 5 second makes the load values very approximative anyway. And providing 1-, 5- and 15- minutes loads means the raw values of the scheduler don\u0027t really help. \n\n\u003e Why not just expose the Core \"Load\" value to userland instead? It sounds like OpenMP would be satisfied with that?\n\nYou mean we would be better with providing an Haiku load average tracking to userland, and \"convert\" to getloadavg there? I\u0027ve thought first that an Haiku load average tracking could be part of some existing system info API, if needed, so I wouldn\u0027t put an effort in this. \n\nscheduler_load.cpp right, this is a good idea.",
      "parentUuid": "d1565a33_ce43a9dc",
      "revId": "6d61109788d5773e4e878d59a0667767fbd18fd8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4384aa22_b70088ed",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-04-02T11:59:13Z",
      "side": 1,
      "message": "I suppose if many calculations are based on it in other software already then we might as well implement it.",
      "parentUuid": "7d6cfc07_aee34c2e",
      "revId": "6d61109788d5773e4e878d59a0667767fbd18fd8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8917d02d_3dfc9255",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2025-04-21T18:43:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4384aa22_b70088ed",
      "revId": "6d61109788d5773e4e878d59a0667767fbd18fd8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cd890df7_8f14b2dd",
        "filename": "headers/compatibility/bsd/stdlib.h",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-04-01T21:23:50Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\nint getloadavg(double array[], int size);\n```",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 33,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "6d61109788d5773e4e878d59a0667767fbd18fd8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e439e80b_c5a816e4",
        "filename": "headers/private/system/syscalls.h",
        "patchSetId": 1
      },
      "lineNbr": 216,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-04-01T21:23:50Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\nextern status_t _kern_get_loadavg(struct loadavg* info, size_t size);\n```",
      "range": {
        "startLine": 216,
        "startChar": 0,
        "endLine": 216,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "6d61109788d5773e4e878d59a0667767fbd18fd8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cffaa65e_0c3e9c58",
        "filename": "src/libs/bsd/getloadavg.cpp",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-04-01T21:23:50Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` is to remove this line/these lines.",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 26,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "6d61109788d5773e4e878d59a0667767fbd18fd8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "85383e94_1a0f9b34",
        "filename": "src/system/kernel/scheduler/scheduler.cpp",
        "patchSetId": 1
      },
      "lineNbr": 83,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-04-01T21:23:50Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\nstruct loadavg sAverageRunnable \u003d {{0, 0, 0}, kFScale};\nconst static uint64 sCExp[3] \u003d {(uint64)(0.9200444146293232 * kFScale),\n\t(uint64)(0.9834714538216174 * kFScale), (uint64)(0.9944598480048967 * kFScale)};\nstatic struct timer sLoadavgTimer \u003d {0};\n```",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 83,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "6d61109788d5773e4e878d59a0667767fbd18fd8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "af1ffa22_d6c44d6f",
        "filename": "src/system/kernel/scheduler/scheduler.cpp",
        "patchSetId": 1
      },
      "lineNbr": 781,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-04-01T21:23:50Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\tsAverageRunnable.ldavg[i]\n\t\t\t\u003d (sCExp[i] * sAverageRunnable.ldavg[i] + threadCount * kFScale * (kFScale - sCExp[i]))\n\t\t\t\u003e\u003e kFShift;\n```",
      "range": {
        "startLine": 780,
        "startChar": 0,
        "endLine": 781,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "6d61109788d5773e4e878d59a0667767fbd18fd8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "da896e3e_cfc0b967",
        "filename": "src/system/kernel/scheduler/scheduler.cpp",
        "patchSetId": 1
      },
      "lineNbr": 917,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-04-01T21:23:50Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\treturn B_BAD_ADDRESS;\n```",
      "range": {
        "startLine": 917,
        "startChar": 0,
        "endLine": 917,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "6d61109788d5773e4e878d59a0667767fbd18fd8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b0321340_21f141f9",
        "filename": "src/tests/libs/bsd/getloadavg_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-04-01T21:23:50Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tprintf(\"getloadavg() returned %\" PRId32 \", values %f %f %f\\n\", count, loadavg[0], loadavg[1],\n\t\tloadavg[2]);\n```",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 20,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "6d61109788d5773e4e878d59a0667767fbd18fd8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "56f6d171_ca7e2f66",
        "filename": "src/tests/libs/bsd/getloadavg_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-04-01T21:23:50Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` is to remove this line/these lines.",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 24,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "6d61109788d5773e4e878d59a0667767fbd18fd8",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}