{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "213d46ac_1bae648c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2024-12-27T16:14:59Z",
      "side": 1,
      "message": "Wouldn\u0027t it make more sense to just check for size\u003d\u003d0 and return immediately in the kernel without sending a request to userland at all?\n\nIMHO the system of allocating areas for large requests should probably be done away with and a ring buffer used instead. But we should deal with that later, not in this change.",
      "revId": "d3559dd7e40e5e9759791de26b1afe7e939ab70b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "15ec91a9_c8355e24",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000366
      },
      "writtenOn": "2024-12-28T16:35:44Z",
      "side": 1,
      "message": "Sounds good.\nI left the change to the ADD_ADDRESS macro definition in patchset 2, even though it isn\u0027t specifically needed anymore, since it seems generally useful for the macro to be compatible with use in an if-statement without braces.",
      "parentUuid": "213d46ac_1bae648c",
      "revId": "d3559dd7e40e5e9759791de26b1afe7e939ab70b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8336226_a074b104",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2024-12-28T17:32:49Z",
      "side": 1,
      "message": "That change sounds fine. But the change in the kernel to do ReadStat isn\u0027t good, that will impact performance. If this is operating in I/O requests and the file cache, where is the actual decision to read only 0 bytes made? I.e. file_cache_read() is being called somewhere, and that checks the file cache size, and that\u0027s what should return 0 here.\n\nI guess we wind up calling into userland even for cached reads, though, which probably we should do something about. But that can be for later.\n\nIf there\u0027s no way to prevent a call to userland in this case in the kernel, then let\u0027s just go back to patchset 1.",
      "parentUuid": "15ec91a9_c8355e24",
      "revId": "d3559dd7e40e5e9759791de26b1afe7e939ab70b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f62785d_49eedfc6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000366
      },
      "writtenOn": "2024-12-29T14:34:46Z",
      "side": 1,
      "message": "I don\u0027t see a way to avoid a call to the userlandfs server entirely, unless in the future there is a change to how cached reads generally work in userlandfs, as you mentioned.  Up until file_cache_read() returns, we don\u0027t know we are going to read zero bytes, and the file_cache_read call in the kernel is not made until after the server runs the [filesystem]_read() hook.\n\nIn order to return early from userlandfs_read(), we would need to compare the pos argument to the file size, which also requires a call to the server.  userlandfs_read can\u0027t directly examine the file cache either because even if there was a public file_cache_get_virtual_end() function, userlandfs_read doesn\u0027t have the [filesystem]-private address of the file cache.  \n\nSo maybe patchset 1 is the best option.  Should I upload it again to make it the most recent patchset?",
      "parentUuid": "d8336226_a074b104",
      "revId": "d3559dd7e40e5e9759791de26b1afe7e939ab70b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5620946f_c968851f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2024-12-29T23:14:56Z",
      "side": 1,
      "message": "Yes, I suppose so.",
      "parentUuid": "3f62785d_49eedfc6",
      "revId": "d3559dd7e40e5e9759791de26b1afe7e939ab70b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b75b3905_4a2af451",
        "filename": "src/add-ons/kernel/file_systems/userlandfs/private/Requests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2024-12-27T16:11:11Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n#define _ADD_ADDRESS(_address, _flags) \\\n\t{ \\\n\t\tif (*count \u003e\u003d MAX_REQUEST_ADDRESS_COUNT) \\\n\t\t\treturn B_BAD_VALUE; \\\n\t\tinfos[*count].address \u003d \u0026_address; \\\n\t\tinfos[*count].flags \u003d _flags; \\\n\t\tinfos[(*count)++].max_size \u003d INT32_MAX; \\\n\t} // TODO:...\n```",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 13,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "d3559dd7e40e5e9759791de26b1afe7e939ab70b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}