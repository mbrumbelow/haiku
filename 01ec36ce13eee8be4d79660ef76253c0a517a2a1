{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4f4b2033_756de7d1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-02-22T21:26:45Z",
      "side": 1,
      "message": "This seems like a good thing to have?",
      "revId": "01ec36ce13eee8be4d79660ef76253c0a517a2a1",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c978890_bb2210e9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000605
      },
      "writtenOn": "2025-02-22T21:32:06Z",
      "side": 1,
      "message": "Yes, I thought about restoring this change because I think it should happen eventually.  I think the sniffer rule is OK but for some reason I have this thought that it caused certain files to be misidentified.",
      "parentUuid": "4f4b2033_756de7d1",
      "revId": "01ec36ce13eee8be4d79660ef76253c0a517a2a1",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "149b9bd5_2afac03d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000605
      },
      "writtenOn": "2025-02-22T22:34:04Z",
      "side": 1,
      "message": "This sniffer rule is similar to the HVIF and wonderbrush rules but detection seems to be ok when I tested it out on a bunch of files from all three filetypes just now.  I may be remembering trying to fix the CSS sniffer rule.",
      "parentUuid": "8c978890_bb2210e9",
      "revId": "01ec36ce13eee8be4d79660ef76253c0a517a2a1",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b473d86_752feb1f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-02-24T18:15:22Z",
      "side": 1,
      "message": "1. Did BeOS R5 have a MIME type for its flattened messages? If so we should try and copy its layout. \"Haiku-BMessage\" seems a bit strange as the format name but maybe it makes sense (the format is Haiku-specific so there should be \"Haiku\" in there somehow, at least.)\n\n2. Maybe \"BMessage (flattened, Haiku)\" would be a better description?",
      "revId": "01ec36ce13eee8be4d79660ef76253c0a517a2a1",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb5ce45c_1146d55e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2025-02-24T19:10:02Z",
      "side": 1,
      "message": "1. I\u0027m pretty sure it didn\u0027t ; That said, it\u0027d be worth noting that its flat format is different anyhow (5.1d0 as well as a Haiku use a different message format that allows flattening to be reduced to little more than a memcpy, which was not the case for R5).",
      "parentUuid": "6b473d86_752feb1f",
      "revId": "01ec36ce13eee8be4d79660ef76253c0a517a2a1",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Build-Check",
        "description": {
          "value": "Builds OK on all architectures"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-label:Verified\u003d-1"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-label:Verified=-1"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Verified=-1"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "01ec36ce13eee8be4d79660ef76253c0a517a2a1",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}