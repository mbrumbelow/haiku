{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4f4b2033_756de7d1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-02-22T21:26:45Z",
      "side": 1,
      "message": "This seems like a good thing to have?",
      "revId": "01ec36ce13eee8be4d79660ef76253c0a517a2a1",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c978890_bb2210e9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000605
      },
      "writtenOn": "2025-02-22T21:32:06Z",
      "side": 1,
      "message": "Yes, I thought about restoring this change because I think it should happen eventually.  I think the sniffer rule is OK but for some reason I have this thought that it caused certain files to be misidentified.",
      "parentUuid": "4f4b2033_756de7d1",
      "revId": "01ec36ce13eee8be4d79660ef76253c0a517a2a1",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "149b9bd5_2afac03d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000605
      },
      "writtenOn": "2025-02-22T22:34:04Z",
      "side": 1,
      "message": "This sniffer rule is similar to the HVIF and wonderbrush rules but detection seems to be ok when I tested it out on a bunch of files from all three filetypes just now.  I may be remembering trying to fix the CSS sniffer rule.",
      "parentUuid": "8c978890_bb2210e9",
      "revId": "01ec36ce13eee8be4d79660ef76253c0a517a2a1",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b473d86_752feb1f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-02-24T18:15:22Z",
      "side": 1,
      "message": "1. Did BeOS R5 have a MIME type for its flattened messages? If so we should try and copy its layout. \"Haiku-BMessage\" seems a bit strange as the format name but maybe it makes sense (the format is Haiku-specific so there should be \"Haiku\" in there somehow, at least.)\n\n2. Maybe \"BMessage (flattened, Haiku)\" would be a better description?",
      "revId": "01ec36ce13eee8be4d79660ef76253c0a517a2a1",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb5ce45c_1146d55e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000015
      },
      "writtenOn": "2025-02-24T19:10:02Z",
      "side": 1,
      "message": "1. I\u0027m pretty sure it didn\u0027t ; That said, it\u0027d be worth noting that its flat format is different anyhow (5.1d0 as well as a Haiku use a different message format that allows flattening to be reduced to little more than a memcpy, which was not the case for R5).",
      "parentUuid": "6b473d86_752feb1f",
      "revId": "01ec36ce13eee8be4d79660ef76253c0a517a2a1",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0a7290ee_f473ecbd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2025-02-25T11:48:18Z",
      "side": 1,
      "message": "Don\u0027t have a strong opinion on the name, but this would be good to have.\n\nThe snuffetr rule is not that important. We can properly set this attribute at file creation tume.",
      "revId": "01ec36ce13eee8be4d79660ef76253c0a517a2a1",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "882fe9c1_425f594c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2025-02-26T03:26:08Z",
      "side": 1,
      "message": "I also added BMessage file MIME type to my local setup (with scroll icon). We need to agree on exact MIME type string.",
      "revId": "01ec36ce13eee8be4d79660ef76253c0a517a2a1",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7633e639_faf1be36",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000605
      },
      "writtenOn": "2025-02-27T01:22:30Z",
      "side": 1,
      "message": "\u003e \"Haiku-BMessage\" seems a bit strange as the format name but maybe it makes sense (the format is Haiku-specific so there should be \"Haiku\" in there somehow, at least.)\n\nI browsed through the mozilla and official mimetype lists.  It seems like this fits in with other vendor specific mimetypes, except that it\u0027s more common to use a period as a separator.  Microsoft tends to hyphenate things like vnd.ms-excel, vnd.ms-cab-compressed, and so on.  Other orgs use naming like vnd.mozilla.xul+xml, vnd.apple.keynote, vnd.gentoo.ebuild, and so on.\n\nI think perhaps something like vnd.haiku.flatmessage or vnd.haiku.bmesssage would be ok, but I don\u0027t really have an opinion on what it ends up being called.\n\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/MIME_types/Common_types\n\nhttps://www.iana.org/assignments/media-types/media-types.xhtml#application",
      "parentUuid": "bb5ce45c_1146d55e",
      "revId": "01ec36ce13eee8be4d79660ef76253c0a517a2a1",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Build-Check",
        "description": {
          "value": "Builds OK on all architectures"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-label:Verified\u003d-1"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-label:Verified=-1"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Verified=-1"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "01ec36ce13eee8be4d79660ef76253c0a517a2a1",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}