{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7595f42b_373207c4",
        "filename": "src/add-ons/kernel/file_systems/ntfs/libntfs/Jamfile",
        "patchSetId": 7
      },
      "lineNbr": 5,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-12-21T11:01:32Z",
      "side": 1,
      "message": "If we end up keeping -Wno-error, what\u0027s the point of moving it here instead of keeping it with the other ones in the main file?",
      "revId": "02e23140bbceb433e8e03ad19dca682c5d120b56",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39a68a75_16d6009a",
        "filename": "src/add-ons/kernel/file_systems/ntfs/libntfs/Jamfile",
        "patchSetId": 7
      },
      "lineNbr": 5,
      "author": {
        "id": 1000624
      },
      "writtenOn": "2023-12-21T17:13:38Z",
      "side": 1,
      "message": "This was added because libntfs is from upstream and waddlesplash recommended to not modify it.",
      "parentUuid": "7595f42b_373207c4",
      "revId": "02e23140bbceb433e8e03ad19dca682c5d120b56",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b54d1423_73eb2809",
        "filename": "src/add-ons/kernel/file_systems/ntfs/libntfs/Jamfile",
        "patchSetId": 7
      },
      "lineNbr": 5,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-12-21T17:22:09Z",
      "side": 1,
      "message": "Yes, but if we\u0027re just going to re-add it here, we might as well not remove it from ArchitectureRules.",
      "parentUuid": "39a68a75_16d6009a",
      "revId": "02e23140bbceb433e8e03ad19dca682c5d120b56",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7ea050a_6bbf2e10",
        "filename": "src/add-ons/kernel/file_systems/ntfs/libntfs/Jamfile",
        "patchSetId": 7
      },
      "lineNbr": 5,
      "author": {
        "id": 1000624
      },
      "writtenOn": "2023-12-21T17:24:53Z",
      "side": 1,
      "message": "Alrighty then. I\u0027ll abandon this review then? Looks like the changes aren\u0027t necessary.",
      "parentUuid": "b54d1423_73eb2809",
      "revId": "02e23140bbceb433e8e03ad19dca682c5d120b56",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "caf814c3_fbf15da5",
        "filename": "src/add-ons/kernel/file_systems/ntfs/libntfs/Jamfile",
        "patchSetId": 7
      },
      "lineNbr": 5,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-12-21T17:30:19Z",
      "side": 1,
      "message": "Well, reducing warnings in code we do maintain is good.\n\nLooking around the tree, it appears we do set -Wno-error in some subdirectories anyway, mostly ones with vendored code. So maybe it\u0027s worthwhile nonetheless.",
      "parentUuid": "c7ea050a_6bbf2e10",
      "revId": "02e23140bbceb433e8e03ad19dca682c5d120b56",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3802eed1_e2033867",
        "filename": "src/add-ons/kernel/file_systems/ntfs/libntfs/Jamfile",
        "patchSetId": 7
      },
      "lineNbr": 5,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-12-31T13:45:12Z",
      "side": 1,
      "message": "I have clarified the tocket about -Werror to avoid newcomers trying to fix issues in areas where we\u0027re not sure yet how to handle things. Sorry about that.\n\nThe question remains of how we want to handle Werror and compiler warnings in general for vendored code. As shown here (in mkntfs), the warnings were showing actual problems, that should be fixed. So eventually it would be good to build with warnings enabled as errors, still? Or do we give up on that for 3rd party code, making these problems harder to see?\n\nThen the next question is where we keep these flags. The idea of having them in a central place (in ArchitectureRules) is to identify easily the places where work is needed, with the goal that eventually Werror is enabled everywhere. It seems not great to have compiler flags defined all over the place. So, if the goal is to keep the vendored code as-is, with the warnings, this is fine (with a comment explaining why we\u0027re doing it). But if we plan to fix, maybe it should stay in ArchitectureRules (also with a comment explaining why it has to stay and can\u0027t easily be fixed). What do you all think?",
      "parentUuid": "caf814c3_fbf15da5",
      "revId": "02e23140bbceb433e8e03ad19dca682c5d120b56",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f729244f_10f6b061",
        "filename": "src/add-ons/kernel/file_systems/ntfs/libntfs/Jamfile",
        "patchSetId": 7
      },
      "lineNbr": 5,
      "author": {
        "id": 1000390
      },
      "writtenOn": "2024-08-16T14:48:58Z",
      "side": 1,
      "message": "I think *in generall* -WError is not that good of an idea, since we don\u0027t really prevent warnings by it. But rather lock in people into toolchains. If you have a compiler (like clang) who may issue more warnings you suddenly can\u0027t compile haiku code anymore without spending time having to undo this.\nHaving a policy to not add code which triggers *specific* warnings, and have the build bot notify of that, would work much better.\n\nFor ported code I would simply turn off -Werorr. If somebody wants to fix this (and upstream it) that is neat, if nobody wants to fix it we should just leave the warnings enabled to show there is a potential improvement to be me made.\n\narticle about that: https://embeddedartistry.com/blog/2017/05/22/werror-is-not-your-friend/",
      "parentUuid": "3802eed1_e2033867",
      "revId": "02e23140bbceb433e8e03ad19dca682c5d120b56",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc74de2f_ed856675",
        "filename": "src/add-ons/kernel/file_systems/ntfs/lowntfs.c",
        "patchSetId": 7
      },
      "lineNbr": 32,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-12-21T17:30:19Z",
      "side": 1,
      "message": "no need for #ifdef, and this should go in the same block as \u003cerrno.h\u003e",
      "revId": "02e23140bbceb433e8e03ad19dca682c5d120b56",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1a6f93c9_68936f3d",
        "filename": "src/add-ons/kernel/file_systems/ntfs/lowntfs.c",
        "patchSetId": 7
      },
      "lineNbr": 32,
      "author": {
        "id": 1000624
      },
      "writtenOn": "2023-12-24T09:10:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bc74de2f_ed856675",
      "revId": "02e23140bbceb433e8e03ad19dca682c5d120b56",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5469689_54aefa03",
        "filename": "src/add-ons/kernel/file_systems/ntfs/lowntfs.c",
        "patchSetId": 7
      },
      "lineNbr": 947,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-12-21T17:30:19Z",
      "side": 1,
      "message": "What\u0027s the point of moving this variable declaration? Wasn\u0027t it fine where it was?",
      "revId": "02e23140bbceb433e8e03ad19dca682c5d120b56",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6324ffa7_719e5363",
        "filename": "src/add-ons/kernel/file_systems/ntfs/lowntfs.c",
        "patchSetId": 7
      },
      "lineNbr": 947,
      "author": {
        "id": 1000624
      },
      "writtenOn": "2023-12-21T17:40:04Z",
      "side": 1,
      "message": "Warning was raised because this was assigned to NULL after a goto block that used the variable. So compiler complained saying variable being used before it assigned a value. So moved it further up.",
      "parentUuid": "f5469689_54aefa03",
      "revId": "02e23140bbceb433e8e03ad19dca682c5d120b56",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "38ba2252_21f26bdc",
        "filename": "src/add-ons/kernel/file_systems/ntfs/lowntfs.c",
        "patchSetId": 7
      },
      "lineNbr": 947,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-12-21T17:45:19Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6324ffa7_719e5363",
      "revId": "02e23140bbceb433e8e03ad19dca682c5d120b56",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60393d43_9e6441df",
        "filename": "src/add-ons/kernel/file_systems/ntfs/lowntfs.c",
        "patchSetId": 7
      },
      "lineNbr": 1065,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-12-21T17:30:19Z",
      "side": 1,
      "message": "cast against type, same below",
      "revId": "02e23140bbceb433e8e03ad19dca682c5d120b56",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3c6dc9c1_e053ffcf",
        "filename": "src/add-ons/kernel/file_systems/ntfs/lowntfs.c",
        "patchSetId": 7
      },
      "lineNbr": 1065,
      "author": {
        "id": 1000624
      },
      "writtenOn": "2023-12-24T09:10:38Z",
      "side": 1,
      "message": "Updated the content of `ghostformat` to print u64 type.",
      "parentUuid": "60393d43_9e6441df",
      "revId": "02e23140bbceb433e8e03ad19dca682c5d120b56",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e06d046_d33bbb33",
        "filename": "src/add-ons/kernel/file_systems/ntfs/utils/mkntfs.c",
        "patchSetId": 7
      },
      "lineNbr": 1156,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2023-12-21T11:01:32Z",
      "side": 1,
      "message": "I don\u0027t understand what you are trying to do here. \u0027err\u0027 is already an int, how is adding an extra temporary variable helping anything here?",
      "revId": "02e23140bbceb433e8e03ad19dca682c5d120b56",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3b14554_9ffbd6eb",
        "filename": "src/add-ons/kernel/file_systems/ntfs/utils/mkntfs.c",
        "patchSetId": 7
      },
      "lineNbr": 1156,
      "author": {
        "id": 1000624
      },
      "writtenOn": "2023-12-21T17:13:38Z",
      "side": 1,
      "message": "This was an attempt to fix the warning. \n\nIt seems like ENOMEM is a const member. \n\n`err \u003d -ENOMEM` brings an overflow warning. But first assigning it to an int member is casting it to correct size, post which we can negate it....at least this is how I understand it.\n\nIn 4th patch, I tried to cast it to (long) first but that still rose warning for `x86_gcc2h` target.",
      "parentUuid": "5e06d046_d33bbb33",
      "revId": "02e23140bbceb433e8e03ad19dca682c5d120b56",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff2cd8ed_264b261f",
        "filename": "src/add-ons/kernel/file_systems/ntfs/utils/mkntfs.c",
        "patchSetId": 7
      },
      "lineNbr": 1156,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-12-21T17:30:19Z",
      "side": 1,
      "message": "The correct thing to do is to just have it be `ENOMEM` instead of `-ENOMEM` since error codes are already negative.\n\nHowever, I think this code is also \"vendored\"?",
      "parentUuid": "c3b14554_9ffbd6eb",
      "revId": "02e23140bbceb433e8e03ad19dca682c5d120b56",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "436fe6e7_23540f16",
        "filename": "src/add-ons/kernel/file_systems/ntfs/utils/mkntfs.c",
        "patchSetId": 7
      },
      "lineNbr": 1156,
      "author": {
        "id": 1000624
      },
      "writtenOn": "2023-12-24T09:10:38Z",
      "side": 1,
      "message": "When these functions are called, the return value is checked if it\u0027s less than zero. If it is, that\u0027s an error apparently. Therefore, error code value (like `ENOMEM`) should be some positive number.",
      "parentUuid": "ff2cd8ed_264b261f",
      "revId": "02e23140bbceb433e8e03ad19dca682c5d120b56",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2eeba8e9_d84e5c01",
        "filename": "src/add-ons/kernel/file_systems/ntfs/utils/mkntfs.c",
        "patchSetId": 7
      },
      "lineNbr": 1156,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-12-27T21:24:29Z",
      "side": 1,
      "message": "All error codes including ENOMEM are negative on Haiku. They\u0027re positive on most other OSes which is why there\u0027s \"-\" scattered here. But we don\u0027t need those.",
      "parentUuid": "436fe6e7_23540f16",
      "revId": "02e23140bbceb433e8e03ad19dca682c5d120b56",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ],
  "submitRequirementResults": []
}