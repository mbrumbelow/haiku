{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6157091c_3699aee1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-02-21T02:13:04Z",
      "side": 1,
      "message": "This does seem to break ARM boot after all. But I\u0027m confused as to how, because we actually get \"Welcome to kernel debugger output!\" indicating we got into the kernel OK, but then it stalls and we don\u0027t get \"Haiku revision: ...\"",
      "revId": "a8aa0602d24e991c9a86f929a6fe7fa8fb3a85fd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc202158_bc02c702",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-02-21T02:15:13Z",
      "side": 1,
      "message": "Ah, I misread the logs. We do actually get \"Haiku revision:...\" it\u0027s just nothing after that happens.",
      "parentUuid": "6157091c_3699aee1",
      "revId": "a8aa0602d24e991c9a86f929a6fe7fa8fb3a85fd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "29219361_0141598c",
        "filename": "headers/private/kernel/boot/platform.h",
        "patchSetId": 5
      },
      "lineNbr": 29,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-21T01:49:08Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\nextern status_t platform_allocate_region(void** _virtualAddress, size_t size, uint8 protection);\n```",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 29,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "a8aa0602d24e991c9a86f929a6fe7fa8fb3a85fd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e9f4f7ed_87807889",
        "filename": "src/system/boot/arch/m68k/mmu.cpp",
        "patchSetId": 5
      },
      "lineNbr": 648,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-21T01:49:08Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\nplatform_allocate_region(void** _address, size_t size, uint8 protection)\n```",
      "range": {
        "startLine": 648,
        "startChar": 0,
        "endLine": 648,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "a8aa0602d24e991c9a86f929a6fe7fa8fb3a85fd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "da29c8c6_783c75db",
        "filename": "src/system/boot/loader/file_systems/tarfs/tarfs.cpp",
        "patchSetId": 5
      },
      "lineNbr": 791,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-21T01:49:08Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\t\t\t\t\tB_READ_AREA | B_WRITE_AREA)\n\t\t\t\t\t!\u003d B_OK) {\n```",
      "range": {
        "startLine": 791,
        "startChar": 0,
        "endLine": 791,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "a8aa0602d24e991c9a86f929a6fe7fa8fb3a85fd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "db3c53da_1e070395",
        "filename": "src/system/boot/loader/kernel_args.cpp",
        "patchSetId": 5
      },
      "lineNbr": 438,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-21T01:49:08Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\tif (platform_allocate_region(\u0026block, alignedSize, B_READ_AREA | B_WRITE_AREA) !\u003d B_OK)\n```",
      "range": {
        "startLine": 437,
        "startChar": 0,
        "endLine": 438,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "a8aa0602d24e991c9a86f929a6fe7fa8fb3a85fd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b5f9f1eb_8ef76729",
        "filename": "src/system/boot/loader/kernel_args.cpp",
        "patchSetId": 5
      },
      "lineNbr": 440,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-21T01:49:08Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` is to remove this line/these lines.",
      "range": {
        "startLine": 440,
        "startChar": 0,
        "endLine": 440,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "a8aa0602d24e991c9a86f929a6fe7fa8fb3a85fd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "47e6cb5a_8917d241",
        "filename": "src/system/boot/platform/amiga_m68k/mmu.cpp",
        "patchSetId": 5
      },
      "lineNbr": 646,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-21T01:49:08Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\nplatform_allocate_region(void** _address, size_t size, uint8 protection)\n```",
      "range": {
        "startLine": 646,
        "startChar": 0,
        "endLine": 646,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "a8aa0602d24e991c9a86f929a6fe7fa8fb3a85fd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b5878c93_e92b5295",
        "filename": "src/system/boot/platform/atari_m68k/mmu.cpp",
        "patchSetId": 5
      },
      "lineNbr": 651,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-21T01:49:08Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\nplatform_allocate_region(void** _address, size_t size, uint8 protection)\n```",
      "range": {
        "startLine": 651,
        "startChar": 0,
        "endLine": 651,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "a8aa0602d24e991c9a86f929a6fe7fa8fb3a85fd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "53226a7f_e2924092",
        "filename": "src/system/boot/platform/bios_ia32/mmu.cpp",
        "patchSetId": 5
      },
      "lineNbr": 809,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-21T01:49:08Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\nplatform_allocate_region(void** _address, size_t size, uint8 protection)\n```",
      "range": {
        "startLine": 809,
        "startChar": 0,
        "endLine": 809,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "a8aa0602d24e991c9a86f929a6fe7fa8fb3a85fd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bf35f6e0_f0e7acd1",
        "filename": "src/system/boot/platform/efi/arch/arm/arch_mmu.cpp",
        "patchSetId": 5
      },
      "lineNbr": 222,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-21T01:49:08Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tif (platform_allocate_region((void**)\u0026sPageDirectory,\n\t\t\tARM_MMU_L1_TABLE_SIZE + ALIGN_PAGEDIR + PAGE_TABLE_AREA_SIZE, 0)\n\t\t!\u003d B_OK) {\n```",
      "range": {
        "startLine": 221,
        "startChar": 0,
        "endLine": 222,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "a8aa0602d24e991c9a86f929a6fe7fa8fb3a85fd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "16b96f4d_c1d6fc2b",
        "filename": "src/system/boot/platform/efi/arch/arm/arch_mmu.cpp",
        "patchSetId": 5
      },
      "lineNbr": 223,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-21T01:49:08Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (insert after):\n```c++\n\t}\n```",
      "range": {
        "startLine": 223,
        "startChar": 0,
        "endLine": 223,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "a8aa0602d24e991c9a86f929a6fe7fa8fb3a85fd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e79bbdb7_15b5bd61",
        "filename": "src/system/boot/platform/efi/arch/arm/arch_mmu.cpp",
        "patchSetId": 5
      },
      "lineNbr": 241,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-21T01:49:08Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tif (platform_allocate_region((void**)\u0026sVectorTable, B_PAGE_SIZE, 0) !\u003d B_OK)\n```",
      "range": {
        "startLine": 241,
        "startChar": 0,
        "endLine": 241,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "a8aa0602d24e991c9a86f929a6fe7fa8fb3a85fd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "78eb0b8f_63b65e92",
        "filename": "src/system/boot/platform/efi/arch/arm/arch_start.cpp",
        "patchSetId": 5
      },
      "lineNbr": 64,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-21T01:49:08Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tif (platform_allocate_region_below(\u0026trampolinePage, B_PAGE_SIZE, KERNEL_LOAD_BASE - B_PAGE_SIZE)\n\t\t\u003d\u003d B_OK) {\n\t\tif (platform_assign_kernel_address_for_region(trampolinePage, (addr_t)trampolinePage)\n\t\t\t\u003d\u003d B_OK) {\n```",
      "range": {
        "startLine": 61,
        "startChar": 0,
        "endLine": 64,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "a8aa0602d24e991c9a86f929a6fe7fa8fb3a85fd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4c6c6c26_844bff9e",
        "filename": "src/system/boot/platform/efi/arch/arm/arch_start.cpp",
        "patchSetId": 5
      },
      "lineNbr": 74,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-21T01:49:08Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\tif (platform_assign_kernel_address_for_region(trampolinePage, (addr_t)trampolinePage)\n\t\t\t\u003d\u003d B_OK) {\n```",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 74,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "a8aa0602d24e991c9a86f929a6fe7fa8fb3a85fd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cdb9e883_15918964",
        "filename": "src/system/boot/platform/efi/arch/arm/arch_start.cpp",
        "patchSetId": 5
      },
      "lineNbr": 93,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-21T01:49:08Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tif (platform_allocate_region((void**)\u0026kernelArgs, sizeof(struct kernel_args), 0) !\u003d B_OK)\n```",
      "range": {
        "startLine": 92,
        "startChar": 0,
        "endLine": 93,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "a8aa0602d24e991c9a86f929a6fe7fa8fb3a85fd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cbb92fdc_4e241247",
        "filename": "src/system/boot/platform/efi/arch/riscv64/arch_start.cpp",
        "patchSetId": 5
      },
      "lineNbr": 51,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-21T01:49:08Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tif (platform_allocate_region((void**)\u0026kernelArgs, sizeof(struct kernel_args), 0) !\u003d B_OK)\n```",
      "range": {
        "startLine": 50,
        "startChar": 0,
        "endLine": 51,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "a8aa0602d24e991c9a86f929a6fe7fa8fb3a85fd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fc9859a6_9a612329",
        "filename": "src/system/boot/platform/efi/arch/x86/arch_mmu.cpp",
        "patchSetId": 5
      },
      "lineNbr": 100,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-21T01:49:08Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tif (platform_allocate_region((void**)\u0026bootGDT,\n\t\t\tBOOT_GDT_SEGMENT_COUNT * sizeof(segment_descriptor), 0)\n\t\t!\u003d B_OK) {\n```",
      "range": {
        "startLine": 99,
        "startChar": 0,
        "endLine": 100,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "a8aa0602d24e991c9a86f929a6fe7fa8fb3a85fd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3387d3f4_84047e38",
        "filename": "src/system/boot/platform/efi/arch/x86/arch_mmu.cpp",
        "patchSetId": 5
      },
      "lineNbr": 227,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-21T01:49:08Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tif (platform_allocate_region((void**)\u0026sPageDirectory, B_PAGE_SIZE + ALIGN_PAGEDIR, 0) !\u003d B_OK)\n```",
      "range": {
        "startLine": 226,
        "startChar": 0,
        "endLine": 227,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "a8aa0602d24e991c9a86f929a6fe7fa8fb3a85fd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0e76cec4_4a1f8ef5",
        "filename": "src/system/boot/platform/efi/arch/x86/arch_smp.cpp",
        "patchSetId": 5
      },
      "lineNbr": 182,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-21T01:49:08Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\tif (platform_allocate_region(\u0026stack, size, 0) !\u003d B_OK)\n```",
      "range": {
        "startLine": 182,
        "startChar": 0,
        "endLine": 182,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "a8aa0602d24e991c9a86f929a6fe7fa8fb3a85fd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "71a2675b_05d15eb8",
        "filename": "src/system/boot/platform/efi/arch/x86/arch_smp.cpp",
        "patchSetId": 5
      },
      "lineNbr": 184,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-21T01:49:08Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` is to remove this line/these lines.",
      "range": {
        "startLine": 184,
        "startChar": 0,
        "endLine": 184,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "a8aa0602d24e991c9a86f929a6fe7fa8fb3a85fd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "065c785c_38dbe301",
        "filename": "src/system/boot/platform/efi/arch/x86/arch_start.cpp",
        "patchSetId": 5
      },
      "lineNbr": 67,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-21T01:49:08Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tif (platform_allocate_region((void**)\u0026kernelArgs, sizeof(struct kernel_args), 0) !\u003d B_OK)\n```",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 67,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "a8aa0602d24e991c9a86f929a6fe7fa8fb3a85fd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a8fbdf88_f3c8cb6d",
        "filename": "src/system/boot/platform/efi/mmu.cpp",
        "patchSetId": 5
      },
      "lineNbr": 113,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-21T01:49:08Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\nplatform_allocate_region(void** _address, size_t size, uint8 protection)\n```",
      "range": {
        "startLine": 113,
        "startChar": 0,
        "endLine": 113,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "a8aa0602d24e991c9a86f929a6fe7fa8fb3a85fd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f48449dd_54d8b4bf",
        "filename": "src/system/boot/platform/efi/mmu.cpp",
        "patchSetId": 5
      },
      "lineNbr": 120,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-21T01:49:08Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tefi_status status \u003d kBootServices-\u003eAllocatePages(AllocateAnyPages, EfiLoaderData, pages, \u0026addr);\n```",
      "range": {
        "startLine": 119,
        "startChar": 0,
        "endLine": 120,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "a8aa0602d24e991c9a86f929a6fe7fa8fb3a85fd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bc632b9a_52250d44",
        "filename": "src/system/boot/platform/efi/mmu.cpp",
        "patchSetId": 5
      },
      "lineNbr": 136,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-21T01:49:08Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tmemory_region* region \u003d new(std::nothrow) memory_region{\n\t\tnext : allocated_regions,\n\t\tvaddr : 0,\n\t\tpaddr : (phys_addr_t)addr,\n\t\tsize : size,\n\t\texecute : (protection \u0026 B_EXECUTE_AREA) !\u003d 0\n```",
      "range": {
        "startLine": 131,
        "startChar": 0,
        "endLine": 136,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "a8aa0602d24e991c9a86f929a6fe7fa8fb3a85fd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c1cb7373_f7b356cd",
        "filename": "src/system/boot/platform/efi/mmu.cpp",
        "patchSetId": 5
      },
      "lineNbr": 154,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-21T01:49:08Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\nplatform_allocate_region_below(void** _address, size_t size, phys_addr_t maxAddress)\n```",
      "range": {
        "startLine": 154,
        "startChar": 0,
        "endLine": 154,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "a8aa0602d24e991c9a86f929a6fe7fa8fb3a85fd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b010fa3c_32dffbe6",
        "filename": "src/system/boot/platform/efi/mmu.cpp",
        "patchSetId": 5
      },
      "lineNbr": 170,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-21T01:49:08Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tmemory_region* region \u003d new(std::nothrow)\n\tmemory_region{next : allocated_regions, vaddr : 0, paddr : (phys_addr_t)addr, size : size};\n```",
      "range": {
        "startLine": 165,
        "startChar": 0,
        "endLine": 170,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "a8aa0602d24e991c9a86f929a6fe7fa8fb3a85fd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3d5119fb_c7c41835",
        "filename": "src/system/boot/platform/efi/mmu.cpp",
        "patchSetId": 5
      },
      "lineNbr": 243,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-21T01:49:08Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\nplatform_assign_kernel_address_for_region(void* address, addr_t assign)\n```",
      "range": {
        "startLine": 243,
        "startChar": 0,
        "endLine": 243,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "a8aa0602d24e991c9a86f929a6fe7fa8fb3a85fd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2022acd1_c00ac1aa",
        "filename": "src/system/boot/platform/efi/mmu.cpp",
        "patchSetId": 5
      },
      "lineNbr": 249,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-21T01:49:08Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tfor (memory_region* region \u003d allocated_regions; region; region \u003d region-\u003enext) {\n```",
      "range": {
        "startLine": 248,
        "startChar": 0,
        "endLine": 249,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "a8aa0602d24e991c9a86f929a6fe7fa8fb3a85fd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d78902e8_b76e6679",
        "filename": "src/system/boot/platform/efi/mmu.cpp",
        "patchSetId": 5
      },
      "lineNbr": 266,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-21T01:49:08Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\nplatform_bootloader_address_to_kernel_address(void* address, addr_t* _result)\n```",
      "range": {
        "startLine": 266,
        "startChar": 0,
        "endLine": 266,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "a8aa0602d24e991c9a86f929a6fe7fa8fb3a85fd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4fe74d91_0e897708",
        "filename": "src/system/boot/platform/efi/mmu.h",
        "patchSetId": 5
      },
      "lineNbr": 44,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-21T01:49:08Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\nextern status_t platform_assign_kernel_address_for_region(void* address, addr_t assign);\n```",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 44,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "a8aa0602d24e991c9a86f929a6fe7fa8fb3a85fd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fad23993_6c976825",
        "filename": "src/system/boot/platform/efi/mmu.h",
        "patchSetId": 5
      },
      "lineNbr": 53,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-21T01:49:08Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\nextern status_t platform_allocate_region_below(void** _address, size_t size,\n\tphys_addr_t maxAddress);\n```",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 53,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "a8aa0602d24e991c9a86f929a6fe7fa8fb3a85fd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "33c412c3_e954d065",
        "filename": "src/system/boot/platform/efi/start.cpp",
        "patchSetId": 5
      },
      "lineNbr": 200,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-21T01:49:08Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\t\tKERNEL_STACK_SIZE + KERNEL_STACK_GUARD_PAGES * B_PAGE_SIZE, 0)\n\t\t!\u003d B_OK) {\n```",
      "range": {
        "startLine": 200,
        "startChar": 0,
        "endLine": 200,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "a8aa0602d24e991c9a86f929a6fe7fa8fb3a85fd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1f6d1832_d32ed3f1",
        "filename": "src/system/boot/platform/next_m68k/mmu.cpp",
        "patchSetId": 5
      },
      "lineNbr": 139,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-21T01:49:08Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\nplatform_allocate_region(void** _address, size_t size, uint8 protection)\n```",
      "range": {
        "startLine": 139,
        "startChar": 0,
        "endLine": 139,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "a8aa0602d24e991c9a86f929a6fe7fa8fb3a85fd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "08947988_91b84946",
        "filename": "src/system/boot/platform/openfirmware/heap.cpp",
        "patchSetId": 5
      },
      "lineNbr": 30,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-21T01:49:08Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tstatus_t error \u003d platform_allocate_region(_base, size, B_READ_AREA | B_WRITE_AREA);\n```",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 30,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "a8aa0602d24e991c9a86f929a6fe7fa8fb3a85fd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4e75ddd4_52671eba",
        "filename": "src/system/boot/platform/openfirmware/mmu.cpp",
        "patchSetId": 5
      },
      "lineNbr": 15,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-21T01:49:08Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\nplatform_allocate_region(void** _address, size_t size, uint8 protection)\n```",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 15,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "a8aa0602d24e991c9a86f929a6fe7fa8fb3a85fd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "40ead3fe_0927bcb7",
        "filename": "src/system/boot/platform/openfirmware/mmu.cpp",
        "patchSetId": 5
      },
      "lineNbr": 21,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-21T01:49:08Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\tvoid* address \u003d arch_mmu_allocate(*_address, size, protection, false);\n```",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 21,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "a8aa0602d24e991c9a86f929a6fe7fa8fb3a85fd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "944a85ad_060c71a3",
        "filename": "src/system/boot/platform/pxe_ia32/network.cpp",
        "patchSetId": 5
      },
      "lineNbr": 557,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-21T01:49:08Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n/*\n * Copyright 2006, Marcus Overhagen \u003cmarcus@overhagen.de. All rights reserved.\n * Copyright 2005, Ingo Weinhold \u003cbonefish@cs.tu-berlin.de\u003e.\n * Distributed under the terms of the MIT License.\n */\n\n#include \u003cnew\u003e\n#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n#include \u003cstring.h\u003e\n\n#include \u003cKernelExport.h\u003e\n\n#include \u003cboot/platform.h\u003e\n\n#include \"network.h\"\n#include \"pxe_undi.h\"\n\n//#define TRACE_NETWORK\n#ifdef TRACE_NETWORK\n#\tdefine TRACE(x...) dprintf(x)\n#else\n#\tdefine TRACE(x...)\n#endif\n\n#ifdef TRACE_NETWORK\n\nstatic void\nhex_dump(const void *_data, int length)\n{\n\tuint8 *data \u003d (uint8*)_data;\n\tfor (int i \u003d 0; i \u003c length; i++) {\n\t\tif (i % 4 \u003d\u003d 0) {\n\t\t\tif (i % 32 \u003d\u003d 0) {\n\t\t\t\tif (i !\u003d 0)\n\t\t\t\t\tTRACE(\"\\n\");\n\t\t\t\tTRACE(\"%03x: \", i);\n\t\t\t} else\n\t\t\t\tTRACE(\" \");\n\t\t}\n\n\t\tTRACE(\"%02x\", data[i]);\n\t}\n\tTRACE(\"\\n\");\n}\n\n#else\t// !TRACE_NETWORK\n\n#define hex_dump(data, length)\n\n#endif\t// !TRACE_NETWORK\n\n\n// #pragma mark - PXEService\n\n\nPXEService::PXEService()\n\t: fPxeData(NULL),\n\t  fClientIP(0),\n\t  fServerIP(0),\n\t  fRootPath(NULL)\n{\n}\n\n\nPXEService::~PXEService()\n{\n\tfree(fRootPath);\n}\n\n\nstatus_t\nPXEService::Init()\n{\n\t// get !PXE struct\n\tfPxeData \u003d pxe_undi_find_data();\n\tif (!fPxeData) {\n\t\tpanic(\"can\u0027t find !PXE structure\");\n\t\treturn B_ERROR;\n\t}\n\n\tdprintf(\"PXE API entrypoint at %04x:%04x\\n\", fPxeData-\u003eEntryPointSP.seg, fPxeData-\u003eEntryPointSP.ofs);\n\n\t// get cached info\n\tPXENV_GET_CACHED_INFO cached_info;\n\tcached_info.PacketType \u003d PXENV_PACKET_TYPE_CACHED_REPLY;\n\tcached_info.BufferSize \u003d 0;\n\tcached_info.BufferLimit \u003d 0;\n\tcached_info.Buffer.seg \u003d 0;\n\tcached_info.Buffer.ofs \u003d 0;\n\tuint16 res \u003d call_pxe_bios(fPxeData, GET_CACHED_INFO, \u0026cached_info);\n\tif (res !\u003d 0 || cached_info.Status !\u003d 0) {\n\t\tchar s[100];\n\t\tsnprintf(s, sizeof(s), \"Can\u0027t determine IP address! PXENV_GET_CACHED_INFO res %x, status %x\\n\", res, cached_info.Status);\n\t\tpanic(\"%s\", s);\n\t\treturn B_ERROR;\n\t}\n\n\tchar *buf \u003d (char *)(cached_info.Buffer.seg * 16 + cached_info.Buffer.ofs);\n\tfClientIP \u003d ntohl(*(ip_addr_t *)(buf + 16));\n\tfServerIP \u003d ntohl(*(ip_addr_t *)(buf + 20));\n\tfMACAddress \u003d mac_addr_t((uint8*)(buf + 28));\n\n\tuint8* options \u003d (uint8*)buf + 236;\n\tint optionsLen \u003d int(cached_info.BufferSize) - 236;\n\n\t// check magic\n\tif (optionsLen \u003c 4 || options[0] !\u003d 0x63 || options[1] !\u003d 0x82\n\t\t|| options[2] !\u003d 0x53 || options[3] !\u003d 0x63) {\n\t\treturn B_OK;\n\t}\n\toptions +\u003d 4;\n\toptionsLen -\u003d 4;\n\n\t// parse DHCP options\n\twhile (optionsLen \u003e 0) {\n\t\tint option \u003d *(options++);\n\t\toptionsLen--;\n\n\t\t// check end or pad option\n\t\tif (option \u003d\u003d 0xff || optionsLen \u003c 0)\n\t\t\tbreak;\n\t\tif (option \u003d\u003d 0x00)\n\t\t\tcontinue;\n\n\t\t// other options have a len field\n\t\tint len \u003d *(options++);\n\t\toptionsLen--;\n\t\tif (len \u003e optionsLen)\n\t\t\tbreak;\n\n\t\t// root path option\n\t\tif (option \u003d\u003d 17) {\n\t\t\tdprintf(\"root path option: \\\"%.*s\\\"\\n\", len, (char*)options);\n\t\t\tfree(fRootPath);\n\t\t\tfRootPath \u003d (char*)malloc(len + 1);\n\t\t\tif (!fRootPath)\n\t\t\t\treturn B_NO_MEMORY;\n\t\t\tmemcpy(fRootPath, options, len);\n\t\t\tfRootPath[len] \u003d \u0027\\0\u0027;\n\t\t}\n\n\t\toptions +\u003d len;\n\t\toptionsLen -\u003d len;\n\t}\n\n\treturn B_OK;\n}\n\n\n// #pragma mark - UNDI\n\n\nUNDI::UNDI()\n :\tfRxFinished(true)\n{\n\tTRACE(\"UNDI::UNDI\\n\");\n}\n\n\nUNDI::~UNDI()\n{\n\tTRACE(\"UNDI::~UNDI\\n\");\n}\n\n\nstatus_t\nUNDI::Init()\n{\n\tTRACE(\"UNDI::Init\\n\");\n\n\tPXENV_UNDI_GET_INFORMATION get_info;\n\tPXENV_UNDI_GET_STATE get_state;\n\tPXENV_UNDI_OPEN undi_open;\n\tuint16 res;\n\n\tstatus_t error \u003d PXEService::Init();\n\tif (error !\u003d B_OK)\n\t\treturn error;\n\n\tdprintf(\"client-ip: %u.%u.%u.%u, server-ip: %u.%u.%u.%u\\n\",\n\t\t(fClientIP \u003e\u003e 24) \u0026 0xff, (fClientIP \u003e\u003e 16) \u0026 0xff, (fClientIP \u003e\u003e 8) \u0026 0xff, fClientIP \u0026 0xff,\n\t\t(fServerIP \u003e\u003e 24) \u0026 0xff, (fServerIP \u003e\u003e 16) \u0026 0xff, (fServerIP \u003e\u003e 8) \u0026 0xff, fServerIP \u0026 0xff);\n\n\tSetIPAddress(fClientIP);\n\n\tundi_open.OpenFlag \u003d 0;\n\tundi_open.PktFilter \u003d FLTR_DIRECTED | FLTR_BRDCST | FLTR_PRMSCS;\n\tundi_open.R_Mcast_Buf.MCastAddrCount \u003d 0;\n\n\tres \u003d call_pxe_bios(fPxeData, UNDI_OPEN, \u0026undi_open);\n\tif (res !\u003d 0 || undi_open.Status !\u003d 0) {\n\t\tdprintf(\"PXENV_UNDI_OPEN failed, res %x, status %x, ignoring\\n\", res, undi_open.Status);\n\t}\n\n\tres \u003d call_pxe_bios(fPxeData, UNDI_GET_STATE, \u0026get_state);\n\tif (res !\u003d 0 || get_state.Status !\u003d 0) {\n\t\tdprintf(\"PXENV_UNDI_GET_STATE failed, res %x, status %x, ignoring\\n\", res, get_state.Status);\n\t} else {\n\t\tswitch (get_state.UNDIstate) {\n\t\t\tcase PXE_UNDI_GET_STATE_STARTED:\n\t\t\t\tTRACE(\"PXE_UNDI_GET_STATE_STARTED\\n\");\n\t\t\t\tbreak;\n\t\t\tcase PXE_UNDI_GET_STATE_INITIALIZED:\n\t\t\t\tTRACE(\"PXE_UNDI_GET_STATE_INITIALIZED\\n\");\n\t\t\t\tbreak;\n\t\t\tcase PXE_UNDI_GET_STATE_OPENED:\n\t\t\t\tTRACE(\"PXE_UNDI_GET_STATE_OPENED\\n\");\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tTRACE(\"unknown undi state 0x%02x\\n\", get_state.UNDIstate);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tres \u003d call_pxe_bios(fPxeData, UNDI_GET_INFORMATION, \u0026get_info);\n\tif (res !\u003d 0 || get_info.Status !\u003d 0) {\n\t\tdprintf(\"PXENV_UNDI_GET_INFORMATION failed, res %x, status %x\\n\", res, get_info.Status);\n\t\treturn B_ERROR;\n\t}\n\n\tTRACE(\"Status \u003d %x\\n\", get_info.Status);\n\tTRACE(\"BaseIo \u003d %x\\n\", get_info.BaseIo);\n\tTRACE(\"IntNumber \u003d %x\\n\", get_info.IntNumber);\n\tTRACE(\"MaxTranUnit \u003d %x\\n\", get_info.MaxTranUnit);\n\tTRACE(\"HwType \u003d %x\\n\", get_info.HwType);\n\tTRACE(\"HwAddrLen \u003d %x\\n\", get_info.HwAddrLen);\n\tTRACE(\"RxBufCt \u003d %x\\n\", get_info.RxBufCt);\n\tTRACE(\"TxBufCt \u003d %x\\n\", get_info.TxBufCt);\n\n\tfMACAddress \u003d get_info.CurrentNodeAddress;\n\n\tTRACE(\"MAC: %02x:%02x:%02x:%02x:%02x:%02x\\n\", fMACAddress[0], fMACAddress[1], fMACAddress[2], fMACAddress[3], fMACAddress[4], fMACAddress[5]);\n\n\treturn B_OK;\n}\n\n\nmac_addr_t\nUNDI::MACAddress() const\n{\n\treturn fMACAddress;\n}\n\n\nvoid *\nUNDI::AllocateSendReceiveBuffer(size_t size)\n{\n\tTRACE(\"UNDI::AllocateSendReceiveBuffer, size %ld\\n\", size);\n\tif (size \u003e 0x3000)\n\t\treturn NULL;\n\n\treturn (void *)0x500;\n}\n\n\nvoid\nUNDI::FreeSendReceiveBuffer(void *buffer)\n{\n\tTRACE(\"UNDI::FreeSendReceiveBuffer\\n\");\n}\n\n\nssize_t\nUNDI::Send(const void *buffer, size_t size)\n{\n\tTRACE(\"UNDI::Send, buffer %p, size %ld\\n\", buffer, size);\n\n//\thex_dump(buffer, size);\n\n\tPXENV_UNDI_TRANSMIT undi_tx;\n\tPXENV_UNDI_TBD undi_tbd;\n\n\tundi_tx.Protocol \u003d P_UNKNOWN;\n\tundi_tx.XmitFlag \u003d XMT_DESTADDR;\n\tundi_tx.DestAddr.seg \u003d SEG((char *)buffer + 16);\n\tundi_tx.DestAddr.ofs \u003d OFS((char *)buffer + 16);\n\tundi_tx.TBD.seg \u003d SEG(\u0026undi_tbd);\n\tundi_tx.TBD.ofs \u003d OFS(\u0026undi_tbd);\n\n\tundi_tbd.ImmedLength \u003d size;\n\tundi_tbd.Xmit.seg \u003d SEG(buffer);\n\tundi_tbd.Xmit.ofs \u003d OFS(buffer);\n\tundi_tbd.DataBlkCount \u003d 0;\n\n\tuint16 res \u003d call_pxe_bios(fPxeData, UNDI_TRANSMIT, \u0026undi_tx);\n\tif (res !\u003d 0 || undi_tx.Status !\u003d 0) {\n\t\tdprintf(\"UNDI_TRANSMIT failed, res %x, status %x\\n\", res, undi_tx.Status);\n\t\treturn 0;\n\t}\n\n\tTRACE(\"UNDI_TRANSMIT success\\n\");\n\n\treturn size;\n}\n\n\nssize_t\nUNDI::Receive(void *buffer, size_t size)\n{\n\t//TRACE(\"UNDI::Receive, buffer %p, size %ld\\n\", buffer, size);\n\n\tPXENV_UNDI_ISR undi_isr;\n\tuint16 res;\n\n\tif (!fRxFinished) {\n\t\tTRACE(\"continue receive...\\n\");\n\n\t\tundi_isr.FuncFlag \u003d PXENV_UNDI_ISR_IN_GET_NEXT;\n\t\tres \u003d call_pxe_bios(fPxeData, UNDI_ISR, \u0026undi_isr);\n\t\tif (res !\u003d 0 || undi_isr.Status !\u003d 0) {\n\t\t\tdprintf(\"PXENV_UNDI_ISR_IN_GET_NEXT failed, res %x, status %x\\n\", res, undi_isr.Status);\n\t\t\tfRxFinished \u003d true;\n\t\t\treturn 0;\n\t\t}\n\n\t} else {\n\n\t\tundi_isr.FuncFlag \u003d PXENV_UNDI_ISR_IN_START;\n\n\t\tres \u003d call_pxe_bios(fPxeData, UNDI_ISR, \u0026undi_isr);\n\t\tif (res !\u003d 0 || undi_isr.Status !\u003d 0) {\n\t\t\tdprintf(\"PXENV_UNDI_ISR_IN_START failed, res %x, status %x\\n\", res, undi_isr.Status);\n\t\t\treturn -1;\n\t\t}\n\n\t\tif (undi_isr.FuncFlag !\u003d PXENV_UNDI_ISR_OUT_OURS) {\n//\t\t\tTRACE(\"not ours\\n\");\n\t\t\treturn -1;\n\t\t}\n\n\t\t// send EOI to pic ?\n\n//\t\tTRACE(\"PXENV_UNDI_ISR_OUT_OURS\\n\");\n\n\t\tundi_isr.FuncFlag \u003d PXENV_UNDI_ISR_IN_PROCESS;\n\t\tres \u003d call_pxe_bios(fPxeData, UNDI_ISR, \u0026undi_isr);\n\t\tif (res !\u003d 0 || undi_isr.Status !\u003d 0) {\n\t\t\tdprintf(\"PXENV_UNDI_ISR_IN_PROCESS failed, res %x, status %x\\n\", res, undi_isr.Status);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\tswitch (undi_isr.FuncFlag) {\n\t\tcase PXENV_UNDI_ISR_OUT_TRANSMIT:\n\t\t\tTRACE(\"PXENV_UNDI_ISR_OUT_TRANSMIT\\n\");\n\t\t\tfRxFinished \u003d false;\n\t\t\treturn 0;\n\n\t\tcase PXENV_UNDI_ISR_OUT_RECEIVE:\n\t\t\tTRACE(\"PXENV_UNDI_ISR_OUT_RECEIVE\\n\");\n//\t\t\tTRACE(\"BufferLength %d\\n\", undi_isr.BufferLength);\n//\t\t\tTRACE(\"FrameLength %d\\n\", undi_isr.FrameLength);\n//\t\t\tTRACE(\"FrameHeaderLength %d\\n\", undi_isr.FrameHeaderLength);\n\t\t\tif (undi_isr.FrameLength \u003e undi_isr.BufferLength)\n\t\t\t\tpanic(\"UNDI::Receive: multi buffer frames not supported\");\n\t\t\tif (size \u003e undi_isr.BufferLength)\n\t\t\t\tsize \u003d undi_isr.BufferLength;\n\t\t\tmemcpy(buffer, (const void *)(undi_isr.Frame.seg * 16 + undi_isr.Frame.ofs), size);\n//\t\t\thex_dump(buffer, size);\n\t\t\tfRxFinished \u003d false;\n\t\t\treturn size;\n\n\t\tcase PXENV_UNDI_ISR_OUT_BUSY:\n\t\t\tTRACE(\"PXENV_UNDI_ISR_OUT_BUSY\\n\");\n\t\t\tfRxFinished \u003d true;\n\t\t\treturn -1;\n\n\t\tcase PXENV_UNDI_ISR_OUT_DONE:\n\t\t\tTRACE(\"PXENV_UNDI_ISR_OUT_DONE\\n\");\n\t\t\tfRxFinished \u003d true;\n\t\t\treturn -1;\n\n\t\tdefault:\n\t\t\tTRACE(\"default!!!\\n\");\n\t\t\treturn -1;\n\t}\n}\n\n\n// #pragma mark - TFTP\n\nTFTP::TFTP()\n{\n}\n\n\nTFTP::~TFTP()\n{\n}\n\n\nstatus_t\nTFTP::Init()\n{\n\tstatus_t error \u003d PXEService::Init();\n\tif (error !\u003d B_OK)\n\t\treturn error;\n\n\n\n\treturn B_OK;\n}\n\n\nuint16\nTFTP::ServerPort() const\n{\n\treturn 69;\n}\n\n\nstatus_t\nTFTP::ReceiveFile(const char* fileName, uint8** data, size_t* size)\n{\n\t// get file size\n\tpxenv_tftp_get_fsize getFileSize;\n\tgetFileSize.server_ip.num \u003d htonl(fServerIP);\n\tgetFileSize.gateway_ip.num \u003d 0;\n\tstrlcpy(getFileSize.file_name, fileName, sizeof(getFileSize.file_name));\n\n\tuint16 res \u003d call_pxe_bios(fPxeData, TFTP_GET_FILE_SIZE, \u0026getFileSize);\n\tif (res !\u003d 0 || getFileSize.status !\u003d 0) {\n\t\tdprintf(\"TFTP_GET_FILE_SIZE failed, res %x, status %x\\n\", res,\n\t\t\tgetFileSize.status);\n\n\t\treturn B_ERROR;\n\t}\n\n\tuint32 fileSize \u003d getFileSize.file_size;\n\tdprintf(\"size of boot archive \\\"%s\\\": %u\\n\", fileName, fileSize);\n\n\t// allocate memory for the data\n\tuint8* fileData \u003d NULL;\n\tif (platform_allocate_region((void**)\u0026fileData, fileSize, B_READ_AREA | B_WRITE_AREA) !\u003d B_OK) {\n\t\tTRACE((\"TFTP: allocating memory for file data failed\\n\"));\n\t\treturn B_NO_MEMORY;\n\t}\n\n\t// open TFTP connection\n\tpxenv_tftp_open openConnection;\n\topenConnection.server_ip.num \u003d htonl(fServerIP);\n\topenConnection.gateway_ip.num \u003d 0;\n\tstrlcpy(openConnection.file_name, fileName, sizeof(getFileSize.file_name));\n\topenConnection.port \u003d htons(ServerPort());\n\topenConnection.packet_size \u003d 1456;\n\n\tres \u003d call_pxe_bios(fPxeData, TFTP_OPEN, \u0026openConnection);\n\tif (res !\u003d 0 || openConnection.status !\u003d 0) {\n\t\tdprintf(\"TFTP_OPEN failed, res %x, status %x\\n\", res,\n\t\t\topenConnection.status);\n\n\t\tplatform_free_region(fileData, fileSize);\n\t\treturn B_ERROR;\n\t}\n\n\tuint16 packetSize \u003d openConnection.packet_size;\n\tdprintf(\"successfully opened TFTP connection, packet size %u\\n\",\n\t\tpacketSize);\n\n\t// check, if the file is too big for the TFTP protocol\n\tif (fileSize \u003e 0xffff * (uint32)packetSize) {\n\t\tdprintf(\"TFTP: File is too big to be transferred via TFTP\\n\");\n\t\t_Close();\n\t\tplatform_free_region(fileData, fileSize);\n\t\treturn B_ERROR;\n\t}\n\n\t// transfer the file\n\tstatus_t error \u003d B_OK;\n\tuint32 remainingBytes \u003d fileSize;\n\tuint8* buffer \u003d fileData;\n\twhile (remainingBytes \u003e 0) {\n\t\tvoid* scratchBuffer \u003d (void*)0x07C00;\n\t\tpxenv_tftp_read readPacket;\n\t\treadPacket.buffer.seg \u003d SEG(scratchBuffer);\n\t\treadPacket.buffer.ofs \u003d OFS(scratchBuffer);\n\n\t\tres \u003d call_pxe_bios(fPxeData, TFTP_READ, \u0026readPacket);\n\t\tif (res !\u003d 0 || readPacket.status !\u003d 0) {\n\t\t\tdprintf(\"TFTP_READ failed, res %x, status %x\\n\", res,\n\t\t\t\treadPacket.status);\n\t\t\terror \u003d B_ERROR;\n\t\t\tbreak;\n\t\t}\n\n\t\tuint32 bytesRead \u003d readPacket.buffer_size;\n\t\tif (bytesRead \u003e remainingBytes) {\n\t\t\tdprintf(\"TFTP: Read more bytes than should be remaining!\");\n\t\t\terror \u003d B_ERROR;\n\t\t\tbreak;\n\t\t}\n\n\t\tmemcpy(buffer, scratchBuffer, bytesRead);\n\t\tbuffer +\u003d bytesRead;\n\t\tremainingBytes -\u003d bytesRead;\n\t}\n\n\t// close TFTP connection\n\t_Close();\n\n\tif (error \u003d\u003d B_OK) {\n\t\tdprintf(\"TFTP: Successfully received file\\n\");\n\t\t*data \u003d fileData;\n\t\t*size \u003d fileSize;\n\t} else {\n\t\tplatform_free_region(fileData, fileSize);\n\t}\n\n\treturn error;\n}\n\nstatus_t\nTFTP::_Close()\n{\n\t// close TFTP connection\n\tpxenv_tftp_close closeConnection;\n\tuint16 res \u003d call_pxe_bios(fPxeData, TFTP_CLOSE, \u0026closeConnection);\n\tif (res !\u003d 0 || closeConnection.status !\u003d 0) {\n\t\tdprintf(\"TFTP_CLOSE failed, res %x, status %x\\n\", res,\n\t\t\tcloseConnection.status);\n\t\treturn B_ERROR;\n\t}\n\n\treturn B_OK;\n}\n\n\n\n// #pragma mark -\n\n\nstatus_t\nplatform_net_stack_init()\n{\n\tTRACE(\"platform_net_stack_init\\n\");\n\n\tUNDI *interface \u003d new(nothrow) UNDI;\n\tif (!interface)\n\t\treturn B_NO_MEMORY;\n\n\tstatus_t error \u003d interface-\u003eInit();\n\tif (error !\u003d B_OK) {\n\t\tTRACE(\"platform_net_stack_init: interface init failed\\n\");\n\t\tdelete interface;\n\t\treturn error;\n\t}\n\n\terror \u003d NetStack::Default()-\u003eAddEthernetInterface(interface);\n\tif (error !\u003d B_OK) {\n\t\tdelete interface;\n\t\treturn error;\n\t}\n\n\treturn B_OK;\n}\n```",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 557,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "a8aa0602d24e991c9a86f929a6fe7fa8fb3a85fd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a322381a_4496ae1d",
        "filename": "src/system/boot/platform/riscv/mmu.cpp",
        "patchSetId": 5
      },
      "lineNbr": 416,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-21T01:49:08Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\n\t\t\tKERNEL_STACK_SIZE + KERNEL_STACK_GUARD_PAGES * B_PAGE_SIZE, B_READ_AREA | B_WRITE_AREA)\n\t\t!\u003d B_OK) {\n```",
      "range": {
        "startLine": 415,
        "startChar": 0,
        "endLine": 416,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "a8aa0602d24e991c9a86f929a6fe7fa8fb3a85fd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5f779a63_598d309a",
        "filename": "src/system/boot/platform/u-boot/arch/ppc/arch_mmu.cpp",
        "patchSetId": 5
      },
      "lineNbr": 353,
      "author": {
        "id": 1000630
      },
      "writtenOn": "2025-02-21T01:49:08Z",
      "side": 1,
      "message": "Suggestion from `haiku-format` (change):\n```c++\nplatform_allocate_region(void** _address, size_t size, uint8 protection)\n```",
      "range": {
        "startLine": 353,
        "startChar": 0,
        "endLine": 353,
        "endChar": 0
      },
      "tag": "autogenerated:experimental-formatting-bot",
      "revId": "a8aa0602d24e991c9a86f929a6fe7fa8fb3a85fd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}