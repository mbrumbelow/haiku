{
  "comments": [
    {
      "key": {
        "uuid": "e28c95ad_5088e3c5",
        "filename": "headers/os/support/MemoryRingIO.h",
        "patchSetId": 8
      },
      "lineNbr": 37,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2020-07-09T20:45:08Z",
      "side": 1,
      "message": "Not a fan of this name. Isn\u0027t this rather just a Close()? Also, there should then also be a IsClosed() so you know the stream has been closed.",
      "revId": "6d51f744e3139795c0b84d550b56efa57857c1e5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05556dac_675a1152",
        "filename": "headers/os/support/MemoryRingIO.h",
        "patchSetId": 8
      },
      "lineNbr": 37,
      "author": {
        "id": 1000052
      },
      "writtenOn": "2020-07-09T21:26:33Z",
      "side": 1,
      "message": "Maybe the POSIX error code \"ENODATA\" could be used?",
      "parentUuid": "e28c95ad_5088e3c5",
      "revId": "6d51f744e3139795c0b84d550b56efa57857c1e5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "763cad6b_c01b4062",
        "filename": "headers/os/support/MemoryRingIO.h",
        "patchSetId": 8
      },
      "lineNbr": 37,
      "author": {
        "id": 1000035
      },
      "writtenOn": "2020-07-09T22:02:16Z",
      "side": 1,
      "message": "IMO Close() implies that the device will be invalidated and can\u0027t be read from, which is not the case here.\n\nI can add IsClosed(), but I\u0027m not sure whether there would be any use cases for it.",
      "parentUuid": "05556dac_675a1152",
      "revId": "6d51f744e3139795c0b84d550b56efa57857c1e5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28bb27d0_bf490c67",
        "filename": "src/kits/support/MemoryRingIO.cpp",
        "patchSetId": 8
      },
      "lineNbr": 39,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2020-07-09T20:45:08Z",
      "side": 1,
      "message": "What about __builtin_clz()?",
      "revId": "6d51f744e3139795c0b84d550b56efa57857c1e5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5162b72_1a13ed5c",
        "filename": "src/kits/support/MemoryRingIO.cpp",
        "patchSetId": 8
      },
      "lineNbr": 39,
      "author": {
        "id": 1000035
      },
      "writtenOn": "2020-07-11T23:01:06Z",
      "side": 1,
      "message": "It can create branching code, which wouldn\u0027t be an improvement (see http://locklessinc.com/articles/next_pow2/ which summarizes on this).",
      "parentUuid": "28bb27d0_bf490c67",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "6d51f744e3139795c0b84d550b56efa57857c1e5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7339ae74_78881cc5",
        "filename": "src/kits/support/MemoryRingIO.cpp",
        "patchSetId": 8
      },
      "lineNbr": 39,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2020-07-12T07:54:30Z",
      "side": 1,
      "message": "The only branch it creates is the test for size \u003c\u003d 2 at the start of their function. It is an attempt at optimization from them. size !\u003d 0 would work with the normal code as far as I can see, and that test is already there a line below your use of next_power_of_two.\n\nAlso, this is used in SetSize which does not look like a performance critical path here.\n\nI would prefer the more readable and more compact version. Depending on the CPU used, it could be optimized a lot better. Lockless does not say which machine they tried this one and there is no date on the article. The result could change a lot depending on the machine used. Also it doesn\u0027t properly take into account the function call overhead (they mention it but do nothing about it). In normal use this function would be inlined (especially the very short clz based variant) and then gcc can actually optimize depending on what is done with the value.",
      "parentUuid": "d5162b72_1a13ed5c",
      "revId": "6d51f744e3139795c0b84d550b56efa57857c1e5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5b06eabd_127dc46f",
        "filename": "src/kits/support/MemoryRingIO.cpp",
        "patchSetId": 8
      },
      "lineNbr": 65,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2020-07-09T20:45:08Z",
      "side": 1,
      "message": "avoids -\u003e avoid",
      "revId": "6d51f744e3139795c0b84d550b56efa57857c1e5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a679ebd4_c5f2518c",
        "filename": "src/kits/support/MemoryRingIO.cpp",
        "patchSetId": 8
      },
      "lineNbr": 65,
      "author": {
        "id": 1000035
      },
      "writtenOn": "2020-07-11T23:01:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5b06eabd_127dc46f",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "6d51f744e3139795c0b84d550b56efa57857c1e5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9f726c5_6feb40b6",
        "filename": "src/kits/support/MemoryRingIO.cpp",
        "patchSetId": 8
      },
      "lineNbr": 247,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2020-07-09T20:45:08Z",
      "side": 1,
      "message": "We usually don\u0027t mix class implementations with other stuff, but keep them separate (like your next_power_of_two() implementation). The declaration order in the header should match that of the implementation, too.\n\nWhy not use a private method here instead, anyway?",
      "revId": "6d51f744e3139795c0b84d550b56efa57857c1e5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6f8c6c7_c64dffc7",
        "filename": "src/kits/support/MemoryRingIO.cpp",
        "patchSetId": 8
      },
      "lineNbr": 247,
      "author": {
        "id": 1000035
      },
      "writtenOn": "2020-07-11T23:01:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d9f726c5_6feb40b6",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "6d51f744e3139795c0b84d550b56efa57857c1e5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aa197684_fb5ac164",
        "filename": "src/kits/support/MemoryRingIO.cpp",
        "patchSetId": 8
      },
      "lineNbr": 273,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2020-07-09T20:45:08Z",
      "side": 1,
      "message": "That\u0027s not really the error code I would have expected in this case. But I don\u0027t really have a good idea or suggestion either.\nIn any way, this is usually returned when you use a timeout of 0 -- and the call would indeed block. However, in this case, it won\u0027t block, because the stream closed already.",
      "revId": "6d51f744e3139795c0b84d550b56efa57857c1e5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9bd35b14_4596a783",
        "filename": "src/kits/support/MemoryRingIO.cpp",
        "patchSetId": 8
      },
      "lineNbr": 273,
      "author": {
        "id": 1000035
      },
      "writtenOn": "2020-07-09T22:02:16Z",
      "side": 1,
      "message": "The idea is that if there aren\u0027t any writer (due to SetEndReached()) then the call would block because there won\u0027t be any data to read.\n\nI\u0027m open to better error codes though.",
      "parentUuid": "aa197684_fb5ac164",
      "revId": "6d51f744e3139795c0b84d550b56efa57857c1e5",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5",
      "unresolved": true
    }
  ]
}