{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "cbed43ad_d77edcf6",
        "filename": "headers/private/kernel/util/Bitmap.h",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2023-06-01T08:18:19Z",
      "side": 1,
      "message": "kBitsPerElement isn\u0027t used anymore, I suppose",
      "revId": "f64cccb0b61bdd3e7c9d8a87687ffe64c6a4f81b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8a25dc7_02d58529",
        "filename": "headers/private/kernel/util/Bitmap.h",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1000391
      },
      "writtenOn": "2023-06-01T08:52:05Z",
      "side": 1,
      "message": "Still used in `Bitmap::GetHighestSet()`.",
      "parentUuid": "cbed43ad_d77edcf6",
      "revId": "f64cccb0b61bdd3e7c9d8a87687ffe64c6a4f81b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b2013e5_4b9bfd62",
        "filename": "headers/private/kernel/util/Bitmap.h",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2023-06-03T07:47:30Z",
      "side": 1,
      "message": "OK.\naddr_t used here and in Bitmap::Shift() should be the same. It would be a good idea to define this type in a macro (I don\u0027t know anything better).",
      "parentUuid": "b8a25dc7_02d58529",
      "revId": "f64cccb0b61bdd3e7c9d8a87687ffe64c6a4f81b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11af1a55_1801d9e4",
        "filename": "headers/private/kernel/util/Bitmap.h",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1000391
      },
      "writtenOn": "2023-06-03T07:51:51Z",
      "side": 1,
      "message": "`addr_t` is already simple and expressive enough.\n\nIt is also used in all the other Bitmap non-static functions.\n\nWhy do we have to create another alias?",
      "parentUuid": "0b2013e5_4b9bfd62",
      "revId": "f64cccb0b61bdd3e7c9d8a87687ffe64c6a4f81b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b508390e_42fcdd49",
        "filename": "headers/private/kernel/util/Bitmap.h",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2023-06-03T14:13:08Z",
      "side": 1,
      "message": "Right. The class Bitmap is meant to be used with addr_t and nevertheless there is this one static method which doesn\u0027t belong here. Why does it have to live in this class anyway?",
      "parentUuid": "11af1a55_1801d9e4",
      "revId": "f64cccb0b61bdd3e7c9d8a87687ffe64c6a4f81b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63d1428f_918597e7",
        "filename": "headers/private/kernel/util/Bitmap.h",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1000391
      },
      "writtenOn": "2023-06-03T14:15:01Z",
      "side": 1,
      "message": "It is waddlesplash\u0027s idea (discussed on IRC) to have a static method sharing code with the `Shift` method.",
      "parentUuid": "b508390e_42fcdd49",
      "revId": "f64cccb0b61bdd3e7c9d8a87687ffe64c6a4f81b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41ac3350_5e23579a",
        "filename": "headers/private/kernel/util/Bitmap.h",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2023-06-04T09:17:23Z",
      "side": 1,
      "message": "not questioning that, though the static method could live standalone out of the class.",
      "parentUuid": "63d1428f_918597e7",
      "revId": "f64cccb0b61bdd3e7c9d8a87687ffe64c6a4f81b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62e4b760_4e712e0d",
        "filename": "headers/private/kernel/util/Bitmap.h",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-06-05T01:46:01Z",
      "side": 1,
      "message": "We have a BitUtils header, that may be the place for it.",
      "parentUuid": "41ac3350_5e23579a",
      "revId": "f64cccb0b61bdd3e7c9d8a87687ffe64c6a4f81b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2d73347_3e0108f0",
        "filename": "src/system/kernel/vm/vm.cpp",
        "patchSetId": 1
      },
      "lineNbr": 690,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-06-01T16:14:59Z",
      "side": 1,
      "message": "Could the allocation of page protections, at least, be factored out into a utility function?\n\nSomething like:\n\nuint8* realloc_page_protections(uint8* pageProtections, size_t areaSize, uint32 allocationFlags);\n\nWe will need to add a realloc_etc call for the kernel, I guess.",
      "revId": "f64cccb0b61bdd3e7c9d8a87687ffe64c6a4f81b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0dcb4c2_dc6e0025",
        "filename": "src/system/kernel/vm/vm.cpp",
        "patchSetId": 1
      },
      "lineNbr": 690,
      "author": {
        "id": 1000391
      },
      "writtenOn": "2023-06-01T22:58:11Z",
      "side": 1,
      "message": "Like I said in the previous patch, for each case the allocation is done differently (`realloc` vs `malloc` - `memcpy` - `free`).\n\nIt might be possible to pull the first two cases (shrink tail - shrink head) to a separate function that takes the shift as a parameter. If shift is zero, `realloc` can be used, otherwise `malloc` - `memcpy` - `free` is used. This, however, does not reduce any code duplication. Furthermore, the third case (cut in the middle of an area) still cannot use this function since it strategically places its allocations, shifts, and copying so that a safe recovery on error is always guaranteed.",
      "parentUuid": "c2d73347_3e0108f0",
      "revId": "f64cccb0b61bdd3e7c9d8a87687ffe64c6a4f81b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4240fcd8_59b24909",
        "filename": "src/system/kernel/vm/vm.cpp",
        "patchSetId": 1
      },
      "lineNbr": 690,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-06-01T23:34:01Z",
      "side": 1,
      "message": "realloc and malloc can be reduced to just one call (realloc.) In the case where you need a new buffer, just realloc(NULL). That way the (size/pagesize+1)/2 is abstracted away, and the cast, too.",
      "parentUuid": "f0dcb4c2_dc6e0025",
      "revId": "f64cccb0b61bdd3e7c9d8a87687ffe64c6a4f81b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0a8c923e_00938b09",
        "filename": "src/system/kernel/vm/vm.cpp",
        "patchSetId": 1
      },
      "lineNbr": 690,
      "author": {
        "id": 1000391
      },
      "writtenOn": "2023-06-02T01:14:46Z",
      "side": 1,
      "message": "I see, you only want the allocation to be split out into a separate function, and not the shifting or assignment to `VMArea`.\n\nI have done that in the latest patch. It seems like we are missing `realloc_etc`, but adding that involves editing multiple files and would make this change a bit too oversized.",
      "parentUuid": "4240fcd8_59b24909",
      "revId": "f64cccb0b61bdd3e7c9d8a87687ffe64c6a4f81b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9541a11a_c69f33ed",
        "filename": "src/tests/system/kernel/mmap_cut_tests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-06-01T16:08:54Z",
      "side": 1,
      "message": "It may be best to break these separate tests out into separate functions.",
      "revId": "f64cccb0b61bdd3e7c9d8a87687ffe64c6a4f81b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c95efda_87e428dd",
        "filename": "src/tests/system/kernel/mmap_cut_tests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1000391
      },
      "writtenOn": "2023-06-01T22:58:11Z",
      "side": 1,
      "message": "The three tests, or just the one I added?",
      "parentUuid": "9541a11a_c69f33ed",
      "revId": "f64cccb0b61bdd3e7c9d8a87687ffe64c6a4f81b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c6c578c_149fc4ed",
        "filename": "src/tests/system/kernel/mmap_cut_tests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2023-06-01T23:34:01Z",
      "side": 1,
      "message": "Might as well do all of them in this file at once.",
      "parentUuid": "9c95efda_87e428dd",
      "revId": "f64cccb0b61bdd3e7c9d8a87687ffe64c6a4f81b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "012a5c1c_1b746cae",
        "filename": "src/tests/system/kernel/mmap_cut_tests.cpp",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1000391
      },
      "writtenOn": "2023-06-02T01:14:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1c6c578c_149fc4ed",
      "revId": "f64cccb0b61bdd3e7c9d8a87687ffe64c6a4f81b",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}