{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4af1cea6_fafbe396",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-03-18T21:42:43Z",
      "side": 1,
      "message": "I guess this is what the BSDs do?",
      "revId": "20415bb8f7473de0adc43affb0d983cb6a86a9b6",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d64c6e4a_44b5a348",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2025-03-20T18:18:18Z",
      "side": 1,
      "message": "BSDs don\u0027t have add-ons I think. The aim here is to load add-ons more like we load a library.",
      "parentUuid": "4af1cea6_fafbe396",
      "revId": "20415bb8f7473de0adc43affb0d983cb6a86a9b6",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97fce09c_116c27f1",
        "filename": "src/system/runtime_loader/elf_symbol_lookup.cpp",
        "patchSetId": 1
      },
      "lineNbr": 524,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2025-03-19T09:50:08Z",
      "side": 1,
      "message": "I don\u0027t understand this change. The weak symbol should be handled as a candidateSymbol at line 529, but we should keep looking for other symbols in case we find a non-weak one.\n\nOnly if the loop exits without finding a non-weak symbol, we end up using the candidateSymbol (at line 545).\n\nWith this change, as soon as we find a weak symbol, we accept it, without checking if another image has a non-weak version that we should use in priority.\n\nSo:\n\n- I don\u0027t understand how this fixes the problem mentionned in the commit message (the symbol should have be found eventually via the candidateSymbol system),\n- It looks like it will break overriding a weak symbol with a non-weak one.",
      "revId": "20415bb8f7473de0adc43affb0d983cb6a86a9b6",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6dbf5b5_82ab85be",
        "filename": "src/system/runtime_loader/elf_symbol_lookup.cpp",
        "patchSetId": 1
      },
      "lineNbr": 524,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2025-03-19T17:10:35Z",
      "side": 1,
      "message": "Indeed weak symbol declarations are normal symbols and should be accepted for resolving.\nThe use case: asan is statically linked in the main executable and provides weak symbol declarations like malloc() free(). libroot provides the same non-weak symbols, libstdc++/libsupc++ some others. \nWith libraries this works correctly already (see find_undefined_symbol_global), but for add-ons like translators it doesn\u0027t. this is explained in the comment before this function, with the reason: to avoid global symbols clashes. IMO this is only a problem on GCC2.",
      "parentUuid": "97fce09c_116c27f1",
      "revId": "20415bb8f7473de0adc43affb0d983cb6a86a9b6",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}