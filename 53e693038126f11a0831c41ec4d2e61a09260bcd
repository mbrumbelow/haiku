{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c4c1fd9f_8740b907",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2025-03-11T23:41:10Z",
      "side": 1,
      "message": "Are you sure? ARM etc. have weaker memory ordering constraints.",
      "revId": "53e693038126f11a0831c41ec4d2e61a09260bcd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ce38abd_54d9d080",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-03-12T01:52:29Z",
      "side": 1,
      "message": "This value is only read and written by this same thread, not any others. So the memory ordering should be irrelevant.\n\nThe only way I can see a problem even potentially happening is if a page fault happens while we are incrementing or decrementing the value. But even then it should not cause any problems even if we are interrupted right there. And I don\u0027t know how that could happen anyway, we are in the kernel where page faults usually shouldn\u0027t happen.",
      "parentUuid": "c4c1fd9f_8740b907",
      "revId": "53e693038126f11a0831c41ec4d2e61a09260bcd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "010648a3_c15a43c9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 1000172
      },
      "writtenOn": "2025-03-14T11:33:11Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6ce38abd_54d9d080",
      "revId": "53e693038126f11a0831c41ec4d2e61a09260bcd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4985b417_81277454",
        "filename": "src/add-ons/kernel/file_systems/ramfs/DataContainer.cpp",
        "patchSetId": 4
      },
      "lineNbr": 384,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2025-03-12T20:06:35Z",
      "side": 1,
      "message": "why not user_memset or memset()?",
      "revId": "53e693038126f11a0831c41ec4d2e61a09260bcd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "72e6f49a_312cc9ce",
        "filename": "src/add-ons/kernel/file_systems/ramfs/DataContainer.cpp",
        "patchSetId": 4
      },
      "lineNbr": 384,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-03-12T20:35:00Z",
      "side": 1,
      "message": "My thought was that this codepath will probably universally be hit by userland, since the kernel doesn\u0027t use mapped files usually. But I guess that\u0027s not really an excuse and we should add the branches. Changed.",
      "parentUuid": "4985b417_81277454",
      "revId": "53e693038126f11a0831c41ec4d2e61a09260bcd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "092f4ce1_90d3efd4",
        "filename": "src/system/kernel/cache/file_cache.cpp",
        "patchSetId": 4
      },
      "lineNbr": 936,
      "author": {
        "id": 1000023
      },
      "writtenOn": "2025-03-12T20:06:35Z",
      "side": 1,
      "message": "why not user_memset or memset()?",
      "revId": "53e693038126f11a0831c41ec4d2e61a09260bcd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "03406434_9d767dd6",
        "filename": "src/system/kernel/cache/file_cache.cpp",
        "patchSetId": 4
      },
      "lineNbr": 936,
      "author": {
        "id": 1000011
      },
      "writtenOn": "2025-03-12T20:35:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "092f4ce1_90d3efd4",
      "revId": "53e693038126f11a0831c41ec4d2e61a09260bcd",
      "serverId": "40b9299a-d8a8-485d-9b01-e6d3f45eefb5"
    }
  ]
}